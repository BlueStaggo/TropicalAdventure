--- net/minecraft/src/MapGenBase.java
+++ net/minecraft/src/MapGenBase.java
@@ -7,7 +7,7 @@
 	protected Random rand = new Random();
 	protected World field_35530_d;
 
-	public void generate(IChunkProvider var1, World var2, int var3, int var4, byte[] var5) {
+	public void generate(IChunkProvider var1, World var2, int var3, int var4, byte[] var5, byte[] var5a) {
 		int var6 = this.field_947_a;
 		this.field_35530_d = var2;
 		this.rand.setSeed(var2.getRandomSeed());
@@ -19,12 +19,12 @@
 				long var13 = (long)var11 * var7;
 				long var15 = (long)var12 * var9;
 				this.rand.setSeed(var13 ^ var15 ^ var2.getRandomSeed());
-				this.recursiveGenerate(var2, var11, var12, var3, var4, var5);
+				this.recursiveGenerate(var2, var11, var12, var3, var4, var5, var5a);
 			}
 		}
 
 	}
 
-	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
+	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6, byte[] var6a) {
 	}
 }
--- net/minecraft/src/ComponentMineshaftStairs.java
+++ net/minecraft/src/ComponentMineshaftStairs.java
@@ -55,6 +55,11 @@
 		if(this.func_35295_a(var1, var3)) {
 			return false;
 		} else {
+			if (!this.isNotFloatingOrHasBlockAbove(var1, var3) ||
+					var1.getWorldChunkManager().getBiomeGenAt(var3.field_35678_a, var3.field_35677_c).field_35529_y == BiomeGenBase.volcanicIsland.field_35529_y) {
+				return false;
+			}
+
 			this.func_35294_a(var1, var3, 0, 5, 0, 2, 7, 1, 0, 0, false);
 			this.func_35294_a(var1, var3, 0, 0, 7, 2, 2, 8, 0, 0, false);
 
--- /dev/null
+++ net/minecraft/src/Facing.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+public class Facing {
+    public static final int[] faceToSide =
+            {
+                    1, 0, 3, 2, 5, 4
+            };
+    public static final int[] offsetsXForSide =
+            {
+                    0, 0, 0, 0, -1, 1
+            };
+    public static final int[] offsetsYForSide =
+            {
+                    -1, 1, 0, 0, 0, 0
+            };
+    public static final int[] offsetsZForSide =
+            {
+                    0, 0, -1, 1, 0, 0
+            };
+
+    public Facing() {
+    }
+}
--- net/minecraft/src/WorldGenBigMushroom.java
+++ net/minecraft/src/WorldGenBigMushroom.java
@@ -21,9 +21,7 @@
 		int var7 = var2.nextInt(3) + 4;
 		boolean var8 = true;
 		if(var4 >= 1) {
-			int var10000 = var4 + var7 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
+			if(var4 + var7 + 1 <= 256) {
 				int var9;
 				int var11;
 				int var12;
@@ -38,7 +36,7 @@
 						for(var12 = var5 - var10; var12 <= var5 + var10 && var8; ++var12) {
 							if(var9 >= 0) {
 								var1.getClass();
-								if(var9 < 128) {
+								if(var9 < 256) {
 									var13 = var1.getBlockId(var11, var9, var12);
 									if(var13 != 0 && var13 != Block.leaves.blockID) {
 										var8 = false;
--- net/minecraft/src/NBTTagCompound.java
+++ net/minecraft/src/NBTTagCompound.java
@@ -79,6 +79,10 @@
 		this.tagMap.put(var1, (new NBTTagByteArray(var2)).setKey(var1));
 	}
 
+	public void setIntArray(String var1, int[] var2) {
+		this.tagMap.put(var1, (new NBTTagIntArray(var2)).setKey(var1));
+	}
+
 	public void setCompoundTag(String var1, NBTTagCompound var2) {
 		this.tagMap.put(var1, var2.setKey(var1));
 	}
@@ -121,6 +125,10 @@
 
 	public byte[] getByteArray(String var1) {
 		return !this.tagMap.containsKey(var1) ? new byte[0] : ((NBTTagByteArray)this.tagMap.get(var1)).byteArray;
+	}
+
+	public int[] getIntArray(String var1) {
+		return !this.tagMap.containsKey(var1) ? new int[0] : ((NBTTagIntArray)this.tagMap.get(var1)).intArray;
 	}
 
 	public NBTTagCompound getCompoundTag(String var1) {
--- /dev/null
+++ net/minecraft/src/BiomeGenBeach.java
@@ -1,0 +1,30 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenBeach extends BiomeGenBase {
+	public BiomeGenBeach(int var1) {
+		super(var1);
+		this.spawnableCreatureList.clear();
+		this.topBlock = (byte)Block.sand.blockID;
+		this.fillerBlock = (byte)Block.sand.blockID;
+		this.field_35523_u.field_35284_r = 0;
+		this.field_35523_u.field_35281_u = 0;
+		this.field_35523_u.field_35279_w = 0;
+		this.field_35523_u.field_35289_x = 0;
+	}
+
+	protected BiomeGenBeach sandType(int type) {
+		this.topBlockMetadata = (byte)type;
+		this.fillerBlockMetadata = (byte)type;
+		return this;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return this.field_35483_D;
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+		super.buildBiomeSurface(world, random, blocks, metadata, x, z, heightValue, -100.0D);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeGenOasis.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenOasis extends BiomeGenBase {
+	protected static final NoiseGeneratorOctaves oasisNoise = new NoiseGeneratorOctaves(new Random("get wetted".hashCode()), 2);
+
+	public BiomeGenOasis(int var1) {
+		super(var1);
+		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 8, 4, 4));
+		this.field_35523_u.field_35284_r = 5;
+		this.field_35523_u.field_35283_s = 6;
+		this.field_35523_u.field_35282_t = 4;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(3) == 0 ? this.field_35515_A : this.field_35517_C;
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+		super.buildBiomeSurface(world, random, blocks, metadata, x, z, heightValue, -100.0D);
+
+		int chunkX = x & 15;
+		int chunkZ = z & 15;
+        double water = oasisNoise.func_647_a((double)x * 0.1D, (double)z * 0.1D);
+
+		if (water > 0.25D) {
+			for (int y = 255, i = chunkX << 12 | chunkZ << 8 | 255; y >= 0; --y, --i) {
+				if (blocks[i] != 0) {
+					blocks[i] = (byte)Block.waterMoving.blockID;
+					break;
+				}
+			}
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeGenBadlands.java
@@ -1,0 +1,90 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenBadlands extends BiomeGenBase {
+	protected static final NoiseGeneratorOctaves badlandsNoise = new NoiseGeneratorOctaves(new Random("where the bads are land >:3".hashCode()), 1);
+	private static final int[] clayColors = {
+			0,
+			1,
+			1,
+			1,
+			4,
+			7,
+			8,
+			14,
+			15,
+	};
+
+	private int[] clayColorCache = null;
+	private long clayColorSeed;
+	private boolean wooded;
+
+	protected BiomeGenBadlands(int var1) {
+		super(var1);
+		this.spawnableCreatureList.clear();
+		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 5, 4, 4));
+		this.field_35523_u.field_35284_r = 2;
+		this.field_35523_u.field_35282_t = 4;
+		this.field_35523_u.field_35281_u = 5;
+		this.field_35523_u.field_35280_v = 10;
+		this.topBlock = (byte)Block.sand.blockID;
+		this.topBlockMetadata = 1;
+		this.fillerBlock = (byte)Block.hardenedClay.blockID;
+		this.fillerBlockMetadata = 1;
+		this.stoneBlockMetadata = 1;
+		this.heightCutoff = 16;
+	}
+
+	protected BiomeGenBadlands wooded() {
+		this.wooded = true;
+		return this;
+	}
+
+	public void func_35513_a(World var1, Random var2, int var3, int var4) {
+		for(int var5 = 0; var5 < 20; ++var5) {
+			int var6 = var3 + var2.nextInt(16);
+			int var7 = var2.nextInt(80 - 32) + 32;
+			int var8 = var4 + var2.nextInt(16);
+			this.field_35523_u.field_35277_h.generate(var1, var2, var6, var7, var8);
+		}
+
+		super.func_35513_a(var1, var2, var3, var4);
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+		super.buildBiomeSurface(world, random, blocks, metadata, x, z, heightValue, -100.0D);
+
+		if (this.clayColorCache == null || this.clayColorSeed != world.getRandomSeed()) {
+			this.clayColorSeed = world.getRandomSeed();
+			this.clayColorCache = new int[256];
+			for (int i = 0; i < 256; i++) {
+				double index = badlandsNoise.generateNoise(this.clayColorSeed % 10000.0D, i, this.clayColorSeed % 10000.0D);
+				if (i > 64 || badlandsNoise.generateNoise(~this.clayColorSeed % 10000.0D, i, ~this.clayColorSeed % 10000.0D) > 0.0D) {
+					this.clayColorCache[i] = clayColors[Math.floorMod((int)(index * 10000.0D), clayColors.length)];
+				} else {
+					this.clayColorCache[i] = -1;
+				}
+			}
+		}
+
+		int chunkX = x & 15;
+		int chunkZ = z & 15;
+		int clayHeight = 78;
+		int grassHeight = 112 + random.nextInt(3);
+		for (int y = 0, i = chunkX << 12 | chunkZ << 8; y < 256; ++y, ++i) {
+			if (this.wooded && y > grassHeight && blocks[i] != 0 && (y == 255 || blocks[i + 1] == 0)) {
+				blocks[i] = (byte)Block.grass.blockID;
+				metadata[i] = 0;
+			} else if (blocks[i] != 0 && (y > clayHeight
+					|| blocks[i] == (byte) Block.stone.blockID && this.clayColorCache[y] >= 0)) {
+				blocks[i] = (byte)Block.hardenedClay.blockID;
+				metadata[i] = (byte)this.clayColorCache[y];
+			}
+		}
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return new WorldGenTaiga2();
+	}
+}
--- net/minecraft/src/BlockLog.java
+++ net/minecraft/src/BlockLog.java
@@ -20,29 +20,8 @@
 		super.harvestBlock(var1, var2, var3, var4, var5, var6);
 	}
 
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		byte var5 = 4;
-		int var6 = var5 + 1;
-		if(var1.checkChunksExist(var2 - var6, var3 - var6, var4 - var6, var2 + var6, var3 + var6, var4 + var6)) {
-			for(int var7 = -var5; var7 <= var5; ++var7) {
-				for(int var8 = -var5; var8 <= var5; ++var8) {
-					for(int var9 = -var5; var9 <= var5; ++var9) {
-						int var10 = var1.getBlockId(var2 + var7, var3 + var8, var4 + var9);
-						if(var10 == Block.leaves.blockID) {
-							int var11 = var1.getBlockMetadata(var2 + var7, var3 + var8, var4 + var9);
-							if((var11 & 8) == 0) {
-								var1.setBlockMetadata(var2 + var7, var3 + var8, var4 + var9, var11 | 8);
-							}
-						}
-					}
-				}
-			}
-		}
-
-	}
-
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var1 == 1 ? 21 : (var1 == 0 ? 21 : (var2 == 1 ? 116 : (var2 == 2 ? 117 : 20)));
+		return (var1 < 2 ? 21 : 20) + var2 * 256;
 	}
 
 	protected int damageDropped(int var1) {
--- net/minecraft/src/EntityItem.java
+++ net/minecraft/src/EntityItem.java
@@ -81,7 +81,15 @@
 	}
 
 	protected void dealFireDamage(int var1) {
-		this.attackEntityFrom(DamageSource.field_35091_a, var1);
+		if (this.item != null && this.item.itemID == Item.impureWaterBottle.shiftedIndex) {
+			this.item.itemID = Item.waterBottle.shiftedIndex;
+			this.isImmuneToFire = true;
+		} else if (this.item != null && this.item.itemID == Item.impureWaterBowl.shiftedIndex) {
+			this.item.itemID = Item.waterBowl.shiftedIndex;
+			this.isImmuneToFire = true;
+		} else if (!this.isImmuneToFire) {
+			this.attackEntityFrom(DamageSource.field_35091_a, var1);
+		}
 	}
 
 	public boolean attackEntityFrom(DamageSource var1, int var2) {
--- /dev/null
+++ net/minecraft/src/NBTTagIntArray.java
@@ -1,0 +1,59 @@
+package net.minecraft.src;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.util.Arrays;
+
+public class NBTTagIntArray extends NBTBase {
+    public int[] intArray;
+
+    public NBTTagIntArray() {
+    }
+
+    public NBTTagIntArray(int[] par2ArrayOfInteger) {
+        intArray = par2ArrayOfInteger;
+    }
+
+    void writeTagContents(DataOutput var1) throws IOException {
+		var1.writeInt(this.intArray.length);
+		ByteBuffer buffer = ByteBuffer.allocate(this.intArray.length * 4);
+		buffer.order(ByteOrder.BIG_ENDIAN);
+		buffer.asIntBuffer().put(this.intArray);
+		byte[] bytes = buffer.array();
+		var1.write(bytes);
+	}
+
+    void readTagContents(DataInput var1) throws IOException {
+		int var2 = var1.readInt();
+		this.intArray = new int[var2];
+		byte[] byteArray = new byte[var2 * 4];
+		var1.readFully(byteArray);
+		ByteBuffer buffer = ByteBuffer.wrap(byteArray);
+		buffer.order(ByteOrder.BIG_ENDIAN);
+		buffer.asIntBuffer().get(this.intArray);
+	}
+
+    public byte getType() {
+        return 11;
+    }
+
+    public String toString() {
+        return "[" + intArray.length + " ints]";
+    }
+
+    public boolean equals(Object par1Obj) {
+        if (super.equals(par1Obj)) {
+            NBTTagIntArray nbttagintarray = (NBTTagIntArray) par1Obj;
+            return intArray == null && nbttagintarray.intArray == null || intArray != null && intArray.equals(nbttagintarray.intArray);
+        } else {
+            return false;
+        }
+    }
+
+    public int hashCode() {
+        return super.hashCode() ^ Arrays.hashCode(intArray);
+    }
+}
--- /dev/null
+++ net/minecraft/src/GenLayerShore.java
@@ -1,0 +1,46 @@
+package net.minecraft.src;
+
+public class GenLayerShore extends GenLayer {
+	private static final BiomeGenBase[] beaches = {
+			BiomeGenBase.beach,
+			BiomeGenBase.hillyBeach,
+			BiomeGenBase.rainbowBeach,
+			BiomeGenBase.rockyBeach
+	};
+
+	public GenLayerShore(long var1, GenLayer var3) {
+		super(var1);
+		this.field_35023_a = var3;
+	}
+
+	public int[] func_35018_a(int var1, int var2, int var3, int var4) {
+		int[] var5 = this.field_35023_a.func_35018_a(var1 - 1, var2 - 1, var3 + 2, var4 + 2);
+		int[] var6 = IntCache.func_35549_a(var3 * var4);
+
+		for(int var7 = 0; var7 < var4; ++var7) {
+			for(int var8 = 0; var8 < var3; ++var8) {
+				this.func_35017_a((long)(var8 + var1), (long)(var7 + var2));
+				int var9 = var5[var8 + 1 + (var7 + 1) * (var3 + 2)];
+				int var10;
+				int var11;
+				int var12;
+				int var13;
+				if(!BiomeGenBase.oceans[var9]) {
+					var10 = var5[var8 + 1 + (var7 + 1 - 1) * (var3 + 2)];
+					var11 = var5[var8 + 1 + 1 + (var7 + 1) * (var3 + 2)];
+					var12 = var5[var8 + 1 - 1 + (var7 + 1) * (var3 + 2)];
+					var13 = var5[var8 + 1 + (var7 + 1 + 1) * (var3 + 2)];
+					if(BiomeGenBase.oceans[var10] || BiomeGenBase.oceans[var11] || BiomeGenBase.oceans[var12] || BiomeGenBase.oceans[var13]) {
+						var6[var8 + var7 * var3] = beaches[this.func_35016_a(beaches.length)].field_35529_y;
+					} else {
+						var6[var8 + var7 * var3] = var9;
+					}
+				} else {
+					var6[var8 + var7 * var3] = var9;
+				}
+			}
+		}
+
+		return var6;
+	}
+}
--- net/minecraft/src/ItemSpade.java
+++ net/minecraft/src/ItemSpade.java
@@ -1,10 +1,8 @@
 package net.minecraft.src;
 
 public class ItemSpade extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.grass, Block.dirt, Block.sand, Block.gravel, Block.snow, Block.blockSnow, Block.blockClay, Block.tilledField};
-
 	public ItemSpade(int var1, EnumToolMaterial var2) {
-		super(var1, 1, var2, blocksEffectiveAgainst);
+		super(var1, 1, var2, EnumTool.SHOVEL);
 	}
 
 	public boolean canHarvestBlock(Block var1) {
--- net/minecraft/src/ItemFood.java
+++ net/minecraft/src/ItemFood.java
@@ -6,10 +6,10 @@
 	private final float field_35431_bu;
 	private final boolean isWolfsFavoriteMeat;
 	private boolean field_35428_bw;
-	private int field_35430_bx;
-	private int field_35429_by;
-	private int field_35425_bz;
-	private float field_35426_bA;
+	protected int field_35430_bx;
+	protected int field_35429_by;
+	protected int field_35425_bz;
+	protected float field_35426_bA;
 
 	public ItemFood(int var1, int var2, float var3, boolean var4) {
 		super(var1);
@@ -25,7 +25,7 @@
 
 	public ItemStack func_35405_b(ItemStack var1, World var2, EntityPlayer var3) {
 		--var1.stackSize;
-		var3.func_35207_V().func_35582_a(this);
+		var3.heal(this.healAmount);
 		if(!var2.singleplayerWorld && this.field_35430_bx > 0 && var2.rand.nextFloat() < this.field_35426_bA) {
 			var3.func_35182_d(new PotionEffect(this.field_35430_bx, this.field_35429_by * 20, this.field_35425_bz));
 		}
@@ -42,7 +42,7 @@
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		if(var3.func_35197_c(this.field_35428_bw)) {
+		if(this.field_35428_bw || var3.health < 20) {
 			var3.func_35201_a(var1, this.func_35404_c(var1));
 		}
 
--- net/minecraft/src/BiomeGenHills.java
+++ net/minecraft/src/BiomeGenHills.java
@@ -1,7 +1,28 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class BiomeGenHills extends BiomeGenBase {
 	protected BiomeGenHills(int var1) {
 		super(var1);
+		this.field_35523_u.field_35284_r = 1;
+		this.field_35523_u.field_35282_t = 2;
+		this.stoneBlockMetadata = 1;
 	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+		super.buildBiomeSurface(world, random, blocks, metadata, x, z, heightValue, desertValue);
+
+		int chunkX = x & 15;
+		int chunkZ = z & 15;
+		int snowHeight = random.nextInt(4) + 144;
+
+		for (int y = 255; y > 255 - snowHeight; --y) {
+			int index = chunkX << 12 | chunkZ << 8 | y;
+			if (blocks[index] == 0 && blocks[index - 1] > 0) {
+				blocks[index] = (byte)Block.snow.blockID;
+				break;
+			}
+		}
+ 	}
 }
--- net/minecraft/src/BlockFlowing.java
+++ net/minecraft/src/BlockFlowing.java
@@ -78,6 +78,13 @@
 		}
 
 		if(this.liquidCanDisplaceBlock(var1, var2, var3 - 1, var4)) {
+			if(this.blockMaterial == Material.lava && var1.getBlockMaterial(var2, var3 - 1, var4) == Material.water) {
+				var1.setBlockWithNotify(var2, var3 - 1, var4, Block.stone.blockID);
+				this.triggerLavaMixEffects(var1, var2, var3 - 1, var4);
+				return;
+			}
+
+
 			if(var6 >= 8) {
 				var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, this.blockID, var6);
 			} else {
--- net/minecraft/src/World.java
+++ net/minecraft/src/World.java
@@ -10,10 +10,10 @@
 import java.util.TreeSet;
 
 public class World implements IBlockAccess {
-	public final int field_35252_a = 7;
-	public final int field_35250_b = 11;
-	public final int field_35251_c = 128;
-	public final int field_35248_d = 127;
+	public final int field_35252_a = 8;
+	public final int field_35250_b = 12;
+	public final int field_35251_c = 256;
+	public final int field_35248_d = 255;
 	public final int field_35249_e = 63;
 	public boolean scheduledUpdatesAreImmediate = false;
 	public List loadedEntityList = new ArrayList();
@@ -163,7 +163,7 @@
 	}
 
 	public int getBlockId(int var1, int var2, int var3) {
-		return var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000 ? (var2 < 0 ? 0 : (var2 >= 128 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15))) : 0;
+		return var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000 ? (var2 < 0 ? 0 : (var2 >= 256 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15))) : 0;
 	}
 
 	public boolean isAirBlock(int var1, int var2, int var3) {
@@ -171,7 +171,7 @@
 	}
 
 	public boolean blockExists(int var1, int var2, int var3) {
-		return var2 >= 0 && var2 < 128 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
+		return var2 >= 0 && var2 < 256 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
 	}
 
 	public boolean doChunksNearChunkExist(int var1, int var2, int var3, int var4) {
@@ -179,7 +179,7 @@
 	}
 
 	public boolean checkChunksExist(int var1, int var2, int var3, int var4, int var5, int var6) {
-		if(var5 >= 0 && var2 < 128) {
+		if(var5 >= 0 && var2 < 256) {
 			var1 >>= 4;
 			var2 >>= 4;
 			var3 >>= 4;
@@ -217,7 +217,7 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(var2 >= 256) {
 				return false;
 			} else {
 				Chunk var6 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -234,7 +234,7 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(var2 >= 256) {
 				return false;
 			} else {
 				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -256,7 +256,7 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return 0;
-			} else if(var2 >= 128) {
+			} else if(var2 >= 256) {
 				return 0;
 			} else {
 				Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -285,7 +285,7 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(var2 >= 256) {
 				return false;
 			} else {
 				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -385,8 +385,8 @@
 		if(var2 < 0) {
 			return 0;
 		} else {
-			if(var2 >= 128) {
-				var2 = 127;
+			if(var2 >= 256) {
+				var2 = 255;
 			}
 
 			return this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockLightValue(var1 & 15, var2, var3 & 15, 0);
@@ -401,7 +401,7 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var4) {
 				int var5 = this.getBlockId(var1, var2, var3);
-				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID || var5 == Block.stairCompactCobblestone.blockID || var5 == Block.stairCompactPlanks.blockID) {
+				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID || var5 == Block.stairCompactCobblestone.blockID || var5 == Block.stairCompactPlanks.blockID || var5 == Block.stairSingleWood.blockID) {
 					int var6 = this.getBlockLightValue_do(var1, var2 + 1, var3, false);
 					int var7 = this.getBlockLightValue_do(var1 + 1, var2, var3, false);
 					int var8 = this.getBlockLightValue_do(var1 - 1, var2, var3, false);
@@ -430,8 +430,8 @@
 			if(var2 < 0) {
 				return 0;
 			} else {
-				if(var2 >= 128) {
-					var2 = 127;
+				if(var2 >= 256) {
+					var2 = 255;
 				}
 
 				Chunk var11 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -462,11 +462,11 @@
 			var3 = 0;
 		}
 
-		if(var3 >= 128) {
-			var3 = 127;
+		if(var3 >= 256) {
+			var3 = 255;
 		}
 
-		if(var3 >= 0 && var3 < 128 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
+		if(var3 >= 0 && var3 < 256 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
 			int var5 = var2 >> 4;
 			int var6 = var4 >> 4;
 			if(!this.chunkExists(var5, var6)) {
@@ -483,7 +483,7 @@
 	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
 		if(var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
 			if(var3 >= 0) {
-				if(var3 < 128) {
+				if(var3 < 256) {
 					if(this.chunkExists(var2 >> 4, var4 >> 4)) {
 						Chunk var6 = this.getChunkFromChunkCoords(var2 >> 4, var4 >> 4);
 						var6.setLightValue(var1, var2 & 15, var3, var4 & 15, var5);
@@ -842,7 +842,7 @@
 
 	public int findTopSolidBlock(int var1, int var2) {
 		Chunk var3 = this.getChunkFromBlockCoords(var1, var2);
-		int var4 = 127;
+		int var4 = 255;
 		var1 &= 15;
 
 		for(var2 &= 15; var4 > 0; --var4) {
@@ -1007,7 +1007,7 @@
 		int var3 = MathHelper.floor_double(var1.posX);
 		int var4 = MathHelper.floor_double(var1.posZ);
 		byte var5 = 32;
-		if(!var2 || this.checkChunksExist(var3 - var5, 0, var4 - var5, var3 + var5, 128, var4 + var5)) {
+		if(!var2 || this.checkChunksExist(var3 - var5, 0, var4 - var5, var3 + var5, 256, var4 + var5)) {
 			var1.lastTickPosX = var1.posX;
 			var1.lastTickPosY = var1.posY;
 			var1.lastTickPosZ = var1.posZ;
@@ -1562,7 +1562,7 @@
 				var6 = this.distHashCounter >> 2;
 				var7 = var6 & 15;
 				var8 = var6 >> 8 & 15;
-				var9 = var6 >> 16 & 127;
+				var9 = var6 >> 16 & 255;
 				var10 = var15.getBlockID(var7, var9, var8);
 				var7 += var3;
 				var8 += var4;
@@ -1594,7 +1594,7 @@
 				var7 = var6 & 15;
 				var8 = var6 >> 8 & 15;
 				var9 = this.getTopSolidOrLiquidBlock(var7 + var3, var8 + var4);
-				if(this.getWorldChunkManager().getBiomeGenAt(var7 + var3, var8 + var4).getEnableSnow() && var9 >= 0 && var9 < 128 && var15.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
+				if(this.getWorldChunkManager().getBiomeGenAt(var7 + var3, var8 + var4).getEnableSnow() && var9 >= 0 && var9 < 256 && var15.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
 					var10 = var15.getBlockID(var7, var9 - 1, var8);
 					var16 = var15.getBlockID(var7, var9, var8);
 					if(this.isRaining() && var16 == 0 && Block.snow.canPlaceBlockAt(this, var7 + var3, var9, var8 + var4) && var10 != 0 && var10 != Block.ice.blockID && Block.blocksList[var10].blockMaterial.getIsSolid()) {
@@ -1626,14 +1626,14 @@
 				}
 			}
 
-			this.func_35242_p(var3 + this.rand.nextInt(16), this.rand.nextInt(128), var4 + this.rand.nextInt(16));
+			this.func_35242_p(var3 + this.rand.nextInt(16), this.rand.nextInt(256), var4 + this.rand.nextInt(16));
 
 			for(var6 = 0; var6 < 80; ++var6) {
 				this.distHashCounter = this.distHashCounter * 3 + 1013904223;
 				var7 = this.distHashCounter >> 2;
 				var8 = var7 & 15;
 				var9 = var7 >> 8 & 15;
-				var10 = var7 >> 16 & 127;
+				var10 = var7 >> 16 & 255; //TODO: figure out if this causes random ticks to break
 				var16 = var15.blocks[var8 << 11 | var9 << 7 | var10] & 255;
 				if(Block.tickOnLoad[var16]) {
 					Block.blocksList[var16].updateTick(this, var8 + var3, var10, var9 + var4, this.rand);
@@ -2079,8 +2079,8 @@
 			var13 = 0;
 		}
 
-		if(var14 > 128) {
-			var14 = 128;
+		if(var14 > 256) {
+			var14 = 256;
 		}
 
 		for(int var15 = var8; var15 <= var10; ++var15) {
--- net/minecraft/src/GenLayerVillageLandscape.java
+++ net/minecraft/src/GenLayerVillageLandscape.java
@@ -1,8 +1,21 @@
 package net.minecraft.src;
 
 public class GenLayerVillageLandscape extends GenLayer {
-	private BiomeGenBase[] field_35029_b = new BiomeGenBase[]{BiomeGenBase.desert, BiomeGenBase.forest, BiomeGenBase.field_35518_e, BiomeGenBase.swampland, BiomeGenBase.field_35520_c, BiomeGenBase.taiga};
-
+	private static final BiomeGenBase[] biomes = {
+			BiomeGenBase.desert,
+			BiomeGenBase.forest,
+			BiomeGenBase.field_35518_e,
+			BiomeGenBase.swampland,
+			BiomeGenBase.field_35520_c,
+			BiomeGenBase.taiga,
+			BiomeGenBase.badlands
+	};
+	private static final BiomeGenBase[] oceanBiomes = {
+			BiomeGenBase.field_35519_b,
+			BiomeGenBase.field_35519_b,
+			BiomeGenBase.coralReef,
+			BiomeGenBase.volcanicIsland
+	};
 	public GenLayerVillageLandscape(long var1, GenLayer var3) {
 		super(var1);
 		this.field_35023_a = var3;
@@ -15,7 +28,11 @@
 		for(int var7 = 0; var7 < var4; ++var7) {
 			for(int var8 = 0; var8 < var3; ++var8) {
 				this.func_35017_a((long)(var8 + var1), (long)(var7 + var2));
-				var6[var8 + var7 * var3] = var5[var8 + var7 * var3] > 0 ? this.field_35029_b[this.func_35016_a(this.field_35029_b.length)].field_35529_y : 0;
+				if (var5[var8 + var7 * var3] > 0) {
+					var6[var8 + var7 * var3] = biomes[this.func_35016_a(biomes.length)].field_35529_y;
+				} else {
+					var6[var8 + var7 * var3] = oceanBiomes[this.func_35016_a(oceanBiomes.length)].field_35529_y;
+				}
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/BiomeGenCoralReef.java
@@ -1,0 +1,32 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenCoralReef extends BiomeGenBase {
+	public BiomeGenCoralReef(int var1) {
+		super(var1);
+		this.field_35523_u.field_35284_r = 1;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return this.field_35483_D;
+	}
+
+	public void func_35513_a(World var1, Random var2, int var3, int var4) {
+		super.func_35513_a(var1, var2, var3, var4);
+
+		WorldGenerator coral = new WorldGenCoral();
+
+		for (int i = 0; i < 5; i++) {
+			int x = var3 + var2.nextInt(16) + 8;
+			int z = var4 + var2.nextInt(16) + 8;
+			int y = 64;
+			while (y > 0 && (var1.getBlockMaterial(x, y - 1, z) == Material.water || var1.isAirBlock(x, y - 1, z))) {
+				y--;
+			}
+			if (y > 0) {
+				coral.generate(var1, var2, x, y, z);
+			}
+		}
+	}
+}
--- net/minecraft/src/BlockOre.java
+++ net/minecraft/src/BlockOre.java
@@ -2,13 +2,18 @@
 
 import java.util.Random;
 
-public class BlockOre extends Block {
+public class BlockOre extends BlockMultitype {
 	public BlockOre(int var1, int var2) {
 		super(var1, var2, Material.rock);
 	}
 
 	public int idDropped(int var1, Random var2) {
-		return this.blockID == Block.oreCoal.blockID ? Item.coal.shiftedIndex : (this.blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (this.blockID == Block.oreLapis.blockID ? Item.dyePowder.shiftedIndex : this.blockID));
+		return this.blockID == Block.oreCoal.blockID ? Item.coal.shiftedIndex
+				: this.blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex
+				: this.blockID == Block.oreLapis.blockID ? Item.dyePowder.shiftedIndex
+				: this.blockID == Block.oreIron.blockID ? Item.rawIron.shiftedIndex
+				: this.blockID == Block.oreGold.blockID ? Item.rawGold.shiftedIndex
+				: this.blockID;
 	}
 
 	public int quantityDropped(Random var1) {
--- net/minecraft/src/ChunkProvider.java
+++ net/minecraft/src/ChunkProvider.java
@@ -18,7 +18,7 @@
 
 	public ChunkProvider(World var1, IChunkLoader var2, IChunkProvider var3) {
 		var1.getClass();
-		this.field_28061_b = new EmptyChunk(var1, new byte[256 * 128], 0, 0);
+		this.field_28061_b = new EmptyChunk(var1, new byte[256 * 256], 0, 0);
 		this.worldObj = var1;
 		this.chunkLoader = var2;
 		this.chunkProvider = var3;
--- net/minecraft/src/WorldGenTallGrass.java
+++ net/minecraft/src/WorldGenTallGrass.java
@@ -17,7 +17,7 @@
 		while(true) {
 			int var11 = var1.getBlockId(var3, var4, var5);
 			if(var11 != 0 && var11 != Block.leaves.blockID || var4 <= 0) {
-				for(int var7 = 0; var7 < 128; ++var7) {
+				for(int var7 = 0; var7 < 256; ++var7) {
 					int var8 = var3 + var2.nextInt(8) - var2.nextInt(8);
 					int var9 = var4 + var2.nextInt(4) - var2.nextInt(4);
 					int var10 = var5 + var2.nextInt(8) - var2.nextInt(8);
--- net/minecraft/src/BlockSapling.java
+++ net/minecraft/src/BlockSapling.java
@@ -25,8 +25,7 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		var2 &= 3;
-		return var2 == 1 ? 63 : (var2 == 2 ? 79 : super.getBlockTextureFromSideAndMetadata(var1, var2));
+		return this.blockIndexInTexture + var2 * 256;
 	}
 
 	public void growTree(World var1, int var2, int var3, int var4, Random var5) {
@@ -34,9 +33,13 @@
 		var1.setBlock(var2, var3, var4, 0);
 		Object var7 = null;
 		if(var6 == 1) {
-			var7 = new WorldGenTaiga2();
+			var7 = new WorldGenPalmtree();
 		} else if(var6 == 2) {
 			var7 = new WorldGenForest();
+		} else if(var6 == 3) {
+			var7 = new WorldGenTaiga2();
+		} else if (var1.getWorldChunkManager().getBiomeGenAt(var2, var4) == BiomeGenBase.swampland) {
+			var7 = new WorldGenSwamp();
 		} else {
 			var7 = new WorldGenTrees();
 			if(var5.nextInt(10) == 0) {
--- net/minecraft/src/GenLayerRiverMix.java
+++ net/minecraft/src/GenLayerRiverMix.java
@@ -22,7 +22,7 @@
 		int[] var7 = IntCache.func_35549_a(var3 * var4);
 
 		for(int var8 = 0; var8 < var3 * var4; ++var8) {
-			if(var5[var8] == BiomeGenBase.field_35519_b.field_35529_y) {
+			if(BiomeGenBase.oceans[var5[var8]] || var5[var8] == BiomeGenBase.oasis.field_35529_y) {
 				var7[var8] = var5[var8];
 			} else {
 				var7[var8] = var6[var8] >= 0 ? var6[var8] : var5[var8];
--- net/minecraft/src/ChunkCache.java
+++ net/minecraft/src/ChunkCache.java
@@ -27,7 +27,7 @@
 			return 0;
 		} else {
 			this.worldObj.getClass();
-			if(var2 >= 128) {
+			if(var2 >= 256) {
 				return 0;
 			} else {
 				int var4 = (var1 >> 4) - this.chunkX;
@@ -53,7 +53,7 @@
 			return 0;
 		} else {
 			this.worldObj.getClass();
-			if(var2 >= 128) {
+			if(var2 >= 256) {
 				return 0;
 			} else {
 				int var4 = (var1 >> 4) - this.chunkX;
--- /dev/null
+++ net/minecraft/src/BiomeGenVolcanicIsland.java
@@ -1,0 +1,118 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+// TODO: Make caves cool
+
+public class BiomeGenVolcanicIsland extends BiomeGenBase {
+    private static long lastSeed = 0L;
+    private static NoiseGeneratorOctaves noiseGen1;
+    private static NoiseGeneratorOctaves noiseGen2;
+    private static NoiseGeneratorOctaves noiseGen3;
+    private static NoiseGeneratorOctaves noiseGen4;
+    private static NoiseGeneratorOctaves noiseGen5;
+    private static NoiseGeneratorOctaves noiseGen6;
+	private static NoiseGeneratorOctaves noiseGenLava;
+	private static NoiseGeneratorOctaves noiseGenAsh;
+
+    static {
+        updateGenSeed("hot stuff!".hashCode());
+    }
+
+    protected BiomeGenVolcanicIsland(int var1) {
+        super(var1);
+        this.spawnableCreatureList.clear();
+        this.spawnableWaterCreatureList.clear();
+    }
+
+    private static void updateGenSeed(long seed) {
+        if (lastSeed != seed) {
+            lastSeed = seed;
+            Random random = new Random(seed);
+            noiseGen1 = new NoiseGeneratorOctaves(random, 16);
+            noiseGen2 = new NoiseGeneratorOctaves(random, 16);
+            noiseGen3 = new NoiseGeneratorOctaves(random, 8);
+            noiseGen4 = new NoiseGeneratorOctaves(random, 4);
+            noiseGen5 = new NoiseGeneratorOctaves(random, 4);
+            noiseGen6 = new NoiseGeneratorOctaves(random, 5);
+            noiseGenLava = new NoiseGeneratorOctaves(random, 4);
+            noiseGenAsh = new NoiseGeneratorOctaves(random, 2);
+        }
+    }
+
+    public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+        updateGenSeed(world.getRandomSeed());
+        double f9 = (noiseGen1.generateNoise(x / 0.03125F, 0.0D, z / 0.03125F) - noiseGen2.generateNoise((double)x / 0.015625F, 0.0D, (double) z / 0.015625F)) / 512.0F / 2.0F;
+        double f10 = noiseGen5.func_647_a(x / 4.0F, z / 4.0F);
+        double f11 = noiseGen6.func_647_a(x / 8.0F, z / 8.0F) / 4.0F;
+        double f10a = Math.min(Math.max(f10 / 4.0D, -0.5D), 0.5D) + 0.5D;
+        f10 = (noiseGen3.func_647_a(((double)x * 0.25714284F * 2.0F), (double)z * 0.25714284F * 2.0F) * f11 / 2.0D) * f10a
+                + (noiseGen4.func_647_a(x * 0.25714284F, (double)z * 0.25714284F) * f11) * (1.0D - f10a);
+        long i15a = (int)(f9 + f10);
+        long i15 = -1;
+
+        WorldChunkManager wcm = world.getWorldChunkManager();
+        for (int i = 0; i < 5; i++) {
+            if (wcm.getBiomeGenAt(x + random.nextInt(11) - 5, z + random.nextInt(11) - 5) != this) {
+                i15a /= 2;
+                break;
+            }
+        }
+
+        double ash = noiseGenAsh.func_647_a(x / 10.0D, z / 10.0D) + Math.abs(noiseGenAsh.func_647_a(-x / 100.0D, -z / 100.0D) / 2.0D) - 0.5D;
+        int lavaHeight = 4 + random.nextInt(3);
+        int ashHeight = (int)Math.ceil((4 + random.nextInt(3)) * Math.min(ash, 1.0D));
+        int ashHeightWorld = 90 + random.nextInt(10);
+
+        int chunkX = x & 15;
+        int chunkZ = z & 15;
+
+        for(int y = 0, index = chunkX << 12 | chunkZ << 8; y < 256; ++y, ++index) {
+            if (i15 == -1 && (blocks[index] == Block.waterStill.blockID
+                    || blocks[index] == Block.waterMoving.blockID
+                    || (y > 61 && blocks[index] == 0))) {
+                i15 = i15a;
+            }
+
+            if (i15 > 0) {
+                int block = Block.stone.blockID;
+
+                if (y > 61 && i15 <= lavaHeight && Math.abs(noiseGenLava.func_647_a(x / 15.0D, z / 15.0D)) < y / 24.0D * 0.1D) {
+                    block = Block.lavaMoving.blockID;
+                }
+
+                if (ash > 0.0D && y < ashHeightWorld && i15 <= ashHeight) {
+                    block = Block.ash.blockID;
+                }
+
+                blocks[index] = (byte)block;
+                i15--;
+            }
+
+            if (blocks[index] == Block.stone.blockID) {
+                metadata[index] = 3;
+            }
+        }
+    }
+
+    public void func_35513_a(World var1, Random var2, int var3, int var4) {
+        if(var2.nextInt(4) == 0) {
+			int x = var3 + var2.nextInt(16) + 8;
+			int y = var1.getHeightValue(var3, var4);
+			int z = var4 + var2.nextInt(16) + 8;
+            (new WorldGenLakes(Block.lavaStill.blockID)).generate(var1, var2, x, y, z);
+		}
+
+        new WorldGenUndergroundLava().generate(var1, var2, var3 + 8, 60, var4 + 8);
+
+        super.func_35513_a(var1, var2, var3, var4);
+
+        WorldGenerator gen = new WorldGenMinable(Block.oreDiamond.blockID, 8).inheritStoneType();
+        for(int var5 = 0; var5 < 1; ++var5) {
+			int var6 = var3 + var2.nextInt(16);
+			int var7 = var2.nextInt(32);
+			int var8 = var4 + var2.nextInt(16);
+			gen.generate(var1, var2, var6, var7, var8);
+		}
+    }
+}
--- net/minecraft/src/StructureMineshaftStart.java
+++ net/minecraft/src/StructureMineshaftStart.java
@@ -8,6 +8,15 @@
 		this.field_35547_a.add(var5);
 		var5.func_35308_a(var5, this.field_35547_a, var2);
 		this.func_35544_c();
-		this.func_35545_a(var1, var2, 10);
+		BiomeGenBase biome = var1.getWorldChunkManager().getBiomeGenAt(var3 << 4, var4 << 4);
+		if (biome instanceof BiomeGenBadlands && var2.nextInt(2) == 0) {
+			int offset = var2.nextInt(16);
+			this.field_35546_b.func_35670_a(0, offset, 0);
+			for (Object component : this.field_35547_a) {
+				((StructureComponent)component).func_35313_b().func_35670_a(0, offset, 0);
+			}
+		} else {
+			this.func_35545_a(var1, var2, 10);
+		}
 	}
 }
--- net/minecraft/src/BlockRedstoneOre.java
+++ net/minecraft/src/BlockRedstoneOre.java
@@ -2,7 +2,7 @@
 
 import java.util.Random;
 
-public class BlockRedstoneOre extends Block {
+public class BlockRedstoneOre extends BlockMultitype {
 	private boolean glowing;
 
 	public BlockRedstoneOre(int var1, int var2, boolean var3) {
@@ -36,14 +36,14 @@
 	private void func_321_g(World var1, int var2, int var3, int var4) {
 		this.func_320_h(var1, var2, var3, var4);
 		if(this.blockID == Block.oreRedstone.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.oreRedstoneGlowing.blockID);
+			var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.oreRedstoneGlowing.blockID, var1.getBlockMetadata(var2, var3, var4));
 		}
 
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
 		if(this.blockID == Block.oreRedstoneGlowing.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.oreRedstone.blockID);
+			var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.oreRedstone.blockID, var1.getBlockMetadata(var2, var3, var4));
 		}
 
 	}
@@ -54,6 +54,10 @@
 
 	public int quantityDropped(Random var1) {
 		return 4 + var1.nextInt(2);
+	}
+
+	protected int damageDropped(int var1) {
+		return 0;
 	}
 
 	private void func_320_h(World var1, int var2, int var3, int var4) {
--- net/minecraft/src/RecipesDyes.java
+++ net/minecraft/src/RecipesDyes.java
@@ -3,7 +3,9 @@
 public class RecipesDyes {
 	public void addRecipes(CraftingManager var1) {
 		for(int var2 = 0; var2 < 16; ++var2) {
-			var1.addShapelessRecipe(new ItemStack(Block.cloth, 1, BlockCloth.getDyeFromBlock(var2)), new Object[]{new ItemStack(Item.dyePowder, 1, var2), new ItemStack(Item.itemsList[Block.cloth.blockID], 1, 0)});
+			var1.addShapelessRecipe(new ItemStack(Block.cloth, 1, BlockCloth.getDyeFromBlock(var2)), new Object[]{new ItemStack(Item.dyePowder, 1, var2), Block.cloth});
+			var1.addShapelessRecipe(new ItemStack(Block.hardenedClay, 1, BlockCloth.getDyeFromBlock(var2)), new Object[]{new ItemStack(Item.dyePowder, 1, var2), Block.hardenedClay});
+			var1.addShapelessRecipe(new ItemStack(Block.coral, 1, BlockCloth.getDyeFromBlock(var2)), new Object[]{new ItemStack(Item.dyePowder, 1, var2), Block.coral});
 		}
 
 		var1.addShapelessRecipe(new ItemStack(Item.dyePowder, 2, 11), new Object[]{Block.plantYellow});
--- net/minecraft/src/BlockDeadBush.java
+++ net/minecraft/src/BlockDeadBush.java
@@ -10,7 +10,7 @@
 	}
 
 	protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-		return var1 == Block.sand.blockID;
+		return var1 == Block.sand.blockID || var1 == Block.hardenedClay.blockID;
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
--- net/minecraft/src/BiomeGenDesert.java
+++ net/minecraft/src/BiomeGenDesert.java
@@ -1,14 +1,21 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class BiomeGenDesert extends BiomeGenBase {
 	public BiomeGenDesert(int var1) {
 		super(var1);
 		this.spawnableCreatureList.clear();
+		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 5, 4, 4));
 		this.topBlock = (byte)Block.sand.blockID;
 		this.fillerBlock = (byte)Block.sand.blockID;
-		this.field_35523_u.field_35284_r = -999;
 		this.field_35523_u.field_35281_u = 2;
 		this.field_35523_u.field_35279_w = 50;
 		this.field_35523_u.field_35289_x = 10;
+		this.stoneBlockMetadata = 2;
 	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return this.field_35483_D;
+ 	}
 }
--- net/minecraft/src/ItemHoe.java
+++ net/minecraft/src/ItemHoe.java
@@ -1,10 +1,8 @@
 package net.minecraft.src;
 
-public class ItemHoe extends Item {
+public class ItemHoe extends ItemTool {
 	public ItemHoe(int var1, EnumToolMaterial var2) {
-		super(var1);
-		this.maxStackSize = 1;
-		this.setMaxDamage(var2.getMaxUses());
+		super(var1, 0, var2, EnumTool.HOE);
 	}
 
 	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
--- net/minecraft/src/ComponentMineshaftRoom.java
+++ net/minecraft/src/ComponentMineshaftRoom.java
@@ -81,6 +81,11 @@
 		if(this.func_35295_a(var1, var3)) {
 			return false;
 		} else {
+			if (!this.isNotFloatingOrHasBlockAbove(var1, var3) ||
+					var1.getWorldChunkManager().getBiomeGenAt(var3.field_35678_a, var3.field_35677_c).field_35529_y == BiomeGenBase.volcanicIsland.field_35529_y) {
+				return false;
+			}
+
 			this.func_35294_a(var1, var3, this.field_35316_g.field_35678_a, this.field_35316_g.field_35676_b, this.field_35316_g.field_35677_c, this.field_35316_g.field_35674_d, this.field_35316_g.field_35676_b, this.field_35316_g.field_35673_f, Block.dirt.blockID, 0, true);
 			this.func_35294_a(var1, var3, this.field_35316_g.field_35678_a, this.field_35316_g.field_35676_b + 1, this.field_35316_g.field_35677_c, this.field_35316_g.field_35674_d, Math.min(this.field_35316_g.field_35676_b + 3, this.field_35316_g.field_35675_e), this.field_35316_g.field_35673_f, 0, 0, false);
 			Iterator var4 = this.field_35356_a.iterator();
--- /dev/null
+++ net/minecraft/src/ItemBottle.java
@@ -1,0 +1,112 @@
+package net.minecraft.src;
+
+public class ItemBottle extends ItemFood {
+	public final boolean full;
+	public final int impurity;
+
+	public ItemBottle(int var1) {
+		this(var1, 0, 0);
+	}
+
+	public ItemBottle(int var1, int var2, float var3) {
+		this(var1, var2, var3, 0);
+	}
+
+	public ItemBottle(int var1, int var2, float var3, int var4) {
+		super(var1, var2, var3, false);
+		this.full = var2 > 0;
+		this.impurity = var4;
+	}
+
+	public ItemStack func_35413_b(ItemStack var1, World var2, EntityPlayer var3) {
+		Item item = Item.glassBottle;
+		if (this.shiftedIndex == Item.impureWaterBowl.shiftedIndex
+				|| this.shiftedIndex == Item.waterBowl.shiftedIndex) {
+			item = Item.bowlEmpty;
+		}
+
+		if (var1.stackSize == 1) {
+			var1 = new ItemStack(item);
+		} else {
+			--var1.stackSize;
+			var3.inventory.addItemStackToInventory(new ItemStack(item));
+		}
+		var3.func_35207_V().func_35590_a(this.getHealAmount(), this.func_35424_l());
+
+		if(!var2.singleplayerWorld && this.impurity > 0) {
+			var3.func_35182_d(new PotionEffect(Potion.field_35468_s.field_35447_H, this.impurity, 5));
+		}
+
+		if(!var2.singleplayerWorld && this.field_35430_bx > 0 && var2.rand.nextFloat() < this.field_35426_bA) {
+			var3.func_35182_d(new PotionEffect(this.field_35430_bx, this.field_35429_by * 20, this.field_35425_bz));
+		}
+
+		return var1;
+	}
+
+	public EnumAction func_35412_b(ItemStack var1) {
+		return EnumAction.eat;
+	}
+
+	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+		if (this.full) {
+			if (var3.func_35197_c(this.field_35430_bx > 0)) {
+				var3.func_35201_a(var1, this.func_35404_c(var1));
+			}
+			return var1;
+		}
+
+		float var4 = 1.0F;
+		float var5 = var3.prevRotationPitch + (var3.rotationPitch - var3.prevRotationPitch) * var4;
+		float var6 = var3.prevRotationYaw + (var3.rotationYaw - var3.prevRotationYaw) * var4;
+		double var7 = var3.prevPosX + (var3.posX - var3.prevPosX) * (double)var4;
+		double var9 = var3.prevPosY + (var3.posY - var3.prevPosY) * (double)var4 + 1.62D - (double)var3.yOffset;
+		double var11 = var3.prevPosZ + (var3.posZ - var3.prevPosZ) * (double)var4;
+		Vec3D var13 = Vec3D.createVector(var7, var9, var11);
+		float var14 = MathHelper.cos(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
+		float var15 = MathHelper.sin(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
+		float var16 = -MathHelper.cos(-var5 * ((float)Math.PI / 180.0F));
+		float var17 = MathHelper.sin(-var5 * ((float)Math.PI / 180.0F));
+		float var18 = var15 * var16;
+		float var20 = var14 * var16;
+		double var21 = 5.0D;
+		Vec3D var23 = var13.addVector((double)var18 * var21, (double)var17 * var21, (double)var20 * var21);
+		MovingObjectPosition var24 = var2.rayTraceBlocks_do(var13, var23, true);
+		if(var24 == null) {
+			return var1;
+		} else {
+			if(var24.typeOfHit == EnumMovingObjectType.TILE) {
+				int var25 = var24.blockX;
+				int var26 = var24.blockY;
+				int var27 = var24.blockZ;
+				if(!var2.canMineBlock(var3, var25, var26, var27)) {
+					return var1;
+				}
+
+				if(!var3.func_35200_c(var25, var26, var27)) {
+					return var1;
+				}
+
+				if(var2.getBlockId(var25, var26, var27) == Block.waterStill.blockID && var2.getBlockMetadata(var25, var26, var27) == 0) {
+					Item item = null;
+					if (this.shiftedIndex == Item.glassBottle.shiftedIndex) {
+						item = Item.impureWaterBottle;
+					} else if (this.shiftedIndex == Item.bowlEmpty.shiftedIndex) {
+						item = Item.impureWaterBowl;
+					}
+
+					if (item != null) {
+						if (var1.stackSize == 1) {
+							var1 = new ItemStack(item);
+						} else {
+							--var1.stackSize;
+							var3.inventory.addItemStackToInventory(new ItemStack(item));
+						}
+					}
+				}
+			}
+
+			return var1;
+		}
+	}
+}
--- net/minecraft/src/WorldGenTrees.java
+++ net/minecraft/src/WorldGenTrees.java
@@ -3,87 +3,156 @@
 import java.util.Random;
 
 public class WorldGenTrees extends WorldGenerator {
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		int var6 = var2.nextInt(3) + 4;
-		boolean var7 = true;
-		if(var4 >= 1) {
-			int var10000 = var4 + var6 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
-				int var8;
-				int var10;
-				int var11;
-				int var12;
-				for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
-					byte var9 = 1;
-					if(var8 == var4) {
-						var9 = 0;
-					}
-
-					if(var8 >= var4 + 1 + var6 - 2) {
-						var9 = 2;
-					}
-
-					for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
-						for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-							if(var8 >= 0) {
-								var1.getClass();
-								if(var8 < 128) {
-									var12 = var1.getBlockId(var10, var8, var11);
-									if(var12 != 0 && var12 != Block.leaves.blockID) {
-										var7 = false;
-									}
-									continue;
-								}
-							}
-
-							var7 = false;
-						}
-					}
-				}
-
-				if(!var7) {
-					return false;
-				}
-
-				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if(var8 == Block.grass.blockID || var8 == Block.dirt.blockID) {
-					var1.getClass();
-					if(var4 < 128 - var6 - 1) {
-						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
-
-						int var16;
-						for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
-							var10 = var16 - (var4 + var6);
-							var11 = 1 - var10 / 2;
-
-							for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
-								int var13 = var12 - var3;
-
-								for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
-									int var15 = var14 - var5;
-									if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
-										var1.setBlock(var12, var16, var14, Block.leaves.blockID);
-									}
-								}
-							}
-						}
-
-						for(var16 = 0; var16 < var6; ++var16) {
-							var10 = var1.getBlockId(var3, var4 + var16, var5);
-							if(var10 == 0 || var10 == Block.leaves.blockID) {
-								var1.setBlock(var3, var4 + var16, var5, Block.wood.blockID);
-							}
-						}
-
-						return true;
-					}
-				}
-
+	private final int field_48202_a;
+	private final boolean field_48200_b;
+	private final int field_48201_c;
+	private final int field_48199_d;
+
+	public WorldGenTrees() {
+		this(4, 0, 0, false);
+	}
+
+	public WorldGenTrees(int par2, int par3, int par4, boolean par5) {
+		field_48202_a = par2;
+		field_48201_c = par3;
+		field_48199_d = par4;
+		field_48200_b = par5;
+	}
+
+	public boolean generate(World par1World, Random par2Random, int par3, int par4, int par5) {
+		int i = par2Random.nextInt(3) + field_48202_a;
+		boolean flag = true;
+
+		if (par4 < 1 || par4 + i + 1 > 256) {
+			return false;
+		}
+
+		for (int j = par4; j <= par4 + 1 + i; j++) {
+			byte byte0 = 1;
+
+			if (j == par4) {
+				byte0 = 0;
+			}
+
+			if (j >= (par4 + 1 + i) - 2) {
+				byte0 = 2;
+			}
+
+			for (int l = par3 - byte0; l <= par3 + byte0 && flag; l++) {
+				for (int j1 = par5 - byte0; j1 <= par5 + byte0 && flag; j1++) {
+					if (j >= 0 && j < 256) {
+						int j2 = par1World.getBlockId(l, j, j1);
+
+						if (j2 != 0 && j2 != Block.leaves.blockID && j2 != Block.grass.blockID && j2 != Block.dirt.blockID && j2 != Block.wood.blockID) {
+							flag = false;
+							}
+					} else {
+						flag = false;
+						}
+				}
+			}
+		}
+
+		if (!flag) {
 				return false;
 			}
-		}
-
-		return false;
+
+		int k = par1World.getBlockId(par3, par4 - 1, par5);
+
+		if (k != Block.grass.blockID && k != Block.dirt.blockID || par4 >= 256 - i - 1) {
+			return false;
+		}
+
+		par1World.setBlock(par3, par4 - 1, par5, Block.dirt.blockID);
+		byte byte1 = 3;
+		int i1 = 0;
+
+		for (int k1 = (par4 - byte1) + i; k1 <= par4 + i; k1++) {
+			int k2 = k1 - (par4 + i);
+			int j3 = (i1 + 1) - k2 / 2;
+
+			for (int l3 = par3 - j3; l3 <= par3 + j3; l3++) {
+				int j4 = l3 - par3;
+
+				for (int l4 = par5 - j3; l4 <= par5 + j3; l4++) {
+					int i5 = l4 - par5;
+
+					if ((Math.abs(j4) != j3 || Math.abs(i5) != j3 || par2Random.nextInt(2) != 0 && k2 != 0) && !Block.opaqueCubeLookup[par1World.getBlockId(l3, k1, l4)]) {
+						par1World.setBlockAndMetadata(l3, k1, l4, Block.leaves.blockID, field_48199_d);
+					}
+				}
+			}
+		}
+
+		for (int l1 = 0; l1 < i; l1++) {
+			int l2 = par1World.getBlockId(par3, par4 + l1, par5);
+
+			if (l2 != 0 && l2 != Block.leaves.blockID) {
+				continue;
+			}
+
+			par1World.setBlockAndMetadata(par3, par4 + l1, par5, Block.wood.blockID, field_48201_c);
+
+			if (!field_48200_b || l1 <= 0) {
+				continue;
+			}
+
+			if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3 - 1, par4 + l1, par5)) {
+				par1World.setBlockAndMetadata(par3 - 1, par4 + l1, par5, Block.field_35045_bv.blockID, 8);
+			}
+
+			if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3 + 1, par4 + l1, par5)) {
+				par1World.setBlockAndMetadata(par3 + 1, par4 + l1, par5, Block.field_35045_bv.blockID, 2);
+			}
+
+			if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3, par4 + l1, par5 - 1)) {
+				par1World.setBlockAndMetadata(par3, par4 + l1, par5 - 1, Block.field_35045_bv.blockID, 1);
+			}
+
+			if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3, par4 + l1, par5 + 1)) {
+				par1World.setBlockAndMetadata(par3, par4 + l1, par5 + 1, Block.field_35045_bv.blockID, 4);
+			}
+		}
+
+		if (field_48200_b) {
+			for (int i2 = (par4 - 3) + i; i2 <= par4 + i; i2++) {
+				int i3 = i2 - (par4 + i);
+				int k3 = 2 - i3 / 2;
+
+				for (int i4 = par3 - k3; i4 <= par3 + k3; i4++) {
+					for (int k4 = par5 - k3; k4 <= par5 + k3; k4++) {
+						if (par1World.getBlockId(i4, i2, k4) != Block.leaves.blockID) {
+							continue;
+						}
+
+						if (par2Random.nextInt(4) == 0 && par1World.getBlockId(i4 - 1, i2, k4) == 0) {
+							func_48198_a(par1World, i4 - 1, i2, k4, 8);
+						}
+
+						if (par2Random.nextInt(4) == 0 && par1World.getBlockId(i4 + 1, i2, k4) == 0) {
+							func_48198_a(par1World, i4 + 1, i2, k4, 2);
+						}
+
+						if (par2Random.nextInt(4) == 0 && par1World.getBlockId(i4, i2, k4 - 1) == 0) {
+							func_48198_a(par1World, i4, i2, k4 - 1, 1);
+						}
+
+						if (par2Random.nextInt(4) == 0 && par1World.getBlockId(i4, i2, k4 + 1) == 0) {
+							func_48198_a(par1World, i4, i2, k4 + 1, 4);
+						}
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+
+	private void func_48198_a(World par1World, int par2, int par3, int par4, int par5) {
+		par1World.setBlockAndMetadata(par2, par3, par4, Block.field_35045_bv.blockID, par5);
+
+		for (int i = 4; par1World.getBlockId(par2, --par3, par4) == 0 && i > 0; i--) {
+			par1World.setBlockAndMetadata(par2, par3, par4, Block.field_35045_bv.blockID, par5);
+		}
 	}
 }
--- net/minecraft/src/ChunkProviderHell.java
+++ net/minecraft/src/ChunkProviderHell.java
@@ -72,14 +72,8 @@
 						double var39 = (var20 - var16) * var31;
 
 						for(int var41 = 0; var41 < 4; ++var41) {
-							int var10000 = var41 + var9 * 4;
-							this.worldObj.getClass();
-							var10000 <<= 11;
-							int var10001 = 0 + var10 * 4;
-							this.worldObj.getClass();
-							int var42 = var10000 | var10001 << 7 | var11 * 8 + var30;
-							this.worldObj.getClass();
-							int var43 = 1 << 7;
+							int var42 = (var41 + var9 * 4) << 12 | (0 + var10 * 4) << 8 | var11 * 8 + var30;
+							int var43 = 1 << 8;
 							double var44 = 0.25D;
 							double var46 = var33;
 							double var48 = (var35 - var33) * var44;
@@ -117,7 +111,6 @@
 	}
 
 	public void func_4061_b(int var1, int var2, byte[] var3) {
-		this.worldObj.getClass();
 		int var4 = 128 - 64;
 		double var5 = 1.0D / 32.0D;
 		this.field_4233_p = this.field_4237_l.generateNoiseOctaves(this.field_4233_p, var1 * 16, var2 * 16, 0, 16, 16, 1, var5, var5, 1.0D);
@@ -135,10 +128,7 @@
 				this.worldObj.getClass();
 
 				for(int var15 = 127; var15 >= 0; --var15) {
-					int var10000 = var8 * 16 + var7;
-					this.worldObj.getClass();
-					int var16 = var10000 * 128 + var15;
-					this.worldObj.getClass();
+					int var16 = var8 << 12 | var7 << 8 | var15;
 					if(var15 >= 127 - this.hellRNG.nextInt(5)) {
 						var3[var16] = (byte)Block.bedrock.blockID;
 					} else if(var15 <= 0 + this.hellRNG.nextInt(5)) {
@@ -201,10 +191,10 @@
 	public Chunk provideChunk(int var1, int var2) {
 		this.hellRNG.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
 		this.worldObj.getClass();
-		byte[] var3 = new byte[16 * 128 * 16];
+		byte[] var3 = new byte[16 * 256 * 16];
 		this.func_4062_a(var1, var2, var3);
 		this.func_4061_b(var1, var2, var3);
-		this.field_4230_s.generate(this, this.worldObj, var1, var2, var3);
+		this.field_4230_s.generate(this, this.worldObj, var1, var2, var3, null);
 		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
 		return var4;
 	}
--- net/minecraft/src/EntityFallingSand.java
+++ net/minecraft/src/EntityFallingSand.java
@@ -2,6 +2,7 @@
 
 public class EntityFallingSand extends Entity {
 	public int blockID;
+	public int blockMetadata;
 	public int fallTime = 0;
 
 	public EntityFallingSand(World var1) {
@@ -9,8 +10,13 @@
 	}
 
 	public EntityFallingSand(World var1, double var2, double var4, double var6, int var8) {
+		this(var1, var2, var4, var6, var8, 0);
+	}
+
+	public EntityFallingSand(World var1, double var2, double var4, double var6, int var8, int var9) {
 		super(var1);
 		this.blockID = var8;
+		this.blockMetadata = var9;
 		this.preventEntitySpawning = true;
 		this.setSize(0.98F, 0.98F);
 		this.yOffset = this.height / 2.0F;
@@ -59,11 +65,11 @@
 				this.motionZ *= (double)0.7F;
 				this.motionY *= -0.5D;
 				this.setEntityDead();
-				if((!this.worldObj.canBlockBePlacedAt(this.blockID, var1, var2, var3, true, 1) || BlockSand.canFallBelow(this.worldObj, var1, var2 - 1, var3) || !this.worldObj.setBlockWithNotify(var1, var2, var3, this.blockID)) && !this.worldObj.singleplayerWorld) {
-					this.dropItem(this.blockID, 1);
+				if((!this.worldObj.canBlockBePlacedAt(this.blockID, var1, var2, var3, true, 1) || BlockSand.canFallBelow(this.worldObj, var1, var2 - 1, var3) || !this.worldObj.setBlockAndMetadataWithNotify(var1, var2, var3, this.blockID, this.blockMetadata)) && !this.worldObj.singleplayerWorld) {
+					this.entityDropItem(new ItemStack(this.blockID, 1, this.blockMetadata), 0.0F);
 				}
 			} else if(this.fallTime > 100 && !this.worldObj.singleplayerWorld) {
-				this.dropItem(this.blockID, 1);
+				this.entityDropItem(new ItemStack(this.blockID, 1, this.blockMetadata), 0.0F);
 				this.setEntityDead();
 			}
 
--- net/minecraft/src/WorldGenSwamp.java
+++ net/minecraft/src/WorldGenSwamp.java
@@ -10,9 +10,7 @@
 
 		boolean var7 = true;
 		if(var4 >= 1) {
-			int var10000 = var4 + var6 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
+			if(var4 + var6 + 1 <= 256) {
 				int var8;
 				int var10;
 				int var11;
@@ -30,8 +28,7 @@
 					for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
 						for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
 							if(var8 >= 0) {
-								var1.getClass();
-								if(var8 < 128) {
+								if(var8 < 256) {
 									var12 = var1.getBlockId(var10, var8, var11);
 									if(var12 == 0 || var12 == Block.leaves.blockID) {
 										continue;
@@ -60,8 +57,7 @@
 
 				var8 = var1.getBlockId(var3, var4 - 1, var5);
 				if(var8 == Block.grass.blockID || var8 == Block.dirt.blockID) {
-					var1.getClass();
-					if(var4 < 128 - var6 - 1) {
+					if(var4 < 256 - var6 - 1) {
 						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
 
 						int var13;
--- net/minecraft/src/TileEntityFurnace.java
+++ net/minecraft/src/TileEntityFurnace.java
@@ -148,13 +148,15 @@
 			ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().shiftedIndex);
 			if(this.furnaceItemStacks[2] == null) {
 				this.furnaceItemStacks[2] = var1.copy();
-			} else if(this.furnaceItemStacks[2].itemID == var1.itemID) {
+				if (this.furnaceItemStacks[0].getHasSubtypes() && this.furnaceItemStacks[2].getHasSubtypes() && this.furnaceItemStacks[0].getItemDamage() > 0) {
+					this.furnaceItemStacks[2].setItemDamage(this.furnaceItemStacks[0].getItemDamage());
+				}
+			} else if(this.furnaceItemStacks[2].itemID == var1.itemID &&
+					(this.furnaceItemStacks[2].getItemDamage() == 0
+							|| !this.furnaceItemStacks[0].getHasSubtypes()
+							|| !this.furnaceItemStacks[2].getHasSubtypes()
+							|| this.furnaceItemStacks[0].getItemDamage() == this.furnaceItemStacks[2].getItemDamage())) {
 				++this.furnaceItemStacks[2].stackSize;
-			}
-
-			--this.furnaceItemStacks[0].stackSize;
-			if(this.furnaceItemStacks[0].stackSize <= 0) {
-				this.furnaceItemStacks[0] = null;
 			}
 
 		}
--- /dev/null
+++ net/minecraft/src/WorldGenUndergroundTree.java
@@ -1,0 +1,132 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenUndergroundTree extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int var6 = var2.nextInt(4) + 3;
+		boolean var7 = true;
+		if(var4 >= 1) {
+			if(var4 + var6 + 1 <= 256) {
+				int var8;
+				int var10;
+				int var11;
+				int var12;
+				for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
+					byte var9 = 1;
+					if(var8 == var4) {
+						var9 = 0;
+					}
+
+					if(var8 >= var4 + 1 + var6 - 2) {
+						var9 = 3;
+					}
+
+					for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
+						for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
+							if(var8 >= 0) {
+								if(var8 < 256) {
+									var12 = var1.getBlockId(var10, var8, var11);
+									if(var12 == 0 || var12 == Block.leaves.blockID) {
+										continue;
+									}
+
+									if(var8 > var4) {
+										var7 = false;
+									}
+									continue;
+								}
+							}
+
+							var7 = false;
+						}
+					}
+				}
+
+				if(!var7) {
+					return false;
+				}
+
+				var8 = var1.getBlockId(var3, var4 - 1, var5);
+				if(var8 == Block.stone.blockID) {
+					if(var4 < 256 - var6 - 1) {
+						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
+
+						int var13;
+						int var16;
+						for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
+							var10 = var16 - (var4 + var6);
+							var11 = 2 - var10 / 2;
+
+							for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
+								var13 = var12 - var3;
+
+								for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
+									int var15 = var14 - var5;
+									if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
+										var1.setBlock(var12, var16, var14, Block.leaves.blockID);
+									}
+								}
+							}
+						}
+
+						for(var16 = 0; var16 < var6; ++var16) {
+							var10 = var1.getBlockId(var3, var4 + var16, var5);
+							if(var10 == 0 || var10 == Block.leaves.blockID || var10 == Block.waterMoving.blockID || var10 == Block.waterStill.blockID) {
+								var1.setBlock(var3, var4 + var16, var5, Block.wood.blockID);
+							}
+						}
+
+						for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
+							var10 = var16 - (var4 + var6);
+							var11 = 2 - var10 / 2;
+
+							for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
+								for(var13 = var5 - var11; var13 <= var5 + var11; ++var13) {
+									if(var1.getBlockId(var12, var16, var13) == Block.leaves.blockID) {
+										if(var2.nextInt(4) == 0 && var1.getBlockId(var12 - 1, var16, var13) == 0) {
+											this.func_35265_a(var1, var12 - 1, var16, var13, 8);
+										}
+
+										if(var2.nextInt(4) == 0 && var1.getBlockId(var12 + 1, var16, var13) == 0) {
+											this.func_35265_a(var1, var12 + 1, var16, var13, 2);
+										}
+
+										if(var2.nextInt(4) == 0 && var1.getBlockId(var12, var16, var13 - 1) == 0) {
+											this.func_35265_a(var1, var12, var16, var13 - 1, 1);
+										}
+
+										if(var2.nextInt(4) == 0 && var1.getBlockId(var12, var16, var13 + 1) == 0) {
+											this.func_35265_a(var1, var12, var16, var13 + 1, 4);
+										}
+									}
+								}
+							}
+						}
+
+						return true;
+					}
+				}
+
+				return false;
+			}
+		}
+
+		return false;
+	}
+
+	private void func_35265_a(World var1, int var2, int var3, int var4, int var5) {
+		var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.field_35045_bv.blockID, var5);
+		int var6 = 4;
+
+		while(true) {
+			--var3;
+			if(var1.getBlockId(var2, var3, var4) != 0 || var6 <= 0) {
+				return;
+			}
+
+			var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.field_35045_bv.blockID, var5);
+			--var6;
+		}
+	}
+}
--- net/minecraft/src/BiomeGenForest.java
+++ net/minecraft/src/BiomeGenForest.java
@@ -5,12 +5,11 @@
 public class BiomeGenForest extends BiomeGenBase {
 	public BiomeGenForest(int var1) {
 		super(var1);
-		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 5, 4, 4));
 		this.field_35523_u.field_35284_r = 10;
 		this.field_35523_u.field_35282_t = 2;
 	}
 
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
-		return (WorldGenerator)(var1.nextInt(5) == 0 ? this.field_35516_B : (var1.nextInt(10) == 0 ? this.field_35515_A : this.field_35528_z));
+		return (WorldGenerator)(var1.nextInt(5) == 0 ? this.field_35483_D : (var1.nextInt(10) == 0 ? this.field_35515_A : new WorldGenTrees(4 + var1.nextInt(7), 0, 0, true)));
 	}
 }
--- net/minecraft/src/CraftingManager.java
+++ net/minecraft/src/CraftingManager.java
@@ -23,8 +23,14 @@
 		(new RecipesDyes()).addRecipes(this);
 		this.addRecipe(new ItemStack(Item.paper, 3), new Object[]{"###", Character.valueOf('#'), Item.reed});
 		this.addRecipe(new ItemStack(Item.book, 1), new Object[]{"#", "#", "#", Character.valueOf('#'), Item.paper});
-		this.addRecipe(new ItemStack(Block.fence, 2), new Object[]{"###", "###", Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Block.field_35044_bw, 1), new Object[]{"#W#", "#W#", Character.valueOf('#'), Item.stick, Character.valueOf('W'), Block.planks});
+		this.addRecipe(new ItemStack(Block.fence, 3, 0), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 0)});
+		this.addRecipe(new ItemStack(Block.fence, 3, 1), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 1)});
+		this.addRecipe(new ItemStack(Block.fence, 3, 2), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 2)});
+		this.addRecipe(new ItemStack(Block.fence, 3, 3), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 3)});
+		this.addRecipe(new ItemStack(Block.field_35044_bw, 1), new Object[]{"#W#", "#W#", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 0)});
+		this.addRecipe(new ItemStack(Block.palmFenceGate, 1), new Object[]{"#W#", "#W#", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 1)});
+		this.addRecipe(new ItemStack(Block.acaciaFenceGate, 1), new Object[]{"#W#", "#W#", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 2)});
+		this.addRecipe(new ItemStack(Block.wengeFenceGate, 1), new Object[]{"#W#", "#W#", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 3)});
 		this.addRecipe(new ItemStack(Block.jukebox, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.diamond});
 		this.addRecipe(new ItemStack(Block.music, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.redstone});
 		this.addRecipe(new ItemStack(Block.bookShelf, 1), new Object[]{"###", "XXX", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.book});
@@ -34,12 +40,24 @@
 		this.addRecipe(new ItemStack(Block.glowStone, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.lightStoneDust});
 		this.addRecipe(new ItemStack(Block.cloth, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.silk});
 		this.addRecipe(new ItemStack(Block.tnt, 1), new Object[]{"X#X", "#X#", "X#X", Character.valueOf('X'), Item.gunpowder, Character.valueOf('#'), Block.sand});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 3), new Object[]{"###", Character.valueOf('#'), Block.cobblestone});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 0), new Object[]{"###", Character.valueOf('#'), Block.stone});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 1), new Object[]{"###", Character.valueOf('#'), Block.sandStone});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 2), new Object[]{"###", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 4), new Object[]{"###", Character.valueOf('#'), Block.brick});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 5), new Object[]{"###", Character.valueOf('#'), Block.field_35052_bn});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 1), new Object[]{"###", Character.valueOf('#'), Block.sandStone});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 4), new Object[]{"###", Character.valueOf('#'), Block.brick});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 0), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.stone, 1, 0)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 5), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.field_35052_bn, 1, 0)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 3), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 0)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 6), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.stone, 1, 1)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 9), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.field_35052_bn, 1, 4)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 12), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 1)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 7), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.stone, 1, 2)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 10), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.field_35052_bn, 1, 8)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 13), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 2)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 8), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.stone, 1, 3)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 11), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.field_35052_bn, 1, 12)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 14), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 3)});
+		this.addRecipe(new ItemStack(Block.stairSingleWood, 6, 0), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 0)});
+		this.addRecipe(new ItemStack(Block.stairSingleWood, 6, 1), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 1)});
+		this.addRecipe(new ItemStack(Block.stairSingleWood, 6, 2), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 2)});
+		this.addRecipe(new ItemStack(Block.stairSingleWood, 6, 3), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 3)});
 		this.addRecipe(new ItemStack(Block.ladder, 2), new Object[]{"# #", "###", "# #", Character.valueOf('#'), Item.stick});
 		this.addRecipe(new ItemStack(Item.doorWood, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Block.trapdoor, 2), new Object[]{"###", "###", Character.valueOf('#'), Block.planks});
@@ -47,7 +65,10 @@
 		this.addRecipe(new ItemStack(Item.sign, 1), new Object[]{"###", "###", " X ", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.stick});
 		this.addRecipe(new ItemStack(Item.cake, 1), new Object[]{"AAA", "BEB", "CCC", Character.valueOf('A'), Item.bucketMilk, Character.valueOf('B'), Item.sugar, Character.valueOf('C'), Item.wheat, Character.valueOf('E'), Item.egg});
 		this.addRecipe(new ItemStack(Item.sugar, 1), new Object[]{"#", Character.valueOf('#'), Item.reed});
-		this.addRecipe(new ItemStack(Block.planks, 4), new Object[]{"#", Character.valueOf('#'), Block.wood});
+		this.addRecipe(new ItemStack(Block.planks, 4, 0), new Object[]{"#", Character.valueOf('#'), new ItemStack(Block.wood, 1, 0)});
+		this.addRecipe(new ItemStack(Block.planks, 4, 1), new Object[]{"#", Character.valueOf('#'), new ItemStack(Block.wood, 1, 1)});
+		this.addRecipe(new ItemStack(Block.planks, 4, 2), new Object[]{"#", Character.valueOf('#'), new ItemStack(Block.wood, 1, 2)});
+		this.addRecipe(new ItemStack(Block.planks, 4, 3), new Object[]{"#", Character.valueOf('#'), new ItemStack(Block.wood, 1, 3)});
 		this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Block.torchWood, 4), new Object[]{"X", "#", Character.valueOf('X'), Item.coal, Character.valueOf('#'), Item.stick});
 		this.addRecipe(new ItemStack(Block.torchWood, 4), new Object[]{"X", "#", Character.valueOf('X'), new ItemStack(Item.coal, 1, 1), Character.valueOf('#'), Item.stick});
@@ -63,11 +84,20 @@
 		this.addRecipe(new ItemStack(Item.bucketEmpty, 1), new Object[]{"# #", " # ", Character.valueOf('#'), Item.ingotIron});
 		this.addRecipe(new ItemStack(Item.flintAndSteel, 1), new Object[]{"A ", " B", Character.valueOf('A'), Item.ingotIron, Character.valueOf('B'), Item.flint});
 		this.addRecipe(new ItemStack(Item.bread, 1), new Object[]{"###", Character.valueOf('#'), Item.wheat});
-		this.addRecipe(new ItemStack(Block.stairCompactPlanks, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planks});
+		this.addRecipe(new ItemStack(Block.stairCompactPlanks, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 0)});
+		this.addRecipe(new ItemStack(Block.stairCompactPlanks1, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 1)});
+		this.addRecipe(new ItemStack(Block.stairCompactPlanks2, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 2)});
+		this.addRecipe(new ItemStack(Block.stairCompactPlanks3, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 3)});
 		this.addRecipe(new ItemStack(Item.fishingRod, 1), new Object[]{"  #", " #X", "# X", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.silk});
-		this.addRecipe(new ItemStack(Block.stairCompactCobblestone, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.cobblestone});
+		this.addRecipe(new ItemStack(Block.stairCompactCobblestone, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 0)});
+		this.addRecipe(new ItemStack(Block.stairCompactCobblestone1, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 1)});
+		this.addRecipe(new ItemStack(Block.stairCompactCobblestone2, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 2)});
+		this.addRecipe(new ItemStack(Block.stairCompactCobblestone3, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 3)});
 		this.addRecipe(new ItemStack(Block.field_35047_bx, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.brick});
-		this.addRecipe(new ItemStack(Block.field_35046_by, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.field_35052_bn});
+		this.addRecipe(new ItemStack(Block.field_35046_by, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.field_35052_bn, 1, 0)});
+		this.addRecipe(new ItemStack(Block.field_35279_by1, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.field_35052_bn, 1, 1)});
+		this.addRecipe(new ItemStack(Block.field_35279_by2, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.field_35052_bn, 1, 2)});
+		this.addRecipe(new ItemStack(Block.field_35279_by3, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.field_35052_bn, 1, 3)});
 		this.addRecipe(new ItemStack(Item.painting, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Block.cloth});
 		this.addRecipe(new ItemStack(Item.appleGold, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.blockGold, Character.valueOf('X'), Item.appleRed});
 		this.addRecipe(new ItemStack(Block.lever, 1), new Object[]{"X", "#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.stick});
@@ -83,6 +113,7 @@
 		this.addRecipe(new ItemStack(Block.pistonBase, 1), new Object[]{"TTT", "#X#", "#R#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.ingotIron, Character.valueOf('R'), Item.redstone, Character.valueOf('T'), Block.planks});
 		this.addRecipe(new ItemStack(Block.pistonStickyBase, 1), new Object[]{"S", "P", Character.valueOf('S'), Item.slimeBall, Character.valueOf('P'), Block.pistonBase});
 		this.addRecipe(new ItemStack(Item.bed, 1), new Object[]{"###", "XXX", Character.valueOf('#'), Block.cloth, Character.valueOf('X'), Block.planks});
+		this.addRecipe(new ItemStack(Item.glassBottle, 1), new Object[]{"# #", " # ", Character.valueOf('#'), Block.glass});
 		Collections.sort(this.recipes, new RecipeSorter(this));
 		System.out.println(this.recipes.size() + " recipes");
 	}
--- net/minecraft/src/GenLayerRiver.java
+++ net/minecraft/src/GenLayerRiver.java
@@ -7,26 +7,22 @@
 	}
 
 	public int[] func_35018_a(int var1, int var2, int var3, int var4) {
-		int var5 = var1 - 1;
-		int var6 = var2 - 1;
-		int var7 = var3 + 2;
-		int var8 = var4 + 2;
+		int var5 = var1 - 2;
+		int var6 = var2 - 2;
+		int var7 = var3 + 4;
+		int var8 = var4 + 4;
 		int[] var9 = this.field_35023_a.func_35018_a(var5, var6, var7, var8);
 		int[] var10 = IntCache.func_35549_a(var3 * var4);
 
 		for(int var11 = 0; var11 < var4; ++var11) {
 			for(int var12 = 0; var12 < var3; ++var12) {
-				int var13 = var9[var12 + 0 + (var11 + 1) * var7];
-				int var14 = var9[var12 + 2 + (var11 + 1) * var7];
-				int var15 = var9[var12 + 1 + (var11 + 0) * var7];
-				int var16 = var9[var12 + 1 + (var11 + 2) * var7];
-				int var17 = var9[var12 + 1 + (var11 + 1) * var7];
-				if(var17 != 0 && var13 != 0 && var14 != 0 && var15 != 0 && var16 != 0) {
-					if(var17 == var13 && var17 == var15 && var17 == var14 && var17 == var16) {
-						var10[var12 + var11 * var3] = -1;
-					} else {
-						var10[var12 + var11 * var3] = BiomeGenBase.field_35522_i.field_35529_y;
-					}
+				int var13 = func_151630_c(var9[var12 + 0 + (var11 + 2) * var7]);
+				int var14 = func_151630_c(var9[var12 + 4 + (var11 + 2) * var7]);
+				int var15 = func_151630_c(var9[var12 + 2 + (var11 + 0) * var7]);
+				int var16 = func_151630_c(var9[var12 + 2 + (var11 + 4) * var7]);
+				int var17 = func_151630_c(var9[var12 + 2 + (var11 + 2) * var7]);
+				if(var17 == var13 && var17 == var15 && var17 == var14 && var17 == var16) {
+					var10[var12 + var11 * var3] = -1;
 				} else {
 					var10[var12 + var11 * var3] = BiomeGenBase.field_35522_i.field_35529_y;
 				}
@@ -34,5 +30,9 @@
 		}
 
 		return var10;
+	}
+
+	private int func_151630_c(int p_151630_1_) {
+		return p_151630_1_ >= 2 ? 2 + (p_151630_1_ & 1) : p_151630_1_;
 	}
 }
--- net/minecraft/src/GenLayer.java
+++ net/minecraft/src/GenLayer.java
@@ -9,15 +9,16 @@
 	public static GenLayer[] func_35019_a(long var0) {
 		LayerIsland var2 = new LayerIsland(1L);
 		GenLayerZoomFuzzy var9 = new GenLayerZoomFuzzy(2000L, var2);
-		GenLayerIsland var10 = new GenLayerIsland(1L, var9);
-		GenLayerZoom var11 = new GenLayerZoom(2001L, var10);
-		var10 = new GenLayerIsland(2L, var11);
-		var11 = new GenLayerZoom(2002L, var10);
-		var10 = new GenLayerIsland(3L, var11);
-		var11 = new GenLayerZoom(2003L, var10);
-		var10 = new GenLayerIsland(3L, var11);
-		var11 = new GenLayerZoom(2004L, var10);
-		var10 = new GenLayerIsland(3L, var11);
+		GenLayer var10 = new GenLayerIsland(1L, var9);
+		var10 = new GenLayerZoom(2001L, var10);
+		var10 = new GenLayerIsland(2L, var10);
+		var10 = new GenLayerIsland(50L, var10);
+		var10 = new GenLayerIsland(70L, var10);
+		var10 = new GenLayerRemoveTooMuchOcean(2L, var10);
+		var10 = new GenLayerIsland(3L, var10);
+		var10 = new GenLayerZoom(2002L, var10);
+		var10 = new GenLayerZoom(2003L, var10);
+		var10 = new GenLayerIsland(4L, var10);
 		byte var3 = 4;
 		GenLayer var4 = GenLayerZoom.func_35025_a(1000L, var10, 0);
 		GenLayerRiverInit var12 = new GenLayerRiverInit(100L, var4);
@@ -26,7 +27,11 @@
 		GenLayerSmooth var14 = new GenLayerSmooth(1000L, var13);
 		GenLayer var5 = GenLayerZoom.func_35025_a(1000L, var10, 0);
 		GenLayerVillageLandscape var15 = new GenLayerVillageLandscape(200L, var5);
-		Object var16 = GenLayerZoom.func_35025_a(1000L, var15, 2);
+		Object var16 = GenLayerZoom.func_35025_a(1000L, var15, 1);
+		var16 = new GenLayerAddOasis(210L, (GenLayer)var16);
+		var16 = new GenLayerShore(210L, (GenLayer)var16);
+		var16 = new GenLayerBiomeVariants(220L, (GenLayer)var16);
+		var16 = GenLayerZoom.func_35025_a(1001L, (GenLayer)var16, 1);
 		Object var6 = new GenLayerTemperature((GenLayer)var16);
 		Object var7 = new GenLayerDownfall((GenLayer)var16);
 
@@ -51,7 +56,7 @@
 		var19.func_35015_b(var0);
 		var22.func_35015_b(var0);
 		var23.func_35015_b(var0);
-		return new GenLayer[]{var20, var23, var19, var22};
+		return new GenLayer[]{var20, var23, var19, var22, var20};
 	}
 
 	public GenLayer(long var1) {
--- net/minecraft/src/NBTBase.java
+++ net/minecraft/src/NBTBase.java
@@ -66,6 +66,8 @@
 			return new NBTTagList();
 		case 10:
 			return new NBTTagCompound();
+		case 11:
+			return new NBTTagIntArray();
 		default:
 			return null;
 		}
@@ -95,6 +97,8 @@
 			return "TAG_List";
 		case 10:
 			return "TAG_Compound";
+		case 11:
+			return "TAG_Int_Array";
 		default:
 			return "UNKNOWN";
 		}
--- /dev/null
+++ net/minecraft/src/BlockHardenedClay.java
@@ -1,0 +1,11 @@
+package net.minecraft.src;
+
+public class BlockHardenedClay extends Block {
+	protected BlockHardenedClay(int var1, int var2, Material var3) {
+		super(var1, var2, var3);
+	}
+
+	protected int damageDropped(int var1) {
+		return var1;
+	}
+}
--- net/minecraft/src/EntityBoat.java
+++ net/minecraft/src/EntityBoat.java
@@ -68,15 +68,7 @@
 					this.riddenByEntity.mountEntity(this);
 				}
 
-				int var3;
-				for(var3 = 0; var3 < 3; ++var3) {
-					this.dropItemWithOffset(Block.planks.blockID, 1, 0.0F);
-				}
-
-				for(var3 = 0; var3 < 2; ++var3) {
-					this.dropItemWithOffset(Item.stick.shiftedIndex, 1, 0.0F);
-				}
-
+				this.dropItemWithOffset(Item.boat.shiftedIndex, 1, 0.0F);
 				this.setEntityDead();
 			}
 
@@ -216,20 +208,7 @@
 				}
 			}
 
-			if(this.isCollidedHorizontally && var6 > 0.15D) {
-				if(!this.worldObj.singleplayerWorld) {
-					this.setEntityDead();
-
-					int var22;
-					for(var22 = 0; var22 < 3; ++var22) {
-						this.dropItemWithOffset(Block.planks.blockID, 1, 0.0F);
-					}
-
-					for(var22 = 0; var22 < 2; ++var22) {
-						this.dropItemWithOffset(Item.stick.shiftedIndex, 1, 0.0F);
-					}
-				}
-			} else {
+			if(!this.isCollidedHorizontally || var6 <= 0.15D) {
 				this.motionX *= (double)0.99F;
 				this.motionY *= (double)0.95F;
 				this.motionZ *= (double)0.99F;
--- net/minecraft/src/ChunkProviderGenerate.java
+++ net/minecraft/src/ChunkProviderGenerate.java
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.Arrays;
 import java.util.Random;
 
 public class ChunkProviderGenerate implements IChunkProvider {
@@ -7,14 +8,15 @@
 	private NoiseGeneratorOctaves field_705_k;
 	private NoiseGeneratorOctaves field_704_l;
 	private NoiseGeneratorOctaves field_703_m;
-	private NoiseGeneratorOctaves field_702_n;
+	private NoiseGeneratorOctaves field_909_n;
+	private NoiseGeneratorOctaves field_908_o;
+	private NoiseGeneratorOctaves caveNoise;
 	public NoiseGeneratorOctaves field_715_a;
 	public NoiseGeneratorOctaves field_714_b;
 	public NoiseGeneratorOctaves mobSpawnerNoise;
 	private World worldObj;
 	private final boolean field_35563_t;
 	private double[] field_4224_q;
-	private double[] field_35562_v = new double[256];
 	private MapGenBase caveGenerator = new MapGenCaves();
 	public MapGenStronghold field_35559_d = new MapGenStronghold();
 	public MapGenVillage field_35560_e = new MapGenVillage();
@@ -28,6 +30,8 @@
 	double[] field_4225_h;
 	float[] field_35561_l;
 	int[][] unusedIntArray32x32 = new int[32][32];
+	private boolean[] hitSolid = new boolean[16];
+	private boolean[] doWater = new boolean[16];
 
 	public ChunkProviderGenerate(World var1, long var2, boolean var4) {
 		this.worldObj = var1;
@@ -36,28 +40,40 @@
 		this.field_705_k = new NoiseGeneratorOctaves(this.rand, 16);
 		this.field_704_l = new NoiseGeneratorOctaves(this.rand, 16);
 		this.field_703_m = new NoiseGeneratorOctaves(this.rand, 8);
-		this.field_702_n = new NoiseGeneratorOctaves(this.rand, 4);
+		this.field_909_n = new NoiseGeneratorOctaves(this.rand, 4);
+		this.field_908_o = new NoiseGeneratorOctaves(this.rand, 4);
 		this.field_715_a = new NoiseGeneratorOctaves(this.rand, 10);
 		this.field_714_b = new NoiseGeneratorOctaves(this.rand, 16);
 		this.mobSpawnerNoise = new NoiseGeneratorOctaves(this.rand, 8);
+		this.caveNoise = new NoiseGeneratorOctaves(this.rand, 4);
+		this.field_35561_l = new float[25];
+
+		for(int var8 = -2; var8 <= 2; ++var8) {
+			for(int var9 = -2; var9 <= 2; ++var9) {
+				float var10 = 10.0F / MathHelper.sqrt_float((float)(var8 * var8 + var9 * var9) + 0.2F);
+				this.field_35561_l[var8 + 2 + (var9 + 2) * 5] = var10;
+			}
+		}
 	}
 
 	public void generateTerrain(int var1, int var2, byte[] var3) {
 		byte var4 = 4;
-		this.worldObj.getClass();
-		int var5 = 128 / 8;
-		this.worldObj.getClass();
+		int var5 = 256 / 8;
 		byte var6 = 63;
 		int var7 = var4 + 1;
-		this.worldObj.getClass();
-		int var8 = 128 / 8 + 1;
+		int var8 = 256 / 8 + 1;
 		int var9 = var4 + 1;
 		this.biomesForGeneration = this.worldObj.getWorldChunkManager().func_35142_b(this.biomesForGeneration, var1 * 4 - 2, var2 * 4 - 2, var7 + 5, var9 + 5);
 		this.field_4224_q = this.func_4058_a(this.field_4224_q, var1 * var4, 0, var2 * var4, var7, var8, var9);
 
 		for(int var10 = 0; var10 < var4; ++var10) {
 			for(int var11 = 0; var11 < var4; ++var11) {
-				for(int var12 = 0; var12 < var5; ++var12) {
+				Arrays.fill(this.hitSolid, false);
+				for(int var12 = var5 - 1; var12 >= 0; --var12) {
+					for (int i = 0; i < 16; i++) {
+						this.doWater[i] = !this.hitSolid[i];
+					}
+
 					double var13 = 0.125D;
 					double var15 = this.field_4224_q[((var10 + 0) * var9 + var11 + 0) * var8 + var12 + 0];
 					double var17 = this.field_4224_q[((var10 + 0) * var9 + var11 + 1) * var8 + var12 + 0];
@@ -76,26 +92,23 @@
 						double var40 = (var21 - var17) * var32;
 
 						for(int var42 = 0; var42 < 4; ++var42) {
-							int var10000 = var42 + var10 * 4;
-							this.worldObj.getClass();
-							var10000 <<= 11;
-							int var10001 = 0 + var11 * 4;
-							this.worldObj.getClass();
-							int var43 = var10000 | var10001 << 7 | var12 * 8 + var31;
-							this.worldObj.getClass();
-							int var44 = 1 << 7;
+							int var43 = (var42 + var10 * 4) << 12 | (0 + var11 * 4) << 8 | var12 * 8 + var31;
+							int var44 = 1 << 8;
 							double var45 = 0.25D;
 							double var47 = var34;
 							double var49 = (var36 - var34) * var45;
 
 							for(int var51 = 0; var51 < 4; ++var51) {
+								int waterCheck = var42 << 2 | var51;
+
 								int var52 = 0;
-								if(var12 * 8 + var31 < var6) {
+								if(var12 * 8 + var31 < var6 && this.doWater[waterCheck]) {
 									var52 = Block.waterStill.blockID;
 								}
 
 								if(var47 > 0.0D) {
 									var52 = Block.stone.blockID;
+									if (var12 < 7 && var31 == 0) this.hitSolid[waterCheck] = true;
 								}
 
 								var3[var43] = (byte)var52;
@@ -118,65 +131,17 @@
 
 	}
 
-	public void replaceBlocksForBiome(int var1, int var2, byte[] var3, BiomeGenBase[] var4) {
-		this.worldObj.getClass();
-		byte var5 = 63;
+	public void replaceBlocksForBiome(int var1, int var2, byte[] var3, byte[] metadata, BiomeGenBase[] var4) {
 		double var6 = 1.0D / 32.0D;
-		this.field_35562_v = this.field_702_n.generateNoiseOctaves(this.field_35562_v, var1 * 16, var2 * 16, 0, 16, 16, 1, var6 * 2.0D, var6 * 2.0D, var6 * 2.0D);
-
-		for(int var8 = 0; var8 < 16; ++var8) {
-			for(int var9 = 0; var9 < 16; ++var9) {
-				BiomeGenBase var10 = var4[var9 + var8 * 16];
-				int var11 = (int)(this.field_35562_v[var8 + var9 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
-				int var12 = -1;
-				byte var13 = var10.topBlock;
-				byte var14 = var10.fillerBlock;
-				this.worldObj.getClass();
-
-				for(int var15 = 127; var15 >= 0; --var15) {
-					int var10000 = var9 * 16 + var8;
-					this.worldObj.getClass();
-					int var16 = var10000 * 128 + var15;
-					if(var15 <= 0 + this.rand.nextInt(5)) {
-						var3[var16] = (byte)Block.bedrock.blockID;
-					} else {
-						byte var17 = var3[var16];
-						if(var17 == 0) {
-							var12 = -1;
-						} else if(var17 == Block.stone.blockID) {
-							if(var12 == -1) {
-								if(var11 <= 0) {
-									var13 = 0;
-									var14 = (byte)Block.stone.blockID;
-								} else if(var15 >= var5 - 4 && var15 <= var5 + 1) {
-									var13 = var10.topBlock;
-									var14 = var10.fillerBlock;
-								}
-
-								if(var15 < var5 && var13 == 0) {
-									var13 = (byte)Block.waterStill.blockID;
-								}
-
-								var12 = var11;
-								if(var15 >= var5 - 1) {
-									var3[var16] = var13;
-								} else {
-									var3[var16] = var14;
-								}
-							} else if(var12 > 0) {
-								--var12;
-								var3[var16] = var14;
-								if(var12 == 0 && var14 == Block.sand.blockID) {
-									var12 = this.rand.nextInt(4);
-									var14 = (byte)Block.sandStone.blockID;
-								}
-							}
-						}
-					}
-				}
+
+		for (int x = 0; x < 16; ++x) {
+			for (int z = 0; z < 16; ++z) {
+				BiomeGenBase biome = var4[z << 4 | x];
+				int xx = var1 << 4 | x;
+				int zz = var2 << 4 | z;
+				biome.buildBiomeSurface(this.worldObj, this.rand, var3, metadata, xx, zz, this.field_908_o.func_647_a(xx * var6 * 2.0D, zz * var6 * 2.0D), this.field_909_n.generateNoise(xx * var6, zz * var6, 0.0D));
 			}
 		}
-
 	}
 
 	public Chunk loadChunk(int var1, int var2) {
@@ -186,19 +151,28 @@
 	public Chunk provideChunk(int var1, int var2) {
 		this.rand.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
 		this.worldObj.getClass();
-		byte[] var3 = new byte[16 * 128 * 16];
+		byte[] var3 = new byte[16 * 256 * 16];
+		byte[] metadata = new byte[16 * 256 * 16];
 		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
 		this.generateTerrain(var1, var2, var3);
 		this.biomesForGeneration = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, var1 * 16, var2 * 16, 16, 16);
-		this.replaceBlocksForBiome(var1, var2, var3, this.biomesForGeneration);
-		this.caveGenerator.generate(this, this.worldObj, var1, var2, var3);
+		this.replaceBlocksForBiome(var1, var2, var3, metadata, this.biomesForGeneration);
+		this.caveGenerator.generate(this, this.worldObj, var1, var2, var3, metadata);
 		if(this.field_35563_t) {
-			this.field_35559_d.generate(this, this.worldObj, var1, var2, var3);
-			this.field_35558_f.generate(this, this.worldObj, var1, var2, var3);
-			this.field_35560_e.generate(this, this.worldObj, var1, var2, var3);
+			this.field_35559_d.generate(this, this.worldObj, var1, var2, var3, metadata);
+			this.field_35558_f.generate(this, this.worldObj, var1, var2, var3, metadata);
+			this.field_35560_e.generate(this, this.worldObj, var1, var2, var3, metadata);
 		}
 
-		this.field_35564_x.generate(this, this.worldObj, var1, var2, var3);
+		this.field_35564_x.generate(this, this.worldObj, var1, var2, var3, metadata);
+		//FIXME: DUMB HACK
+		for (int x = 0; x < 16; x++) {
+			for (int z = 0; z < 16; z++) {
+				for (int y = 0; y < 256; y++) {
+					var4.data.setNibble(x, y, z, metadata[x << 12 | z << 8 | y]);
+				}
+			}
+		}
 		var4.generateSkylightMap();
 		return var4;
 	}
@@ -208,17 +182,6 @@
 			var1 = new double[var5 * var6 * var7];
 		}
 
-		if(this.field_35561_l == null) {
-			this.field_35561_l = new float[25];
-
-			for(int var8 = -2; var8 <= 2; ++var8) {
-				for(int var9 = -2; var9 <= 2; ++var9) {
-					float var10 = 10.0F / MathHelper.sqrt_float((float)(var8 * var8 + var9 * var9) + 0.2F);
-					this.field_35561_l[var8 + 2 + (var9 + 2) * 5] = var10;
-				}
-			}
-		}
-
 		double var43 = 684.412D;
 		double var44 = 684.412D;
 		this.field_4226_g = this.field_715_a.func_4103_a(this.field_4226_g, var2, var4, var5, var7, 1.121D, 1.121D, 0.5D);
@@ -236,6 +199,7 @@
 				float var17 = 0.0F;
 				float var18 = 0.0F;
 				byte var19 = 2;
+				float heightCutoff = 0.0F;
 				BiomeGenBase var20 = this.biomesForGeneration[var14 + 2 + (var15 + 2) * (var5 + 5)];
 
 				for(int var21 = -var19; var21 <= var19; ++var21) {
@@ -249,6 +213,10 @@
 						var16 += var23.field_35526_r * var24;
 						var17 += var23.field_35527_q * var24;
 						var18 += var24;
+
+						if (var23.heightCutoff > heightCutoff) {
+							heightCutoff = var23.heightCutoff;
+						}
 					}
 				}
 
@@ -284,12 +252,10 @@
 					double var47 = (double)var17;
 					double var26 = (double)var16;
 					var47 += var45 * 0.2D;
-					var47 = var47 * (double)var6 / 16.0D;
-					double var28 = (double)var6 / 2.0D + var47 * 4.0D;
+					var47 = var47 * 17.0D / 16.0D;
+					double var28 = 17.0D / 2.0D + var47 * 4.0D;
 					double var30 = 0.0D;
-					double var10000 = ((double)var46 - var28) * 12.0D * 128.0D;
-					this.worldObj.getClass();
-					double var32 = var10000 / 128.0D / var26;
+					double var32 = ((double)var46 - var28) * 12.0D * 128.0D / 128.0D / var26;
 					if(var32 < 0.0D) {
 						var32 *= 4.0D;
 					}
@@ -306,9 +272,26 @@
 					}
 
 					var30 -= var32;
-					if(var46 > var6 - 4) {
-						double var40 = (double)((float)(var46 - (var6 - 4)) / 3.0F);
-						var30 = var30 * (1.0D - var40) + -10.0D * var40;
+					if(var46 > var6 - 1 - heightCutoff) {
+						var30 = 0.0D;
+					} else if(var46 > var6 - 4 - heightCutoff) {
+						double var40 = (double)((float)(var46 - (var6 - 4 - heightCutoff)) / 3.0F);
+ 						var30 = var30 * (1.0D - var40) + -10.0D * var40;
+ 					}
+
+					double cave = this.caveNoise.generateNoise((var2 + var14) * 0.5D, (var3 + var46) * 1.5D, (var4 + var15) * 0.5D) - 2.0D;
+					if (cave > 0.0D) {
+						int caveCutoff = var20.field_35527_q > -0.2F ? 4 : 2;
+						if (var46 < 3) {
+							cave -= cave * ((3 - var46) / 2.0D);
+						}
+						if (var46 > caveCutoff) {
+							cave -= cave * ((var46 - caveCutoff) / 2.0D);
+						}
+					}
+
+					if (var30 > 0.0D && cave > 0.0D) {
+						var30 *= -cave;
 					}
 
 					var1[var12] = var30;
@@ -346,21 +329,15 @@
 		Random var10000;
 		if(!var11 && this.rand.nextInt(4) == 0) {
 			var12 = var4 + this.rand.nextInt(16) + 8;
-			var10000 = this.rand;
-			this.worldObj.getClass();
-			var13 = var10000.nextInt(128);
+			var13 = this.rand.nextInt(128);
 			var14 = var5 + this.rand.nextInt(16) + 8;
 			(new WorldGenLakes(Block.waterStill.blockID)).generate(this.worldObj, this.rand, var12, var13, var14);
 		}
 
 		if(!var11 && this.rand.nextInt(8) == 0) {
 			var12 = var4 + this.rand.nextInt(16) + 8;
-			var10000 = this.rand;
-			Random var10001 = this.rand;
-			this.worldObj.getClass();
-			var13 = var10000.nextInt(var10001.nextInt(128 - 8) + 8);
+			var13 = this.rand.nextInt(this.rand.nextInt(128 - 8) + 8);
 			var14 = var5 + this.rand.nextInt(16) + 8;
-			this.worldObj.getClass();
 			if(var13 < 63 || this.rand.nextInt(10) == 0) {
 				(new WorldGenLakes(Block.lavaStill.blockID)).generate(this.worldObj, this.rand, var12, var13, var14);
 			}
@@ -368,9 +345,7 @@
 
 		for(var12 = 0; var12 < 8; ++var12) {
 			var13 = var4 + this.rand.nextInt(16) + 8;
-			var10000 = this.rand;
-			this.worldObj.getClass();
-			var14 = var10000.nextInt(128);
+			var14 = this.rand.nextInt(128);
 			int var15 = var5 + this.rand.nextInt(16) + 8;
 			if((new WorldGenDungeons()).generate(this.worldObj, this.rand, var13, var14, var15)) {
 			}
--- net/minecraft/src/StructureComponent.java
+++ net/minecraft/src/StructureComponent.java
@@ -321,6 +321,40 @@
 
 	}
 
+	protected void func_35294_ametadata(World var1, StructureBoundingBox var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9, int var10, boolean var11, int metadata) {
+		for(int var12 = var4; var12 <= var7; ++var12) {
+			for(int var13 = var3; var13 <= var6; ++var13) {
+				for(int var14 = var5; var14 <= var8; ++var14) {
+					if(!var11 || this.func_35297_a(var1, var13, var12, var14, var2) != 0) {
+						if(var12 != var4 && var12 != var7 && var13 != var3 && var13 != var6 && var14 != var5 && var14 != var8) {
+							this.func_35309_a(var1, var10, metadata, var13, var12, var14, var2);
+						} else {
+							this.func_35309_a(var1, var9, metadata, var13, var12, var14, var2);
+						}
+					}
+				}
+			}
+		}
+
+	}
+
+	protected void func_35294_air(World var1, StructureBoundingBox var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9, int var10, int metadata) {
+		for(int var12 = var4; var12 <= var7; ++var12) {
+			for(int var13 = var3; var13 <= var6; ++var13) {
+				for(int var14 = var5; var14 <= var8; ++var14) {
+					if(this.func_35297_a(var1, var13, var12, var14, var2) == 0) {
+						if(var12 != var4 && var12 != var7 && var13 != var3 && var13 != var6 && var14 != var5 && var14 != var8) {
+							this.func_35309_a(var1, var10, metadata, var13, var12, var14, var2);
+						} else {
+							this.func_35309_a(var1, var9, metadata, var13, var12, var14, var2);
+						}
+					}
+				}
+			}
+		}
+
+	}
+
 	protected void func_35307_a(World var1, StructureBoundingBox var2, int var3, int var4, int var5, int var6, int var7, int var8, boolean var9, Random var10, StructurePieceBlockSelector var11) {
 		for(int var12 = var4; var12 <= var7; ++var12) {
 			for(int var13 = var3; var13 <= var6; ++var13) {
@@ -455,4 +489,49 @@
 		}
 
 	}
+
+	protected boolean isNotFloatingOrHasBlockAbove(World world, StructureBoundingBox boundingBox) {
+		int worldY = this.func_35300_a(boundingBox.field_35676_b);
+		worldY = worldY == 0 ? this.field_35316_g.field_35676_b : worldY;
+
+		if (world.getBlockId(boundingBox.field_35678_a, worldY, boundingBox.field_35677_c) == 0 || //minX, minZ
+				world.getBlockId(boundingBox.field_35674_d, worldY, boundingBox.field_35677_c) == 0 || //maxX, minZ
+				world.getBlockId(boundingBox.field_35678_a, worldY, boundingBox.field_35673_f) == 0 || //minX, maxZ
+				world.getBlockId(boundingBox.field_35674_d, worldY, boundingBox.field_35673_f) == 0) { //maxX, maxZ
+
+			boolean hasBlockAbove = false;
+
+			for (int i = worldY; i < 256; i++) {
+				if (world.getBlockId(boundingBox.field_35678_a, i, boundingBox.field_35677_c) != 0 && //minX, minZ
+						world.getBlockId(boundingBox.field_35674_d, i, boundingBox.field_35677_c) != 0 && //maxX, minZ
+						world.getBlockId(boundingBox.field_35678_a, i, boundingBox.field_35673_f) != 0 && //minX, maxZ
+						world.getBlockId(boundingBox.field_35674_d, i, boundingBox.field_35673_f) != 0) { //maxX, maxZ
+
+					hasBlockAbove = true;
+					break;
+				}
+			}
+
+			return hasBlockAbove;
+		}
+
+		return true;
+	}
+
+	protected boolean beamNoBurn(World world, int x, int y, int z, StructureBoundingBox box) {
+		int offX = this.func_35306_a(x, z);
+		int offY = this.func_35300_a(y);
+		int offZ = this.func_35296_b(x, z);
+
+		if (!box.func_35667_b(offX, offY, offZ)) {
+			return false;
+		}
+
+		while (offY > 0 && world.isAirBlock(offX, offY, offZ)) {
+			offY--;
+		}
+
+		Material material = world.getBlockMaterial(offX, offY, offZ);
+		return material != Material.lava;
+ 	}
 }
--- net/minecraft/src/ChunkProviderSky.java
+++ net/minecraft/src/ChunkProviderSky.java
@@ -75,14 +75,8 @@
 						double var39 = (var20 - var16) * var31;
 
 						for(int var41 = 0; var41 < 8; ++var41) {
-							int var10000 = var41 + var9 * 8;
-							this.worldObj.getClass();
-							var10000 <<= 11;
-							int var10001 = 0 + var10 * 8;
-							this.worldObj.getClass();
-							int var42 = var10000 | var10001 << 7 | var11 * 4 + var30;
-							this.worldObj.getClass();
-							int var43 = 1 << 7;
+							int var42 = (var41 + var9 * 8) << 12 | (0 + var10 * 8) << 8 | var11 * 4 + var30;
+							int var43 = 1 << 8;
 							double var44 = 0.125D;
 							double var46 = var33;
 							double var48 = (var35 - var33) * var44;
@@ -130,10 +124,10 @@
 				byte var13 = var9.fillerBlock;
 				this.worldObj.getClass();
 
-				for(int var14 = 127; var14 >= 0; --var14) {
+				for(int var14 = 255; var14 >= 0; --var14) {
 					int var10000 = var8 * 16 + var7;
 					this.worldObj.getClass();
-					int var15 = var10000 * 128 + var14;
+					int var15 = var10000 * 256 + var14;
 					byte var16 = var3[var15];
 					if(var16 == 0) {
 						var11 = -1;
@@ -172,12 +166,12 @@
 	public Chunk provideChunk(int var1, int var2) {
 		this.random.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
 		this.worldObj.getClass();
-		byte[] var3 = new byte[16 * 128 * 16];
+		byte[] var3 = new byte[16 * 256 * 16];
 		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
 		this.field_28073_v = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.field_28073_v, var1 * 16, var2 * 16, 16, 16);
 		this.generateTerrain(var1, var2, var3, this.field_28073_v);
 		this.replaceBlocksForBiome(var1, var2, var3, this.field_28073_v);
-		this.caveGen.generate(this, this.worldObj, var1, var2, var3);
+		this.caveGen.generate(this, this.worldObj, var1, var2, var3, var3);
 		var4.generateSkylightMap();
 		return var4;
 	}
--- net/minecraft/src/BlockFence.java
+++ net/minecraft/src/BlockFence.java
@@ -1,12 +1,8 @@
 package net.minecraft.src;
 
-public class BlockFence extends Block {
+public class BlockFence extends BlockMultitype {
 	public BlockFence(int var1, int var2) {
 		super(var1, var2, Material.wood);
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.getBlockId(var2, var3 - 1, var4) == this.blockID ? true : (!var1.getBlockMaterial(var2, var3 - 1, var4).isSolid() ? false : super.canPlaceBlockAt(var1, var2, var3, var4));
 	}
 
 	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
--- net/minecraft/src/BlockChest.java
+++ net/minecraft/src/BlockChest.java
@@ -14,197 +14,130 @@
 		return false;
 	}
 
+	public int getRenderType() {
+		return 22;
+	}
+
 	public void onBlockAdded(World var1, int var2, int var3, int var4) {
 		super.onBlockAdded(var1, var2, var3, var4);
-		this.func_35057_b(var1, var2, var3, var4);
-		int var5 = var1.getBlockId(var2, var3, var4 - 1);
-		int var6 = var1.getBlockId(var2, var3, var4 + 1);
-		int var7 = var1.getBlockId(var2 - 1, var3, var4);
-		int var8 = var1.getBlockId(var2 + 1, var3, var4);
-		if(var5 == this.blockID) {
-			this.func_35057_b(var1, var2, var3, var4 - 1);
-		}
-
-		if(var6 == this.blockID) {
-			this.func_35057_b(var1, var2, var3, var4 + 1);
-		}
-
-		if(var7 == this.blockID) {
-			this.func_35057_b(var1, var2 - 1, var3, var4);
-		}
-
-		if(var8 == this.blockID) {
-			this.func_35057_b(var1, var2 + 1, var3, var4);
-		}
-
-	}
-
-	public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLiving var5) {
-		int var6 = var1.getBlockId(var2, var3, var4 - 1);
-		int var7 = var1.getBlockId(var2, var3, var4 + 1);
-		int var8 = var1.getBlockId(var2 - 1, var3, var4);
-		int var9 = var1.getBlockId(var2 + 1, var3, var4);
-		byte var10 = 0;
-		int var11 = MathHelper.floor_double((double)(var5.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
-		if(var11 == 0) {
-			var10 = 2;
-		}
-
-		if(var11 == 1) {
-			var10 = 5;
-		}
-
-		if(var11 == 2) {
-			var10 = 3;
-		}
-
-		if(var11 == 3) {
-			var10 = 4;
-		}
-
-		if(var6 != this.blockID && var7 != this.blockID && var8 != this.blockID && var9 != this.blockID) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var10);
-		} else {
-			if((var6 == this.blockID || var7 == this.blockID) && (var10 == 4 || var10 == 5)) {
-				if(var6 == this.blockID) {
-					var1.setBlockMetadataWithNotify(var2, var3, var4 - 1, var10);
-				} else {
-					var1.setBlockMetadataWithNotify(var2, var3, var4 + 1, var10);
-				}
-
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var10);
-			}
-
-			if((var8 == this.blockID || var9 == this.blockID) && (var10 == 2 || var10 == 3)) {
-				if(var8 == this.blockID) {
-					var1.setBlockMetadataWithNotify(var2 - 1, var3, var4, var10);
-				} else {
-					var1.setBlockMetadataWithNotify(var2 + 1, var3, var4, var10);
-				}
-
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var10);
-			}
-		}
-
-	}
-
-	public void func_35057_b(World var1, int var2, int var3, int var4) {
-		if(!var1.singleplayerWorld) {
-			int var5 = var1.getBlockId(var2, var3, var4 - 1);
-			int var6 = var1.getBlockId(var2, var3, var4 + 1);
-			int var7 = var1.getBlockId(var2 - 1, var3, var4);
-			int var8 = var1.getBlockId(var2 + 1, var3, var4);
-			boolean var9 = true;
-			int var10;
-			int var11;
-			boolean var12;
-			byte var13;
-			int var14;
-			if(var5 != this.blockID && var6 != this.blockID) {
-				if(var7 != this.blockID && var8 != this.blockID) {
-					var13 = 3;
-					if(Block.opaqueCubeLookup[var5] && !Block.opaqueCubeLookup[var6]) {
-						var13 = 3;
-					}
-
-					if(Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var5]) {
-						var13 = 2;
-					}
-
-					if(Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var8]) {
-						var13 = 5;
-					}
-
-					if(Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var7]) {
-						var13 = 4;
-					}
-				} else {
-					var10 = var1.getBlockId(var7 == this.blockID ? var2 - 1 : var2 + 1, var3, var4 - 1);
-					var11 = var1.getBlockId(var7 == this.blockID ? var2 - 1 : var2 + 1, var3, var4 + 1);
-					var13 = 3;
-					var12 = true;
-					if(var7 == this.blockID) {
-						var14 = var1.getBlockMetadata(var2 - 1, var3, var4);
-					} else {
-						var14 = var1.getBlockMetadata(var2 + 1, var3, var4);
-					}
-
-					if(var14 == 2) {
-						var13 = 2;
-					}
-
-					if((Block.opaqueCubeLookup[var5] || Block.opaqueCubeLookup[var10]) && !Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var11]) {
-						var13 = 3;
-					}
-
-					if((Block.opaqueCubeLookup[var6] || Block.opaqueCubeLookup[var11]) && !Block.opaqueCubeLookup[var5] && !Block.opaqueCubeLookup[var10]) {
-						var13 = 2;
-					}
-				}
-			} else {
-				var10 = var1.getBlockId(var2 - 1, var3, var5 == this.blockID ? var4 - 1 : var4 + 1);
-				var11 = var1.getBlockId(var2 + 1, var3, var5 == this.blockID ? var4 - 1 : var4 + 1);
-				var13 = 5;
-				var12 = true;
-				if(var5 == this.blockID) {
-					var14 = var1.getBlockMetadata(var2, var3, var4 - 1);
-				} else {
-					var14 = var1.getBlockMetadata(var2, var3, var4 + 1);
-				}
-
-				if(var14 == 4) {
-					var13 = 4;
-				}
-
-				if((Block.opaqueCubeLookup[var7] || Block.opaqueCubeLookup[var10]) && !Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var11]) {
-					var13 = 5;
-				}
-
-				if((Block.opaqueCubeLookup[var8] || Block.opaqueCubeLookup[var11]) && !Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var10]) {
-					var13 = 4;
-				}
-			}
-
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var13);
-		}
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture - 1 : (var1 == 0 ? this.blockIndexInTexture - 1 : (var1 == 3 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture));
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		int var5 = 0;
-		if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
-			++var5;
-		}
-
-		if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
-			++var5;
-		}
-
-		if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
-			++var5;
-		}
-
-		if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
-			++var5;
-		}
-
-		return var5 > 1 ? false : (this.isThereANeighborChest(var1, var2 - 1, var3, var4) ? false : (this.isThereANeighborChest(var1, var2 + 1, var3, var4) ? false : (this.isThereANeighborChest(var1, var2, var3, var4 - 1) ? false : !this.isThereANeighborChest(var1, var2, var3, var4 + 1))));
-	}
-
-	private boolean isThereANeighborChest(World var1, int var2, int var3, int var4) {
-		return var1.getBlockId(var2, var3, var4) != this.blockID ? false : (var1.getBlockId(var2 - 1, var3, var4) == this.blockID ? true : (var1.getBlockId(var2 + 1, var3, var4) == this.blockID ? true : (var1.getBlockId(var2, var3, var4 - 1) == this.blockID ? true : var1.getBlockId(var2, var3, var4 + 1) == this.blockID)));
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		TileEntityChest var6 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
-		if(var6 != null) {
-			var6.func_35164_g();
-		}
-
+		this.validateChest(var1, var2, var3, var4);
+	}
+
+	public void onBlockPlacedBy(World world, int x, int y, int z, EntityLiving entityliving) {
+		int l1 = MathHelper.floor_double((double)((entityliving.rotationYaw * 4F) / 360F) + 0.5D) & 3;
+		float var4 = 1.0F;
+		float var5 = entityliving.prevRotationPitch + (entityliving.rotationPitch - entityliving.prevRotationPitch) * var4;
+		float var6 = entityliving.prevRotationYaw + (entityliving.rotationYaw - entityliving.prevRotationYaw) * var4;
+		double var7 = entityliving.prevPosX + (entityliving.posX - entityliving.prevPosX) * (double)var4;
+		double var9 = entityliving.prevPosY + (entityliving.posY - entityliving.prevPosY) * (double)var4 + 1.62D - (double)entityliving.yOffset;
+		double var11 = entityliving.prevPosZ + (entityliving.posZ - entityliving.prevPosZ) * (double)var4;
+		Vec3D var13 = Vec3D.createVector(var7, var9, var11);
+		float var14 = MathHelper.cos(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
+		float var15 = MathHelper.sin(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
+		float var16 = -MathHelper.cos(-var5 * ((float)Math.PI / 180.0F));
+		float var17 = MathHelper.sin(-var5 * ((float)Math.PI / 180.0F));
+		float var18 = var15 * var16;
+		float var20 = var14 * var16;
+		double var21 = 5.0D;
+		Vec3D var23 = var13.addVector((double)var18 * var21, (double)var17 * var21, (double)var20 * var21);
+		MovingObjectPosition var24 = world.rayTraceBlocks_do(var13, var23, false);
+
+		int side = var24.sideHit;
+		int type = l1 | 8;
+
+		if (entityliving.isSneaking() && side != 0 && side != 1) {
+			int x2 = x;
+			int z2 = z;
+
+			if (side == 2) x2++;
+			if (side == 3) x2--;
+			if (side == 4) z2--;
+			if (side == 5) z2++;
+
+			int metadata = world.getBlockMetadata(x2, y, z2);
+
+			if ((metadata >> 3 & 1) == 1) {
+				int direction = metadata & 3;
+				if (direction == 0 || direction == 2) {
+					if (side == 2) {
+						world.setBlockMetadata(x2, y, z2, direction);
+						type = direction | 4;
+					}
+
+					if (side == 3) {
+						world.setBlockMetadata(x2, y, z2, direction | 4);
+						type = direction;
+					}
+				}
+
+				if (direction == 1 || direction == 3) {
+					if (side == 5) {
+						world.setBlockMetadata(x2, y, z2, direction);
+						type = direction | 4;
+					}
+
+					if (side == 4) {
+						world.setBlockMetadata(x2, y, z2, direction | 4);
+						type = direction;
+					}
+				}
+			}
+		} else if (!entityliving.isSneaking()) {
+			if (l1 == 0) {
+				if (hasSingleChestInDirection(world, x - 1, y, z, l1) && !hasSingleChestInDirection(world, x + 1, y, z, l1)) {
+					type = l1;
+					world.setBlockMetadata(x - 1, y, z, l1 | 4);
+				}
+
+				if (hasSingleChestInDirection(world, x + 1, y, z, l1) && !hasSingleChestInDirection(world, x - 1, y, z, l1)) {
+					type = l1 | 4;
+					world.setBlockMetadata(x + 1, y, z, l1);
+				}
+			}
+
+			if (l1 == 1) {
+				if (hasSingleChestInDirection(world, x, y, z - 1, l1) && !hasSingleChestInDirection(world, x, y, z + 1, l1)) {
+					type = l1;
+					world.setBlockMetadata(x, y, z - 1, l1 | 4);
+				}
+
+				if (hasSingleChestInDirection(world, x, y, z + 1, l1) && !hasSingleChestInDirection(world, x, y, z - 1, l1)) {
+					type = l1 | 4;
+					world.setBlockMetadata(x, y, z + 1, l1);
+				}
+			}
+
+			if (l1 == 2) {
+				if (hasSingleChestInDirection(world, x + 1, y, z, l1) && !hasSingleChestInDirection(world, x - 1, y, z, l1)) {
+					type = l1 | 4;
+					world.setBlockMetadata(x + 1, y, z, l1);
+				}
+
+				if (hasSingleChestInDirection(world, x - 1, y, z, l1) && !hasSingleChestInDirection(world, x + 1, y, z, l1)) {
+					type = l1;
+					world.setBlockMetadata(x - 1, y, z, l1 | 4);
+				}
+			}
+
+			if (l1 == 3) {
+				if (hasSingleChestInDirection(world, x, y, z + 1, l1) && !hasSingleChestInDirection(world, x, y, z - 1, l1)) {
+					type = l1 | 4;
+					world.setBlockMetadata(x, y, z + 1, l1);
+				}
+
+				if (hasSingleChestInDirection(world, x, y, z - 1, l1) && !hasSingleChestInDirection(world, x, y, z + 1, l1)) {
+					type = l1;
+					world.setBlockMetadata(x, y, z - 1, l1 | 4);
+				}
+			}
+		}
+
+		world.setBlockMetadata(x, y, z, type);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int blockId) {
+		super.onNeighborBlockChange(world, x, y, z, blockId);
+		validateChest(world, x, y, z);
 	}
 
 	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
@@ -239,41 +172,106 @@
 	}
 
 	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		Object var6 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
-		if(var6 == null) {
-			return true;
-		} else if(var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-			return true;
-		} else if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID && var1.isBlockNormalCube(var2 - 1, var3 + 1, var4)) {
-			return true;
-		} else if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID && var1.isBlockNormalCube(var2 + 1, var3 + 1, var4)) {
-			return true;
-		} else if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID && var1.isBlockNormalCube(var2, var3 + 1, var4 - 1)) {
-			return true;
-		} else if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID && var1.isBlockNormalCube(var2, var3 + 1, var4 + 1)) {
-			return true;
-		} else {
-			if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2 - 1, var3, var4), (IInventory)var6);
-			}
-
-			if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2 + 1, var3, var4));
-			}
-
-			if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 - 1), (IInventory)var6);
-			}
-
-			if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 + 1));
-			}
-
-			if(var1.singleplayerWorld) {
-				return true;
-			} else {
-				var5.displayGUIChest((IInventory)var6);
-				return true;
+		if(var1.singleplayerWorld) {
+			return true;
+		} else {
+			validateChest(var1, var2, var3, var4);
+			var5.displayGUIChest(getInventory(var1, var2, var3, var4));
+			return true;
+		}
+	}
+
+	public IInventory getInventory(World world, int x, int y, int z) {
+		IInventory inventory = (IInventory) world.getBlockTileEntity(x, y, z);
+
+		int metadata = world.getBlockMetadata(x, y, z);
+		int type = metadata >> 2;
+
+		if (type < 2) {
+			IInventory inventory1 = null;
+
+			int direction = metadata & 3;
+
+			int x2 = x;
+			int z2 = z;
+
+			if (direction == 0 || direction == 2) {
+				if (type > 0) x2++;
+				if (type == 0) x2--;
+			}
+			if (direction == 1 || direction == 3) {
+				if (type > 0) z2++;
+				if (type == 0) z2--;
+			}
+
+			if (Block.blocksList[world.getBlockId(x2, y, z2)] instanceof BlockChest) {
+				int metadata2 = world.getBlockMetadata(x2, y, z2);
+				if ((metadata2 & 3) == direction) {
+					int type2 = metadata2 >> 2;
+					if (type > 0 && type2 == 0) {
+						inventory1 = (IInventory) world.getBlockTileEntity(x2, y, z2);
+					}
+
+					if (type == 0 && type2 > 0) {
+						inventory1 = inventory;
+						inventory = (IInventory) world.getBlockTileEntity(x2, y, z2);
+					}
+				}
+			}
+
+			if (inventory1 != null) {
+				inventory = new InventoryLargeChest("Large chest", inventory, inventory1);
+			}
+		}
+
+		return inventory;
+	}
+
+	public boolean hasSingleChestInDirection(World world, int x, int y, int z, int direction) {
+		if (world.getBlockId(x, y, z) == blockID) {
+			int metadata = world.getBlockMetadata(x, y, z);
+			int direction_ = metadata & 3;
+			return direction_ == direction && (metadata >> 3 & 1) == 1;
+		} else {
+			return false;
+		}
+	}
+
+	public void validateChest(World world, int x, int y, int z) {
+		int metadata = world.getBlockMetadata(x, y, z);
+		if ((metadata >> 3 & 1) == 0) {
+			int direction = metadata & 3;
+			int type = metadata >> 2 & 1;
+
+			int x2 = x;
+			int z2 = z;
+
+			if (direction == 0 || direction == 2) {
+				if (type > 0) x2++;
+				if (type == 0) x2--;
+			}
+			if (direction == 1 || direction == 3) {
+				if (type > 0) z2++;
+				if (type == 0) z2--;
+			}
+
+			boolean valid = false;
+
+			if (Block.blocksList[world.getBlockId(x2, y, z2)] instanceof BlockChest) {
+				int metadata2 = world.getBlockMetadata(x2, y, z2);
+				int direction2 = metadata2 & 3;
+
+				if (direction2 == direction) {
+					int type2 = metadata2 >> 2 & 1;
+					if ((type == 0 && type2 > 0) || (type > 0 && type2 == 0)) {
+						valid = true;
+					}
+				}
+			}
+
+			if (!valid) {
+				world.setBlockMetadataWithNotify(x, y, z, direction | 8);
+				world.markBlocksDirty(x, y, z, x, y, z);
 			}
 		}
 	}
--- net/minecraft/src/NoiseGeneratorOctaves.java
+++ net/minecraft/src/NoiseGeneratorOctaves.java
@@ -16,6 +16,16 @@
 
 	}
 
+	public NoiseGeneratorOctaves(int var2) {
+		this.field_938_b = var2;
+		this.generatorCollection = new NoiseGeneratorPerlin[var2];
+
+		for(int var3 = 0; var3 < var2; ++var3) {
+			this.generatorCollection[var3] = new NoiseGeneratorPerlin();
+		}
+
+	}
+
 	public double func_647_a(double var1, double var3) {
 		double var5 = 0.0D;
 		double var7 = 1.0D;
@@ -60,5 +70,17 @@
 
 	public double[] func_4103_a(double[] var1, int var2, int var3, int var4, int var5, double var6, double var8, double var10) {
 		return this.generateNoiseOctaves(var1, var2, 10, var3, var4, 1, var5, var6, 1.0D, var8);
+	}
+
+	public double generateNoise(double d1, double d3, double d5) {
+		double d7 = 0.0D;
+		double d9 = 1.0D;
+
+		for(int i11 = 0; i11 < this.field_938_b; ++i11) {
+			d7 += this.generatorCollection[i11].generateNoise(d1 * d9, d3 * d9, d5 * d9) / d9;
+			d9 /= 2.0D;
+		}
+
+		return d7;
 	}
 }
--- net/minecraft/src/BiomeGenTaiga.java
+++ net/minecraft/src/BiomeGenTaiga.java
@@ -7,10 +7,52 @@
 		super(var1);
 		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 8, 4, 4));
 		this.field_35523_u.field_35284_r = 10;
-		this.field_35523_u.field_35282_t = 1;
+		this.field_35523_u.field_35282_t = 2;
+		this.field_35523_u.field_35283_s = 4;
+		this.stoneBlockMetadata = 1;
 	}
 
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
-		return (WorldGenerator)(var1.nextInt(3) == 0 ? new WorldGenTaiga1() : new WorldGenTaiga2());
-	}
+		return var1.nextInt(3) == 0 ? this.field_35515_A : new WorldGenTrees(4 + var1.nextInt(7), 0, 0, true);
+	}
+
+	public WorldGenerator getRandomWorldGenForGrass(Random var1) {
+		return var1.nextInt(4) == 0 ? new WorldGenTallGrass(Block.tallGrass.blockID, 2) : new WorldGenTallGrass(Block.tallGrass.blockID, 1);
+	}
+
+	public void func_35513_a(World par1World, Random par2Random, int par3, int par4) {
+		super.func_35513_a(par1World, par2Random, par3, par4);
+		WorldGenerator worldGen = new WorldGenVines();
+
+		for (int i = 0; i < 50; i++) {
+			int j = par3 + par2Random.nextInt(16) + 8;
+			int byte0 = par2Random.nextInt(64);
+			int k = par4 + par2Random.nextInt(16) + 8;
+			worldGen.generate(par1World, par2Random, j, byte0, k);
+		}
+
+		worldGen = new WorldGenMinable(Block.cobblestoneMossy.blockID, 32);
+		for (int i = 0; i < 10; i++) {
+			int j = par3 + par2Random.nextInt(16);
+			int byte0 = par2Random.nextInt(64);
+			int k = par4 + par2Random.nextInt(16);
+			worldGen.generate(par1World, par2Random, j, byte0, k);
+		}
+
+		for(int i = 0; i < 9; ++i) {
+			int j = par3 + par2Random.nextInt(16) + 8;
+			int k = par2Random.nextInt(64);
+			int l = par4 + par2Random.nextInt(16) + 8;
+			WorldGenerator var5 = new WorldGenShrub(0, 0);
+			var5.generate(par1World, par2Random, j, k, l);
+		}
+
+		for(int i = 0; i < 6; ++i) {
+			int j = par3 + par2Random.nextInt(16) + 8;
+			int k = par2Random.nextInt(64);
+			int l = par4 + par2Random.nextInt(16) + 8;
+			WorldGenerator var5 = new WorldGenUndergroundTree();
+			var5.generate(par1World, par2Random, j, k, l);
+		}
+ 	}
 }
--- /dev/null
+++ net/minecraft/src/BiomeGenRockyBeach.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenRockyBeach extends BiomeGenBeach {
+    protected static final NoiseGeneratorOctaves rockNoise = new NoiseGeneratorOctaves(new Random("the rocks".hashCode()), 2);
+    private static final int[] surfaceBlocks = new int[]{Block.gravel.blockID, Block.cobblestone.blockID};
+
+    public BiomeGenRockyBeach(int var1) {
+        super(var1);
+        this.topBlock = (byte)Block.gravel.blockID;
+        this.fillerBlock = (byte)Block.cobblestone.blockID;
+    }
+
+    public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+        int block = (int) ((rockNoise.func_647_a((double)x * 0.045D, (double)z * 0.045D) * 2.0D) + random.nextFloat() * 1.25D);
+        int blockMetadata = (int) ((rockNoise.func_647_a((double)x * 0.025D, (double)z * 0.025D) * 3.0D) + random.nextFloat() * 1.5D);
+
+        this.topBlock = (byte) surfaceBlocks[block & 1];
+        this.topBlockMetadata = (byte) (this.topBlock == Block.cobblestone.blockID ? (blockMetadata & 3) % 3 : 0);
+        this.fillerBlockMetadata = (byte) getStoneMetadata(64, random);
+
+        super.buildBiomeSurface(world, random, blocks, metadata, x, z, heightValue, -100.0D);
+    }
+}
--- net/minecraft/src/BlockPistonBase.java
+++ net/minecraft/src/BlockPistonBase.java
@@ -232,8 +232,7 @@
 					break;
 				}
 
-				var0.getClass();
-				if(var6 >= 128 - 1) {
+				if(var6 >= 256 - 1) {
 					break;
 				}
 
@@ -276,8 +275,7 @@
 					break;
 				}
 
-				var1.getClass();
-				if(var7 >= 128 - 1) {
+				if(var7 >= 256 - 1) {
 					break;
 				}
 
--- net/minecraft/src/WorldGenTaiga2.java
+++ net/minecraft/src/WorldGenTaiga2.java
@@ -11,8 +11,7 @@
 		boolean var10 = true;
 		if(var4 >= 1) {
 			int var10000 = var4 + var6 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
+			if(var10000 <= 256) {
 				int var11;
 				int var13;
 				int var15;
@@ -28,8 +27,7 @@
 					for(var13 = var3 - var21; var13 <= var3 + var21 && var10; ++var13) {
 						for(int var14 = var5 - var21; var14 <= var5 + var21 && var10; ++var14) {
 							if(var11 >= 0) {
-								var1.getClass();
-								if(var11 < 128) {
+								if(var11 < 256) {
 									var15 = var1.getBlockId(var13, var11, var14);
 									if(var15 != 0 && var15 != Block.leaves.blockID) {
 										var10 = false;
@@ -49,8 +47,7 @@
 
 				var11 = var1.getBlockId(var3, var4 - 1, var5);
 				if(var11 == Block.grass.blockID || var11 == Block.dirt.blockID) {
-					var1.getClass();
-					if(var4 < 128 - var6 - 1) {
+					if(var4 < 256 - var6 - 1) {
 						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
 						var21 = var2.nextInt(2);
 						var13 = 1;
@@ -67,7 +64,7 @@
 								for(int var19 = var5 - var21; var19 <= var5 + var21; ++var19) {
 									int var20 = var19 - var5;
 									if((Math.abs(var18) != var21 || Math.abs(var20) != var21 || var21 <= 0) && !Block.opaqueCubeLookup[var1.getBlockId(var17, var16, var19)]) {
-										var1.setBlockAndMetadata(var17, var16, var19, Block.leaves.blockID, 1);
+										var1.setBlockAndMetadata(var17, var16, var19, Block.leaves.blockID, 3);
 									}
 								}
 							}
@@ -89,7 +86,7 @@
 						for(var16 = 0; var16 < var6 - var15; ++var16) {
 							var17 = var1.getBlockId(var3, var4 + var16, var5);
 							if(var17 == 0 || var17 == Block.leaves.blockID) {
-								var1.setBlockAndMetadata(var3, var4 + var16, var5, Block.wood.blockID, 1);
+								var1.setBlockAndMetadata(var3, var4 + var16, var5, Block.wood.blockID, 3);
 							}
 						}
 
--- /dev/null
+++ net/minecraft/src/BlockAsh.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class BlockAsh extends BlockSand {
+	public BlockAsh(int var1, int var2) {
+		super(var1, var2);
+	}
+
+	protected int damageDropped(int var1) {
+		return 0;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.blockIndexInTexture;
+	}
+}
--- net/minecraft/src/BlockStairs.java
+++ net/minecraft/src/BlockStairs.java
@@ -5,10 +5,16 @@
 
 public class BlockStairs extends Block {
 	private Block modelBlock;
-
-	protected BlockStairs(int var1, Block var2) {
+	private int modelMetadata;
+
+ 	protected BlockStairs(int var1, Block var2) {
+		this(var1, var2, 0);
+	}
+
+	protected BlockStairs(int var1, Block var2, int var3) {
 		super(var1, var2.blockIndexInTexture, var2.blockMaterial);
 		this.modelBlock = var2;
+		this.modelMetadata = var3;
 		this.setHardness(var2.blockHardness);
 		this.setResistance(var2.blockResistance / 3.0F);
 		this.setStepSound(var2.stepSound);
@@ -70,20 +76,12 @@
 		return this.modelBlock.getExplosionResistance(var1);
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return this.modelBlock.idDropped(var1, var2);
-	}
-
-	public int quantityDropped(Random var1) {
-		return this.modelBlock.quantityDropped(var1);
-	}
-
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, 0);
+		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, this.modelMetadata);
 	}
 
 	public int getBlockTextureFromSide(int var1) {
-		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, 0);
+		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, this.modelMetadata);
 	}
 
 	public int tickRate() {
@@ -113,10 +111,6 @@
 
 	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
 		this.modelBlock.onBlockRemoval(var1, var2, var3, var4);
-	}
-
-	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		this.modelBlock.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
 	}
 
 	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
--- net/minecraft/src/Chunk.java
+++ net/minecraft/src/Chunk.java
@@ -18,7 +18,7 @@
 	public NibbleArray data;
 	public NibbleArray skylightMap;
 	public NibbleArray blocklightMap;
-	public byte[] heightMap;
+	public int[] heightMap;
 	public int lowestBlockHeight;
 	public final int xPosition;
 	public final int zPosition;
@@ -41,11 +41,11 @@
 		this.lastSaveTime = 0L;
 		this.field_35638_u = false;
 		var1.getClass();
-		this.entities = new List[128 / 16];
+		this.entities = new List[256 / 16];
 		this.worldObj = var1;
 		this.xPosition = var2;
 		this.zPosition = var3;
-		this.heightMap = new byte[256];
+		this.heightMap = new int[256];
 
 		for(int var4 = 0; var4 < this.entities.length; ++var4) {
 			this.entities[var4] = new ArrayList();
@@ -57,15 +57,9 @@
 	public Chunk(World var1, byte[] var2, int var3, int var4) {
 		this(var1, var3, var4);
 		this.blocks = var2;
-		int var10003 = var2.length;
-		var1.getClass();
-		this.data = new NibbleArray(var10003, 7);
-		var10003 = var2.length;
-		var1.getClass();
-		this.skylightMap = new NibbleArray(var10003, 7);
-		var10003 = var2.length;
-		var1.getClass();
-		this.blocklightMap = new NibbleArray(var10003, 7);
+		this.data = new NibbleArray(var2.length, 8);
+		this.skylightMap = new NibbleArray(var2.length, 8);
+		this.blocklightMap = new NibbleArray(var2.length, 8);
 	}
 
 	public boolean isAtLocation(int var1, int var2) {
@@ -73,39 +67,33 @@
 	}
 
 	public int getHeightValue(int var1, int var2) {
-		return this.heightMap[var2 << 4 | var1] & 255;
+		return this.heightMap[var2 << 4 | var1];
 	}
 
 	public void func_348_a() {
 	}
 
 	public void generateSkylightMap() {
-		this.worldObj.getClass();
-		int var1 = 128 - 1;
+		int var1 = 256 - 1;
 
 		int var2;
 		int var3;
 		for(var2 = 0; var2 < 16; ++var2) {
 			for(var3 = 0; var3 < 16; ++var3) {
-				this.worldObj.getClass();
-				int var4 = 128 - 1;
-				this.worldObj.getClass();
-				int var10000 = var2 << 11;
-				this.worldObj.getClass();
+				int var4 = 256 - 1;
 
 				int var5;
-				for(var5 = var10000 | var3 << 7; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1] & 255] == 0; --var4) {
+				for(var5 = var2 << 12 | var3 << 8; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1] & 255] == 0; --var4) {
 				}
 
-				this.heightMap[var3 << 4 | var2] = (byte)var4;
+				this.heightMap[var3 << 4 | var2] = var4;
 				if(var4 < var1) {
 					var1 = var4;
 				}
 
 				if(!this.worldObj.worldProvider.hasNoSky) {
 					int var6 = 15;
-					this.worldObj.getClass();
-					int var7 = 128 - 1;
+					int var7 = 256 - 1;
 
 					do {
 						var6 -= Block.lightOpacity[this.blocks[var5 + var7] & 255];
@@ -205,22 +193,18 @@
 	}
 
 	private void relightBlock(int var1, int var2, int var3) {
-		int var4 = this.heightMap[var3 << 4 | var1] & 255;
+		int var4 = this.heightMap[var3 << 4 | var1];
 		int var5 = var4;
 		if(var2 > var4) {
 			var5 = var2;
 		}
 
-		this.worldObj.getClass();
-		int var10000 = var1 << 11;
-		this.worldObj.getClass();
-
-		for(int var6 = var10000 | var3 << 7; var5 > 0 && Block.lightOpacity[this.blocks[var6 + var5 - 1] & 255] == 0; --var5) {
+		for(int var6 = var1 << 12 | var3 << 8; var5 > 0 && Block.lightOpacity[this.blocks[var6 + var5 - 1] & 255] == 0; --var5) {
 		}
 
 		if(var5 != var4) {
 			this.worldObj.markBlocksDirtyVertical(var1, var3, var5, var4);
-			this.heightMap[var3 << 4 | var1] = (byte)var5;
+			this.heightMap[var3 << 4 | var1] = var5;
 			int var7;
 			int var8;
 			int var9;
@@ -228,12 +212,12 @@
 				this.lowestBlockHeight = var5;
 			} else {
 				this.worldObj.getClass();
-				var7 = 128 - 1;
+				var7 = 256 - 1;
 
 				for(var8 = 0; var8 < 16; ++var8) {
 					for(var9 = 0; var9 < 16; ++var9) {
-						if((this.heightMap[var9 << 4 | var8] & 255) < var7) {
-							var7 = this.heightMap[var9 << 4 | var8] & 255;
+						if((this.heightMap[var9 << 4 | var8]) < var7) {
+							var7 = this.heightMap[var9 << 4 | var8];
 						}
 					}
 				}
@@ -266,7 +250,7 @@
 				}
 			}
 
-			byte var15 = this.heightMap[var3 << 4 | var1];
+			int var15 = this.heightMap[var3 << 4 | var1];
 			int var12 = var4;
 			int var13 = var15;
 			if(var15 < var4) {
@@ -284,11 +268,7 @@
 	}
 
 	public int getBlockID(int var1, int var2, int var3) {
-		byte[] var10000 = this.blocks;
-		this.worldObj.getClass();
-		int var10001 = var1 << 11;
-		this.worldObj.getClass();
-		return var10000[var10001 | var3 << 7 | var2] & 255;
+		return this.blocks[var1 << 12 | var3 << 8 | var2] & 255;
 	}
 
 	public boolean setBlockIDWithMetadata(int var1, int var2, int var3, int var4, int var5) {
@@ -298,22 +278,14 @@
 			this.field_35637_c[var7] = -999;
 		}
 
-		int var8 = this.heightMap[var3 << 4 | var1] & 255;
-		byte[] var10000 = this.blocks;
-		this.worldObj.getClass();
-		int var10001 = var1 << 11;
-		this.worldObj.getClass();
-		int var9 = var10000[var10001 | var3 << 7 | var2] & 255;
+		int var8 = this.heightMap[var3 << 4 | var1];
+		int var9 = this.blocks[var1 << 12 | var3 << 8 | var2] & 255;
 		if(var9 == var4 && this.data.getNibble(var1, var2, var3) == var5) {
 			return false;
 		} else {
 			int var10 = this.xPosition * 16 + var1;
 			int var11 = this.zPosition * 16 + var3;
-			var10000 = this.blocks;
-			this.worldObj.getClass();
-			var10001 = var1 << 11;
-			this.worldObj.getClass();
-			var10000[var10001 | var3 << 7 | var2] = (byte)(var6 & 255);
+			this.blocks[var1 << 12 | var3 << 8 | var2] = (byte)(var6 & 255);
 			if(var9 != 0 && !this.worldObj.singleplayerWorld) {
 				Block.blocksList[var9].onBlockRemoval(this.worldObj, var10, var2, var11);
 			}
@@ -370,22 +342,14 @@
 			this.field_35637_c[var6] = -999;
 		}
 
-		int var7 = this.heightMap[var6] & 255;
-		byte[] var10000 = this.blocks;
-		this.worldObj.getClass();
-		int var10001 = var1 << 11;
-		this.worldObj.getClass();
-		int var8 = var10000[var10001 | var3 << 7 | var2] & 255;
+		int var7 = this.heightMap[var6];
+		int var8 = this.blocks[var1 << 12 | var3 << 8 | var2] & 255;
 		if(var8 == var4) {
 			return false;
 		} else {
 			int var9 = this.xPosition * 16 + var1;
 			int var10 = this.zPosition * 16 + var3;
-			var10000 = this.blocks;
-			this.worldObj.getClass();
-			var10001 = var1 << 11;
-			this.worldObj.getClass();
-			var10000[var10001 | var3 << 7 | var2] = (byte)(var5 & 255);
+			this.blocks[var1 << 12 | var3 << 8 | var2] = (byte)(var5 & 255);
 			if(var8 != 0) {
 				Block.blocksList[var8].onBlockRemoval(this.worldObj, var9, var2, var10);
 			}
@@ -524,7 +488,7 @@
 	}
 
 	public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
-		return var2 >= (this.heightMap[var3 << 4 | var1] & 255);
+		return var2 >= (this.heightMap[var3 << 4 | var1]);
 	}
 
 	public TileEntity getChunkBlockTileEntity(int var1, int var2, int var3) {
@@ -703,10 +667,7 @@
 			int var10000;
 			for(var12 = var2; var12 < var5; ++var12) {
 				for(var13 = var4; var13 < var7; ++var13) {
-					this.worldObj.getClass();
-					var10000 = var12 << 11;
-					this.worldObj.getClass();
-					var14 = var10000 | var13 << 7 | var3;
+					var14 = var12 << 12 | var13 << 8 | var3;
 					var15 = var6 - var3;
 					System.arraycopy(this.blocks, var14, var1, var8, var15);
 					var8 += var15;
@@ -715,10 +676,7 @@
 
 			for(var12 = var2; var12 < var5; ++var12) {
 				for(var13 = var4; var13 < var7; ++var13) {
-					this.worldObj.getClass();
-					var10000 = var12 << 11;
-					this.worldObj.getClass();
-					var14 = (var10000 | var13 << 7 | var3) >> 1;
+					var14 = (var12 << 12 | var13 << 8 | var3) >> 1;
 					var15 = (var6 - var3) / 2;
 					System.arraycopy(this.data.data, var14, var1, var8, var15);
 					var8 += var15;
@@ -727,10 +685,7 @@
 
 			for(var12 = var2; var12 < var5; ++var12) {
 				for(var13 = var4; var13 < var7; ++var13) {
-					this.worldObj.getClass();
-					var10000 = var12 << 11;
-					this.worldObj.getClass();
-					var14 = (var10000 | var13 << 7 | var3) >> 1;
+					var14 = (var12 << 12 | var13 << 8 | var3) >> 1;
 					var15 = (var6 - var3) / 2;
 					System.arraycopy(this.blocklightMap.data, var14, var1, var8, var15);
 					var8 += var15;
@@ -739,10 +694,7 @@
 
 			for(var12 = var2; var12 < var5; ++var12) {
 				for(var13 = var4; var13 < var7; ++var13) {
-					this.worldObj.getClass();
-					var10000 = var12 << 11;
-					this.worldObj.getClass();
-					var14 = (var10000 | var13 << 7 | var3) >> 1;
+					var14 = (var12 << 12 | var13 << 8 | var3) >> 1;
 					var15 = (var6 - var3) / 2;
 					System.arraycopy(this.skylightMap.data, var14, var1, var8, var15);
 					var8 += var15;
@@ -785,7 +737,7 @@
 		int var4 = this.field_35637_c[var3];
 		if(var4 == -999) {
 			this.worldObj.getClass();
-			int var5 = 128 - 1;
+			int var5 = 256 - 1;
 			var4 = -1;
 
 			while(true) {
--- net/minecraft/src/RecipesArmor.java
+++ net/minecraft/src/RecipesArmor.java
@@ -14,5 +14,6 @@
 			}
 		}
 
+		var1.addRecipe(new ItemStack(Item.flippers), "X X", "# #", "# #", 'X', Item.ingotIron, '#', Item.leather);
 	}
 }
--- net/minecraft/src/BlockStoneBrick.java
+++ net/minecraft/src/BlockStoneBrick.java
@@ -6,14 +6,7 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		switch(var2) {
-		case 1:
-			return 100;
-		case 2:
-			return 101;
-		default:
-			return 54;
-		}
+		return ((var2 & 3) == 1 ? 100 : (var2 & 3) == 2 ? 101 : 54) + (var2 >> 2) * 256;
 	}
 
 	protected int damageDropped(int var1) {
--- net/minecraft/src/WorldChunkManager.java
+++ net/minecraft/src/WorldChunkManager.java
@@ -18,6 +18,8 @@
 		this.field_35143_f.add(BiomeGenBase.forest);
 		this.field_35143_f.add(BiomeGenBase.swampland);
 		this.field_35143_f.add(BiomeGenBase.taiga);
+		this.field_35143_f.add(BiomeGenBase.oasis);
+		this.field_35143_f.add(BiomeGenBase.field_35520_c);
 	}
 
 	public WorldChunkManager(World var1) {
--- /dev/null
+++ net/minecraft/src/BlockMultitype.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class BlockMultitype extends Block {
+	protected BlockMultitype(int var1, int var2, Material var3) {
+		super(var1, var2, var3);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.blockIndexInTexture + var2 * 256;
+	}
+
+	protected int damageDropped(int var1) {
+		return var1;
+	}
+}
--- net/minecraft/src/BlockSand.java
+++ net/minecraft/src/BlockSand.java
@@ -22,10 +22,17 @@
 	}
 
 	private void tryToFall(World var1, int var2, int var3, int var4) {
+		if (var3 > 64 && this.blockID == Block.sand.blockID) {
+			int a = var1.getBlockMetadata(var2, var3, var4);
+			a += 2;
+		}
+
+		int meta = var1.getBlockMetadata(var2, var3, var4);
+
 		if(canFallBelow(var1, var2, var3 - 1, var4) && var3 >= 0) {
 			byte var8 = 32;
 			if(!fallInstantly && var1.checkChunksExist(var2 - var8, var3 - var8, var4 - var8, var2 + var8, var3 + var8, var4 + var8)) {
-				EntityFallingSand var9 = new EntityFallingSand(var1, (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), this.blockID);
+				EntityFallingSand var9 = new EntityFallingSand(var1, (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), this.blockID, meta);
 				var1.entityJoinedWorld(var9);
 			} else {
 				var1.setBlockWithNotify(var2, var3, var4, 0);
@@ -35,7 +42,7 @@
 				}
 
 				if(var3 > 0) {
-					var1.setBlockWithNotify(var2, var3, var4, this.blockID);
+					var1.setBlockAndMetadataWithNotify(var2, var3, var4, this.blockID, meta);
 				}
 			}
 		}
@@ -56,5 +63,13 @@
 			Material var5 = Block.blocksList[var4].blockMaterial;
 			return var5 == Material.water ? true : var5 == Material.lava;
 		}
+	}
+
+	protected int damageDropped(int var1) {
+		return var1 & 3;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.blockIndexInTexture + var2 * 256;
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenCoral.java
@@ -1,0 +1,49 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenCoral extends WorldGenerator {
+	private static final int[] coralTypes = {
+			1,
+			2,
+			3,
+			4,
+			5,
+			6,
+			9,
+			10,
+			11,
+			13,
+			14
+	};
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int coralType = coralTypes[var2.nextInt(coralTypes.length)];
+
+		if (var1.getBlockMaterial(var3, var4, var5) != Material.water
+				|| var1.getBlockMaterial(var3, var4 - 1, var5) == Material.water
+				|| var1.isAirBlock(var3, var4 - 1, var5)) {
+			return false;
+		}
+
+		int radius = var2.nextInt(4) + 2;
+		for (int x = -radius; x <= radius; x++) {
+			for (int y = -radius; y <= radius; y++) {
+				for (int z = -radius; z <= radius; z++) {
+					int b = var1.getBlockId(var3 + x, var4 + y, var5 + z);
+					if (b != 0 && b != Block.waterStill.blockID && b != Block.waterMoving.blockID) {
+						continue;
+					}
+
+					if ((x * x + y * y + z * z) < var2.nextDouble() * radius * radius
+							&& !var1.isAirBlock(var3 + x, var4 + y + 1, var5 + z)
+							&& (!var1.isAirBlock(var3 + x, var4 + y + 2, var5 + z) || var2.nextInt(2) == 0)) {
+						var1.setBlockAndMetadata(var3 + x, var4 + y, var5 + z, Block.coral.blockID, coralType);
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/EntityPlayer.java
+++ net/minecraft/src/EntityPlayer.java
@@ -44,6 +44,7 @@
 	protected float field_35215_P = 0.02F;
 	private int damageRemainder = 0;
 	public EntityFish fishEntity = null;
+	private boolean drainThirst;
 
 	public EntityPlayer(World var1) {
 		super(var1);
@@ -263,6 +264,15 @@
 	}
 
 	public void onLivingUpdate() {
+		this.drainThirst = false;
+		if(this.worldObj.difficultySetting > 0 && this.worldObj.isDaytime() && !this.isWet() && !this.worldObj.singleplayerWorld) {
+			float var1 = this.getEntityBrightness(1.0F);
+			if(var1 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ))) {
+				this.drainThirst = true;
+			}
+		}
+
+
 		if(this.field_35216_n > 0) {
 			--this.field_35216_n;
 		}
@@ -677,7 +687,7 @@
 	}
 
 	public boolean isEntityInsideOpaqueBlock() {
-		return !this.sleeping && super.isEntityInsideOpaqueBlock();
+		return !this.sleeping && !this.noClip && super.isEntityInsideOpaqueBlock();
 	}
 
 	public EnumStatus sleepInBedAt(int var1, int var2, int var3) {
@@ -973,6 +983,10 @@
 	public void func_35198_b(float var1) {
 		if(!this.field_35214_K.field_35660_a) {
 			if(!this.worldObj.singleplayerWorld) {
+				if (this.drainThirst) {
+					var1 *= 1.5F;
+				}
+
 				this.field_35217_m.func_35583_a(var1);
 			}
 
@@ -1017,4 +1031,13 @@
 	public String func_35150_Y() {
 		return this.username;
 	}
+
+	public boolean isThirstDraining() {
+		return this.drainThirst;
+	}
+
+	public boolean fastSwim() {
+		ItemStack feet = this.inventory.armorInventory[3];
+		return feet != null && feet.itemID == Item.flippers.shiftedIndex;
+ 	}
 }
--- net/minecraft/src/FurnaceRecipes.java
+++ net/minecraft/src/FurnaceRecipes.java
@@ -24,6 +24,10 @@
 		this.addSmelting(Item.clay.shiftedIndex, new ItemStack(Item.brick));
 		this.addSmelting(Block.cactus.blockID, new ItemStack(Item.dyePowder, 1, 2));
 		this.addSmelting(Block.wood.blockID, new ItemStack(Item.coal, 1, 1));
+		this.addSmelting(Item.impureWaterBottle.shiftedIndex, new ItemStack(Item.waterBottle));
+		this.addSmelting(Item.impureWaterBowl.shiftedIndex, new ItemStack(Item.waterBowl));
+		this.addSmelting(Item.rawIron.shiftedIndex, new ItemStack(Item.ingotIron));
+		this.addSmelting(Item.rawGold.shiftedIndex, new ItemStack(Item.ingotGold));
 	}
 
 	public void addSmelting(int var1, ItemStack var2) {
--- net/minecraft/src/BlockFluid.java
+++ net/minecraft/src/BlockFluid.java
@@ -9,6 +9,7 @@
 		float var4 = 0.0F;
 		this.setBlockBounds(0.0F + var4, 0.0F + var3, 0.0F + var4, 1.0F + var4, 1.0F + var3, 1.0F + var4);
 		this.setTickOnLoad(true);
+		canBlockGrass[var1] = true;
 	}
 
 	public static float getFluidHeightPercent(int var0) {
@@ -21,7 +22,7 @@
 	}
 
 	public int getBlockTextureFromSide(int var1) {
-		return var1 != 0 && var1 != 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
+		return var1 == 6 ? this.blockIndexInTexture + 16 : var1 != 0 && var1 != 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
 	}
 
 	protected int getFlowDecay(World var1, int var2, int var3, int var4) {
--- /dev/null
+++ net/minecraft/src/WorldGenPalmtree.java
@@ -1,0 +1,52 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenPalmtree extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int ground = var1.getBlockId(var3, var4 - 1, var5);
+		if (ground != Block.grass.blockID && ground != Block.sand.blockID) {
+			return false;
+		}
+
+		int height = var2.nextInt(5) + 3;
+		int height2 = var2.nextInt(2) + 1;
+		int height3 = var2.nextInt(2);
+		int heightTotal = height + height2 + height3;
+
+		{
+			int dir = var2.nextInt(4);
+			int dirX = dir == 0 ? 1 : dir == 2 ? -1 : 0;
+			int dirZ = dir == 1 ? 1 : dir == 3 ? -1 : 0;
+
+			for (int y = 0; y < heightTotal; y++) {
+				if (y == height || y == height + height2) {
+					var3 += dirX;
+					var5 += dirZ;
+				}
+				var1.setBlockAndMetadata(var3, var4 + y, var5, Block.wood.blockID, 1);
+			}
+		}
+
+		var4 += heightTotal;
+		if (var1.isAirBlock(var3, var4, var5)) {
+			var1.setBlockAndMetadata(var3, var4, var5, Block.leaves.blockID, 1);
+		}
+
+		for (int dir = 0; dir < 4; dir++) {
+			int dirX = dir == 0 ? 1 : dir == 2 ? -1 : 0;
+			int dirZ = dir == 1 ? 1 : dir == 3 ? -1 : 0;
+
+			for (int i = 1; i < 4; i++) {
+				if (i <= 2 && var1.isAirBlock(var3 + dirX * i, var4, var5 + dirZ * i)) {
+					var1.setBlockAndMetadata(var3 + dirX * i, var4, var5 + dirZ * i, Block.leaves.blockID, 1);
+				}
+				if (i >= 2 && var1.isAirBlock(var3 + dirX * i, var4 - 1, var5 + dirZ * i)) {
+					var1.setBlockAndMetadata(var3 + dirX * i, var4 - 1, var5 + dirZ * i, Block.leaves.blockID, 1);
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/GenLayerIsland.java
+++ net/minecraft/src/GenLayerIsland.java
@@ -8,32 +8,58 @@
 
 	public int[] func_35018_a(int var1, int var2, int var3, int var4) {
 		int var5 = var1 - 1;
-		int var6 = var2 - 1;
-		int var7 = var3 + 2;
-		int var8 = var4 + 2;
-		int[] var9 = this.field_35023_a.func_35018_a(var5, var6, var7, var8);
-		int[] var10 = IntCache.func_35549_a(var3 * var4);
-
-		for(int var11 = 0; var11 < var4; ++var11) {
-			for(int var12 = 0; var12 < var3; ++var12) {
-				int var13 = var9[var12 + 0 + (var11 + 0) * var7];
-				int var14 = var9[var12 + 2 + (var11 + 0) * var7];
-				int var15 = var9[var12 + 0 + (var11 + 2) * var7];
-				int var16 = var9[var12 + 2 + (var11 + 2) * var7];
-				int var17 = var9[var12 + 1 + (var11 + 1) * var7];
-				this.func_35017_a((long)(var12 + var1), (long)(var11 + var2));
-				if(var17 != 0 || var13 == 0 && var14 == 0 && var15 == 0 && var16 == 0) {
-					if(var17 != 1 || var13 == 1 && var14 == 1 && var15 == 1 && var16 == 1) {
-						var10[var12 + var11 * var3] = var17;
-					} else {
-						var10[var12 + var11 * var3] = 1 - this.func_35016_a(5) / 4;
-					}
-				} else {
-					var10[var12 + var11 * var3] = 0 + this.func_35016_a(3) / 2;
-				}
-			}
-		}
-
-		return var10;
+        int var6 = var2 - 1;
+        int var7 = var3 + 2;
+        int var8 = var4 + 2;
+        int[] var9 = this.field_35023_a.func_35018_a(var5, var6, var7, var8);
+        int[] var10 = IntCache.func_35549_a(var3 * var4);
+
+        for (int var11 = 0; var11 < var4; ++var11) {
+            for (int var12 = 0; var12 < var3; ++var12) {
+                int var13 = var9[var12 + 0 + (var11 + 0) * var7];
+                int var14 = var9[var12 + 2 + (var11 + 0) * var7];
+                int var15 = var9[var12 + 0 + (var11 + 2) * var7];
+                int var16 = var9[var12 + 2 + (var11 + 2) * var7];
+                int var17 = var9[var12 + 1 + (var11 + 1) * var7];
+                this.func_35017_a((long) (var12 + var1), (long) (var11 + var2));
+
+                if (var17 == 0 && (var13 != 0 || var14 != 0 || var15 != 0 || var16 != 0)) {
+                    int var18 = 1;
+                    int var19 = 1;
+
+                    if (var13 != 0 && this.func_35016_a(var18++) == 0) {
+                        var19 = var13;
+                    }
+
+                    if (var14 != 0 && this.func_35016_a(var18++) == 0) {
+                        var19 = var14;
+                    }
+
+                    if (var15 != 0 && this.func_35016_a(var18++) == 0) {
+                        var19 = var15;
+                    }
+
+                    if (var16 != 0 && this.func_35016_a(var18++) == 0) {
+                        var19 = var16;
+                    }
+
+                    if (this.func_35016_a(3) == 0) {
+                        var10[var12 + var11 * var3] = var19;
+                    } else {
+                        var10[var12 + var11 * var3] = 0;
+                    }
+                } else if (var17 > 0 && (var13 == 0 || var14 == 0 || var15 == 0 || var16 == 0)) {
+                    if (this.func_35016_a(5) == 0) {
+                        var10[var12 + var11 * var3] = 0;
+                    } else {
+                        var10[var12 + var11 * var3] = var17;
+                    }
+                } else {
+                    var10[var12 + var11 * var3] = var17;
+                }
+            }
+        }
+
+        return var10;
 	}
 }
--- net/minecraft/src/ChunkLoader.java
+++ net/minecraft/src/ChunkLoader.java
@@ -114,7 +114,7 @@
 		var2.setByteArray("Data", var0.data.data);
 		var2.setByteArray("SkyLight", var0.skylightMap.data);
 		var2.setByteArray("BlockLight", var0.blocklightMap.data);
-		var2.setByteArray("HeightMap", var0.heightMap);
+		var2.setIntArray("HeightMap", var0.heightMap);
 		var2.setBoolean("TerrainPopulated", var0.isTerrainPopulated);
 		var0.hasEntities = false;
 		NBTTagList var3 = new NBTTagList();
@@ -154,35 +154,29 @@
 		Chunk var4 = new Chunk(var0, var2, var3);
 		var4.blocks = var1.getByteArray("Blocks");
 		byte[] var10003 = var1.getByteArray("Data");
-		var0.getClass();
-		var4.data = new NibbleArray(var10003, 7);
+		var4.data = new NibbleArray(var10003, 8);
 		var10003 = var1.getByteArray("SkyLight");
-		var0.getClass();
-		var4.skylightMap = new NibbleArray(var10003, 7);
+		var4.skylightMap = new NibbleArray(var10003, 8);
 		var10003 = var1.getByteArray("BlockLight");
-		var0.getClass();
-		var4.blocklightMap = new NibbleArray(var10003, 7);
-		var4.heightMap = var1.getByteArray("HeightMap");
+		var4.blocklightMap = new NibbleArray(var10003, 8);
+		var4.heightMap = var1.getIntArray("HeightMap");
 		var4.isTerrainPopulated = var1.getBoolean("TerrainPopulated");
 		int var13;
 		if(!var4.data.isValid()) {
 			var13 = var4.blocks.length;
-			var0.getClass();
-			var4.data = new NibbleArray(var13, 7);
+			var4.data = new NibbleArray(var13, 8);
 		}
 
 		if(var4.heightMap == null || !var4.skylightMap.isValid()) {
-			var4.heightMap = new byte[256];
+			var4.heightMap = new int[256];
 			var13 = var4.blocks.length;
-			var0.getClass();
-			var4.skylightMap = new NibbleArray(var13, 7);
+			var4.skylightMap = new NibbleArray(var13, 8);
 			var4.generateSkylightMap();
 		}
 
 		if(!var4.blocklightMap.isValid()) {
 			var13 = var4.blocks.length;
-			var0.getClass();
-			var4.blocklightMap = new NibbleArray(var13, 7);
+			var4.blocklightMap = new NibbleArray(var13, 8);
 			var4.func_348_a();
 		}
 
--- net/minecraft/src/BlockStep.java
+++ net/minecraft/src/BlockStep.java
@@ -3,11 +3,11 @@
 import java.util.Random;
 
 public class BlockStep extends Block {
-	public static final String[] field_35062_a = new String[]{"stone", "sand", "wood", "cobble", "brick", "smoothStoneBrick"};
+	public static final String[] field_35062_a = new String[]{"stone", "sand", "wood", "cobble", "brick", "smoothStoneBrick", "limestone", "granite", "basalt", "smoothLimestoneBrick", "smoothGraniteBrick", "smoothBasaltBrick", "cobbledLimestone", "cobbledGranite", "cobbledBasalt"};
 	private boolean blockType;
 
-	public BlockStep(int var1, boolean var2) {
-		super(var1, 6, Material.rock);
+	public BlockStep(int var1, boolean var2, Material var3) {
+		super(var1, 6, var3);
 		this.blockType = var2;
 		if(!var2) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
@@ -16,9 +16,28 @@
 		this.setLightOpacity(255);
 	}
 
+	public BlockStep getSingleForm() {
+		return (BlockStep)Block.stairSingle;
+	}
+
+	public BlockStep getDoubleForm() {
+		return (BlockStep)Block.stairDouble;
+	}
+
+	public String[] getTypeNames() {
+		return field_35062_a;
+	}
+
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var2 == 0 ? (var1 <= 1 ? 6 : 5) : (var2 == 1 ? (var1 == 0 ? 208 : (var1 == 1 ? 176 : 192)) : (var2 == 2 ? 4 : (var2 == 3 ? 16 : (var2 == 4 ? Block.brick.blockIndexInTexture : (var2 == 5 ? Block.field_35052_bn.blockIndexInTexture : 6)))));
-	}
+		return ((var2 == 0 || var2 == 6 || var2 == 7 || var2 == 8) ? (var1 <= 1 ? 6 : 5)
+						: (var2 == 1 ? (var1 == 0 ? 208 : (var1 == 1 ? 176 : 192))
+						: (var2 == 2 ? 4
+						: (var2 == 3 || var2 == 12 || var2 == 13 || var2 == 14 ? 16
+						: (var2 == 4 ? Block.brick.blockIndexInTexture
+						: (var2 == 5 || var2 == 9 || var2 == 10 || var2 == 11 ? Block.field_35052_bn.blockIndexInTexture
+						: 6))))))
+				+ (var2 == 6 || var2 == 9 || var2 == 12 ? 1 : var2 == 7 || var2 == 10 || var2 == 13 ? 2 : var2 == 8 || var2 == 11 || var2 == 14 ? 3 : 0) * 256;
+ 	}
 
 	public int getBlockTextureFromSide(int var1) {
 		return this.getBlockTextureFromSideAndMetadata(var1, 0);
@@ -29,7 +48,7 @@
 	}
 
 	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(this != Block.stairSingle) {
+		if(!this.blockType) {
 			super.onBlockAdded(var1, var2, var3, var4);
 		}
 
@@ -37,9 +56,9 @@
 		int var6 = var1.getBlockMetadata(var2, var3, var4);
 		int var7 = var1.getBlockMetadata(var2, var3 - 1, var4);
 		if(var6 == var7) {
-			if(var5 == stairSingle.blockID) {
+			if(var5 == this.getSingleForm().blockID) {
 				var1.setBlockWithNotify(var2, var3, var4, 0);
-				var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, Block.stairDouble.blockID, var6);
+				var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, this.getDoubleForm().blockID, var6);
 			}
 
 		}
--- net/minecraft/src/WorldGenMinable.java
+++ net/minecraft/src/WorldGenMinable.java
@@ -5,12 +5,40 @@
 public class WorldGenMinable extends WorldGenerator {
 	private int minableBlockId;
 	private int numberOfBlocks;
+	private int minClayY;
+	private int maxClayY;
+	private boolean inClay;
+	private boolean inheritStoneType;
+	private boolean normalStoneOnly;
+	private boolean clayOnly;
 
 	public WorldGenMinable(int var1, int var2) {
 		this.minableBlockId = var1;
 		this.numberOfBlocks = var2;
 	}
 
+	public WorldGenMinable inClay(int min, int max) {
+		this.inClay = true;
+		this.minClayY = min;
+		this.maxClayY = max;
+		return this;
+	}
+
+	public WorldGenMinable inheritStoneType() {
+		this.inheritStoneType = true;
+		return this;
+	}
+
+	public WorldGenMinable normalStoneOnly() {
+		this.normalStoneOnly = true;
+		return this;
+	}
+
+	public WorldGenMinable clayOnly() {
+		this.clayOnly = true;
+		return this;
+	}
+
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		float var6 = var2.nextFloat() * (float)Math.PI;
 		double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
@@ -42,8 +70,20 @@
 						if(var39 * var39 + var42 * var42 < 1.0D) {
 							for(int var44 = var34; var44 <= var37; ++var44) {
 								double var45 = ((double)var44 + 0.5D - var24) / (var28 / 2.0D);
-								if(var39 * var39 + var42 * var42 + var45 * var45 < 1.0D && var1.getBlockId(var38, var41, var44) == Block.stone.blockID) {
-									var1.setBlock(var38, var41, var44, this.minableBlockId);
+								int b = var1.getBlockId(var38, var41, var44);
+								int m = var1.getBlockMetadata(var38, var41, var44);
+								if(var39 * var39 + var42 * var42 + var45 * var45 < 1.0D &&
+										((!this.clayOnly && b == Block.stone.blockID && (!this.normalStoneOnly || m == 0))
+												|| (this.inClay && (var41 < maxClayY && var41 > minClayY) && b == Block.hardenedClay.blockID))) {
+									int meta = 0;
+									if (this.inheritStoneType) {
+										if (b == Block.hardenedClay.blockID) {
+											meta = 2;
+										} else {
+											meta = m;
+										}
+									}
+									var1.setBlockAndMetadata(var38, var41, var44, this.minableBlockId, meta);
 								}
 							}
 						}
--- net/minecraft/src/Entity.java
+++ net/minecraft/src/Entity.java
@@ -559,9 +559,7 @@
 	public float getEntityBrightness(float var1) {
 		int var2 = MathHelper.floor_double(this.posX);
 		int var3 = MathHelper.floor_double(this.posZ);
-		World var10000 = this.worldObj;
-		this.worldObj.getClass();
-		if(var10000.blockExists(var2, 128 / 2, var3)) {
+		if(this.worldObj.blockExists(var2, 128 / 2, var3)) {
 			double var4 = (this.boundingBox.maxY - this.boundingBox.minY) * 0.66D;
 			int var6 = MathHelper.floor_double(this.posY - (double)this.yOffset + var4);
 			return this.worldObj.getLightBrightness(var2, var6, var3);
@@ -743,7 +741,7 @@
 		this.readEntityFromNBT(var1);
 	}
 
-	protected final String getEntityString() {
+	public final String getEntityString() {
 		return EntityList.getEntityString(this);
 	}
 
--- net/minecraft/src/WorldGenPumpkin.java
+++ net/minecraft/src/WorldGenPumpkin.java
@@ -9,7 +9,7 @@
 			int var8 = var4 + var2.nextInt(4) - var2.nextInt(4);
 			int var9 = var5 + var2.nextInt(8) - var2.nextInt(8);
 			if(var1.isAirBlock(var7, var8, var9) && var1.getBlockId(var7, var8 - 1, var9) == Block.grass.blockID && Block.pumpkin.canPlaceBlockAt(var1, var7, var8, var9)) {
-				var1.setBlockAndMetadata(var7, var8, var9, Block.pumpkin.blockID, var2.nextInt(4));
+				var1.setBlockAndMetadata(var7, var8, var9, Block.field_35048_bs.blockID, var2.nextInt(4));
 			}
 		}
 
--- net/minecraft/src/MapGenMineshaft.java
+++ net/minecraft/src/MapGenMineshaft.java
@@ -2,7 +2,10 @@
 
 public class MapGenMineshaft extends MapGenStructure {
 	protected boolean func_35531_a(int var1, int var2) {
-		return this.rand.nextInt(80) == 0 && this.rand.nextInt(80) < Math.max(Math.abs(var1), Math.abs(var2));
+		BiomeGenBase biome = this.field_35530_d.getWorldChunkManager().getBiomeGenAt(var1, var2);
+		if (biome == BiomeGenBase.volcanicIsland) return false;
+		int chance = biome instanceof BiomeGenBadlands ? 40 : 80;
+		return this.rand.nextInt(chance) == 0 && this.rand.nextInt(chance) < Math.max(Math.abs(var1), Math.abs(var2));
 	}
 
 	protected StructureStart func_35533_b(int var1, int var2) {
--- /dev/null
+++ net/minecraft/src/WorldGenUndergroundLava.java
@@ -1,0 +1,33 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenUndergroundLava extends WorldGenerator {
+	private static final NoiseGeneratorOctaves noiseGenLava = new NoiseGeneratorOctaves(new Random("OOH, HAWT and SPICY!!!".hashCode()), 4);
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		for (int x = var3; x < var3 + 16; x++) {
+			for (int z = var5; z < var5 + 16; z++) {
+				for (int y = 0; y < var4; y++) {
+					if (var1.isAirBlock(x, y + 1, z)
+							&& var1.isBlockNormalCube(x, y, z)
+							&& var1.isBlockNormalCube(x, y - 1, z)
+							&& suitableLavaNeighbor(var1, x + 1, y, z)
+							&& suitableLavaNeighbor(var1, x - 1, y, z)
+							&& suitableLavaNeighbor(var1, x, y, z + 1)
+							&& suitableLavaNeighbor(var1, x, y, z - 1)
+							&& noiseGenLava.func_647_a(x, z) > 1.0D
+					) {
+						var1.setBlock(x, y, z, Block.lavaStill.blockID);
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+
+	private static boolean suitableLavaNeighbor(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y, z) || world.getBlockMaterial(x, y, z) == Material.lava;
+	}
+}
--- net/minecraft/src/BiomeGenOcean.java
+++ net/minecraft/src/BiomeGenOcean.java
@@ -1,8 +1,15 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class BiomeGenOcean extends BiomeGenBase {
 	public BiomeGenOcean(int var1) {
 		super(var1);
 		this.spawnableCreatureList.clear();
+		this.field_35523_u.field_35284_r = 1;
 	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return this.field_35483_D;
+ 	}
 }
--- net/minecraft/src/ItemSlab.java
+++ net/minecraft/src/ItemSlab.java
@@ -1,22 +1,33 @@
 package net.minecraft.src;
 
 public class ItemSlab extends ItemBlock {
-	public ItemSlab(int var1) {
+	private final BlockStep modelSlab;
+
+	public ItemSlab(int var1, BlockStep var2) {
 		super(var1);
+		this.modelSlab = var2;
 		this.setMaxDamage(0);
 		this.setHasSubtypes(true);
 	}
 
-	public int getMetadata(int var1) {
+	public int getIconFromDamage(int var1) {
+		return this.modelSlab.getBlockTextureFromSideAndMetadata(2, var1);
+	}
+
+	public int getPlacedBlockMetadata(int var1) {
 		return var1;
 	}
 
-	public String func_35407_a(ItemStack var1) {
+	public String getItemNameIS(ItemStack var1) {
+		if (this.modelSlab.getTypeNames() == null) {
+			return super.getItemName();
+		}
+
 		int var2 = var1.getItemDamage();
-		if(var2 < 0 || var2 >= BlockStep.field_35062_a.length) {
+		if(var2 < 0 || var2 >= this.modelSlab.getTypeNames().length) {
 			var2 = 0;
 		}
 
-		return super.getItemName() + "." + BlockStep.field_35062_a[var2];
+		return super.getItemName() + "." + this.modelSlab.getTypeNames()[var2];
 	}
 }
--- net/minecraft/src/BiomeGenBase.java
+++ net/minecraft/src/BiomeGenBase.java
@@ -5,26 +5,39 @@
 import java.util.Random;
 
 public abstract class BiomeGenBase {
+	public static final boolean[] oceans = new boolean[256];
 	public static final BiomeGenBase[] field_35521_a = new BiomeGenBase[256];
-	public static final BiomeGenBase field_35519_b = (new BiomeGenOcean(0)).setColor(112).setBiomeName("Ocean").func_35511_b(-1.0F, 0.5F);
-	public static final BiomeGenBase field_35520_c = (new BiomeGenPlains(1)).setColor(9286496).setBiomeName("Plains").func_35512_a(0.8F, 0.4F);
-	public static final BiomeGenBase desert = (new BiomeGenDesert(2)).setColor(16421912).setBiomeName("Desert").setDisableRain().func_35512_a(2.0F, 0.0F).func_35511_b(0.1F, 0.2F);
-	public static final BiomeGenBase field_35518_e = (new BiomeGenHills(3)).setColor(6316128).setBiomeName("Extreme Hills").func_35511_b(0.2F, 1.8F).func_35512_a(0.2F, 0.3F);
-	public static final BiomeGenBase forest = (new BiomeGenForest(4)).setColor(353825).setBiomeName("Forest").func_4080_a(5159473).func_35512_a(0.7F, 0.8F);
-	public static final BiomeGenBase taiga = (new BiomeGenTaiga(5)).setColor(747097).setBiomeName("Taiga").func_4080_a(5159473).func_35512_a(0.3F, 0.8F).func_35511_b(0.1F, 0.4F);
-	public static final BiomeGenBase swampland = (new BiomeGenSwamp(6)).setColor(522674).setBiomeName("Swampland").func_4080_a(9154376).func_35511_b(-0.2F, 0.1F).func_35512_a(0.8F, 0.9F);
-	public static final BiomeGenBase field_35522_i = (new BiomeGenRiver(7)).setColor(255).setBiomeName("River").func_35511_b(-0.5F, 0.0F);
+	public static final BiomeGenBase field_35519_b = (new BiomeGenOcean(0)).setColor(112).setBiomeName("Ocean").func_35511_b(-1.0F, 1.0F).setOcean();
+	public static final BiomeGenBase field_35520_c = (new BiomeGenPlains(1)).setColor(9286496).setBiomeName("Savanna").func_35512_a(1.2F, 0.0F);
+	public static final BiomeGenBase desert = (new BiomeGenDesert(2)).setColor(16421912).setBiomeName("Desert").setDisableRain().func_35512_a(2.0F, 0.0F).func_35511_b(0.3F, 0.2F);
+	public static final BiomeGenBase field_35518_e = (new BiomeGenHills(3)).setColor(6316128).setBiomeName("Extreme Hills").func_35511_b(0.5F, 1.8F).func_35512_a(1.0F, 0.5F);
+	public static final BiomeGenBase forest = (new BiomeGenForest(4)).setColor(353825).setBiomeName("Forest").func_4080_a(5159473).func_35512_a(0.8F, 0.9F);
+	public static final BiomeGenBase taiga = (new BiomeGenTaiga(5)).setColor(747097).setBiomeName("Rainforest").func_4080_a(5159473).func_35512_a(1.0F, 1.0F).func_35511_b(0.0F, 1.0F);
+	public static final BiomeGenBase swampland = (new BiomeGenSwamp(6)).setColor(522674).setBiomeName("Swampland").func_4080_a(9154376).func_35511_b(-0.2F, 0.2F).func_35512_a(0.7F, 1.0F);
+	public static final BiomeGenBase field_35522_i = (new BiomeGenRiver(7)).setColor(255).setBiomeName("River").func_35511_b(-0.8F, 0.0F);
 	public static final BiomeGenBase hell = (new BiomeGenHell(8)).setColor(16711680).setBiomeName("Hell").setDisableRain();
 	public static final BiomeGenBase sky = (new BiomeGenSky(9)).setColor(8421631).setBiomeName("Sky").setDisableRain();
+	public static final BiomeGenBase oasis = (new BiomeGenOasis(10)).setColor(747097).setBiomeName("Oasis").func_4080_a(5159473).func_35512_a(1.0F, 1.0F).func_35511_b(0.0F, 0.1F);
+	public static final BiomeGenBase badlands = (new BiomeGenBadlands(11)).setColor(747097).setBiomeName("Badlands").func_4080_a(5159473).func_35512_a(2.0F, 0.0F).func_35511_b(1.0F, 2.5F);
+	public static final BiomeGenBase woodedBadlands = (new BiomeGenBadlands(12)).wooded().setColor(747097).setBiomeName("Wooded Badlands").func_4080_a(5159473).func_35512_a(2.0F, 0.0F).func_35511_b(2.0F, 4.0F);
+	public static final BiomeGenBase coralReef = (new BiomeGenCoralReef(13)).setColor(112).setBiomeName("Coral Reef").func_35511_b(-0.8F, 0.2F).func_35512_a(1.0F, 1.0F).setOcean();
+	public static final BiomeGenBase volcanicIsland = (new BiomeGenVolcanicIsland(14)).setColor(112).setBiomeName("Volcanic Island").func_35511_b(-0.8F, 0.2F).func_35512_a(1.0F, 0.0F).setOcean();
+	public static final BiomeGenBase beach = (new BiomeGenBeach(15)).setColor(112).setBiomeName("Beach").func_35511_b(0.0F, 0.0F);
+	public static final BiomeGenBase hillyBeach = (new BiomeGenBeach(16)).setColor(112).setBiomeName("Hilly Beach").func_35511_b(0.0F, 0.3F);
+	public static final BiomeGenBase rainbowBeach = (new BiomeGenBeach(17)).sandType(2).setColor(112).setBiomeName("Pearlsand Beach").func_35511_b(0.0F, 0.0F);
+	public static final BiomeGenBase rockyBeach = (new BiomeGenRockyBeach(18)).setColor(112).setBiomeName("Rocky Beach").func_35511_b(0.0F, 0.0F);
 	public String biomeName;
 	public int color;
 	public byte topBlock = (byte)Block.grass.blockID;
+	public byte topBlockMetadata = 0;
 	public byte fillerBlock = (byte)Block.dirt.blockID;
+	public byte fillerBlockMetadata = 0;
+	public byte stoneBlockMetadata = 0;
 	public int field_6161_q = 5169201;
 	public float field_35527_q = 0.1F;
 	public float field_35526_r = 0.3F;
-	public float field_35525_s = 0.5F;
-	public float field_35524_t = 0.5F;
+	public float field_35525_s = 0.8F;
+	public float field_35524_t = 0.8F;
 	public BiomeDecorator field_35523_u;
 	protected List spawnableMonsterList = new ArrayList();
 	protected List spawnableCreatureList = new ArrayList();
@@ -32,10 +45,12 @@
 	private boolean enableSnow;
 	private boolean enableRain = true;
 	public final int field_35529_y;
+	public int heightCutoff = 0;
 	protected WorldGenTrees field_35528_z = new WorldGenTrees();
 	protected WorldGenBigTree field_35515_A = new WorldGenBigTree();
 	protected WorldGenForest field_35516_B = new WorldGenForest();
 	protected WorldGenSwamp field_35517_C = new WorldGenSwamp();
+	protected WorldGenPalmtree field_35483_D = new WorldGenPalmtree();
 
 	protected BiomeGenBase(int var1) {
 		this.field_35529_y = var1;
@@ -54,6 +69,12 @@
 		this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
 	}
 
+	public BiomeGenBase setOcean() {
+		oceans[this.field_35529_y] = true;
+		return this;
+	}
+
+
 	protected BiomeDecorator func_35514_a() {
 		return new BiomeDecorator(this);
 	}
@@ -76,8 +97,12 @@
 	}
 
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
-		return (WorldGenerator)(var1.nextInt(10) == 0 ? this.field_35515_A : this.field_35528_z);
+		return (WorldGenerator)(var1.nextInt(10) == 0 ? this.field_35515_A : new WorldGenTrees(4 + var1.nextInt(7), 0, 0, true));
 	}
+
+	public WorldGenerator getRandomWorldGenForGrass(Random random) {
+		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
+ 	}
 
 	protected BiomeGenBase setBiomeName(String var1) {
 		this.biomeName = var1;
@@ -121,4 +146,102 @@
 	public void func_35513_a(World var1, Random var2, int var3, int var4) {
 		this.field_35523_u.func_35255_a(var1, var2, var3, var4);
 	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+		this.buildDefaultSurface(world, random, blocks, metadata, x, z, heightValue, desertValue);
+	}
+
+	public int getStoneMetadata(int y, Random random) {
+		return y < 24 - random.nextInt(4) ? 2 : this.stoneBlockMetadata;
+	}
+
+	public final void buildDefaultSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+		int top = this.topBlock;
+		byte topMetadata = (byte)(this.topBlockMetadata & 15);
+		byte fillerMetadata = (byte)(this.fillerBlockMetadata & 15);
+		int filler = this.fillerBlock;
+		int sandStoneHeight = -1;
+		double topSand = desertValue + random.nextDouble() * 0.2D;
+		int height = (int)(heightValue / 3.0D + 3.0D + random.nextDouble() * 0.25D);
+		int chunkX = x & 15;
+		int chunkZ = z & 15;
+
+		for (int y = 255; y >= 0; --y) {
+			int index = chunkX << 12 | chunkZ << 8 | y;
+
+			if (y <= random.nextInt(5)) {
+				blocks[index] = (byte) Block.bedrock.blockID;
+			} else {
+				byte block = blocks[index];
+
+				if (block > 0) {
+					if (block == Block.stone.blockID) {
+						if (sandStoneHeight == -1) {
+							if (height <= 0) {
+								top = 0;
+								topMetadata = 0;
+								filler = Block.stone.blockID;
+								fillerMetadata = (byte) this.getStoneMetadata(y, random);
+							} else if (y >= 63 - 4 && y <= 63 + 11 + random.nextInt(4)) {
+								top = this.topBlock;
+								topMetadata = (byte)(this.topBlockMetadata & 255);
+								filler = this.fillerBlock;
+								fillerMetadata = (byte)(this.fillerBlockMetadata & 255);
+
+								if (topSand > (y <= 64 ? 0.0D : 2.5D)) {
+									top = (byte)Block.sand.blockID;
+									topMetadata = 0;
+									filler = (byte)Block.sand.blockID;
+									fillerMetadata = 0;
+								}
+							}
+
+							if (y < 63 && top == 0) {
+								top = Block.waterStill.blockID;
+								topMetadata = 0;
+							}
+
+							sandStoneHeight = height;
+
+							if (y >= 63 - 1) {
+								blocks[index] = (byte) top;
+								metadata[index] = topMetadata;
+							} else if (y < 63 - 7 - height) {
+								top = 0;
+								filler = (byte) Block.stone.blockID;
+								fillerMetadata = (byte) this.getStoneMetadata(y, random);
+								if (blocks[index + 1] == Block.waterStill.blockID) {
+									blocks[index] = (byte) Block.gravel.blockID;
+								} else {
+									blocks[index] = (byte) filler;
+									metadata[index] = fillerMetadata;
+								}
+							} else {
+								blocks[index] = (byte) filler;
+								metadata[index] = fillerMetadata;
+							}
+						} else if (sandStoneHeight > 0) {
+							--sandStoneHeight;
+							blocks[index] = (byte) filler;
+							metadata[index] = (byte) fillerMetadata;
+
+							if (sandStoneHeight == 0 && filler == Block.sand.blockID) {
+								sandStoneHeight = random.nextInt(4) + Math.max(0, y - 63);
+								filler = Block.sandStone.blockID;
+								if (this.fillerBlock == Block.sand.blockID) {
+									fillerMetadata = (byte)(this.fillerBlockMetadata & 255);
+								}
+							}
+						}
+
+						if (blocks[index] == Block.stone.blockID) {
+							metadata[index] = (byte) this.getStoneMetadata(y, random);
+						}
+					}
+				} else {
+					sandStoneHeight = -1;
+				}
+			}
+		}
+ 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenShrub.java
@@ -1,0 +1,44 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenShrub extends WorldGenerator {
+    private int field_48197_a;
+    private int field_48196_b;
+
+    public WorldGenShrub(int par1, int par2) {
+        field_48196_b = par1;
+        field_48197_a = par2;
+    }
+
+    public boolean generate(World par1World, Random par2Random, int par3, int par4, int par5) {
+        for (int i = 0; ((i = par1World.getBlockId(par3, par4, par5)) == 0 || i == Block.leaves.blockID) && par4 > 0; par4--) {
+        }
+
+        int j = par1World.getBlockId(par3, par4, par5);
+
+        if (j == Block.dirt.blockID || j == Block.grass.blockID || j == Block.stone.blockID) {
+            par4++;
+            par1World.setBlockAndMetadata(par3, par4, par5, Block.wood.blockID, field_48196_b);
+
+            for (int k = par4; k <= par4 + 2; k++) {
+                int l = k - par4;
+                int i1 = 2 - l;
+
+                for (int j1 = par3 - i1; j1 <= par3 + i1; j1++) {
+                    int k1 = j1 - par3;
+
+                    for (int l1 = par5 - i1; l1 <= par5 + i1; l1++) {
+                        int i2 = l1 - par5;
+
+                        if ((Math.abs(k1) != i1 || Math.abs(i2) != i1 || par2Random.nextInt(2) != 0) && !Block.opaqueCubeLookup[par1World.getBlockId(j1, k, l1)]) {
+                            par1World.setBlockAndMetadata(j1, k, l1, Block.leaves.blockID, field_48197_a);
+                        }
+                    }
+                }
+            }
+        }
+
+        return true;
+    }
+}
--- net/minecraft/src/WorldGenBigTree.java
+++ net/minecraft/src/WorldGenBigTree.java
@@ -4,16 +4,16 @@
 
 public class WorldGenBigTree extends WorldGenerator {
 	static final byte[] otherCoordPairs = new byte[]{(byte)2, (byte)0, (byte)0, (byte)1, (byte)2, (byte)1};
-	Random random0 = new Random();
+	Random rand = new Random();
 	World worldObj;
 	int[] basePos = new int[]{0, 0, 0};
 	int heightLimit = 0;
 	int height;
 	double heightAttenuation = 0.618D;
-	double field_753_h = 1.0D;
-	double field_752_i = 0.381D;
-	double field_751_j = 1.0D;
-	double field_750_k = 1.0D;
+	double field_875_h = 1.0D;
+	double field_874_i = 0.381D;
+	double field_873_j = 1.0D;
+	double field_872_k = 1.0D;
 	int trunkSize = 1;
 	int heightLimitLimit = 12;
 	int leafDistanceLimit = 4;
@@ -25,7 +25,7 @@
 			this.height = this.heightLimit - 1;
 		}
 
-		int var1 = (int)(1.382D + Math.pow(this.field_750_k * (double)this.heightLimit / 13.0D, 2.0D));
+		int var1 = (int)(1.382D + Math.pow(this.field_872_k * (double)this.heightLimit / 13.0D, 2.0D));
 		if(var1 < 1) {
 			var1 = 1;
 		}
@@ -44,14 +44,14 @@
 		while(true) {
 			while(var6 >= 0) {
 				int var7 = 0;
-				float var8 = this.func_431_a(var6);
+				float var8 = this.func_528_a(var6);
 				if(var8 < 0.0F) {
 					--var3;
 					--var6;
 				} else {
 					for(double var9 = 0.5D; var7 < var1; ++var7) {
-						double var11 = this.field_751_j * (double)var8 * ((double)this.random0.nextFloat() + 0.328D);
-						double var13 = (double)this.random0.nextFloat() * 2.0D * 3.14159D;
+						double var11 = this.field_873_j * (double)var8 * ((double)this.rand.nextFloat() + 0.328D);
+						double var13 = (double)this.rand.nextFloat() * 2.0D * 3.14159D;
 						int var15 = MathHelper.floor_double(var11 * Math.sin(var13) + (double)this.basePos[0] + var9);
 						int var16 = MathHelper.floor_double(var11 * Math.cos(var13) + (double)this.basePos[2] + var9);
 						int[] var17 = new int[]{var15, var3, var16};
@@ -59,7 +59,7 @@
 						if(this.checkBlockLine(var17, var18) == -1) {
 							int[] var19 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
 							double var20 = Math.sqrt(Math.pow((double)Math.abs(this.basePos[0] - var17[0]), 2.0D) + Math.pow((double)Math.abs(this.basePos[2] - var17[2]), 2.0D));
-							double var22 = var20 * this.field_752_i;
+							double var22 = var20 * this.field_874_i;
 							if((double)var17[1] - var22 > (double)var5) {
 								var19[1] = var5;
 							} else {
@@ -87,7 +87,7 @@
 		}
 	}
 
-	void func_426_a(int var1, int var2, int var3, float var4, byte var5, int var6) {
+	void func_523_a(int var1, int var2, int var3, float var4, byte var5, int var6) {
 		int var7 = (int)((double)var4 + 0.618D);
 		byte var8 = otherCoordPairs[var5];
 		byte var9 = otherCoordPairs[var5 + 3];
@@ -117,6 +117,17 @@
 							++var13;
 						} else {
 							this.worldObj.setBlock(var11[0], var11[1], var11[2], var6);
+
+							int x = var11[0];
+							int z = var11[2];
+
+							if (var15 > var4 - 1) {
+								if (this.rand.nextInt(4) == 0) this.placeVines(x - 1, var11[1], z, 8);
+								if (this.rand.nextInt(4) == 0) this.placeVines(x + 1, var11[1], z, 2);
+								if (this.rand.nextInt(4) == 0) this.placeVines(x, var11[1], z - 1, 1);
+								if (this.rand.nextInt(4) == 0) this.placeVines(x, var11[1], z + 1, 4);
+							}
+
 							++var13;
 						}
 					}
@@ -126,7 +137,7 @@
 
 	}
 
-	float func_431_a(int var1) {
+	float func_528_a(int var1) {
 		if((double)var1 < (double)((float)this.heightLimit) * 0.3D) {
 			return -1.618F;
 		} else {
@@ -146,7 +157,7 @@
 		}
 	}
 
-	float func_429_b(int var1) {
+	float func_526_b(int var1) {
 		return var1 >= 0 && var1 < this.leafDistanceLimit ? (var1 != 0 && var1 != this.leafDistanceLimit - 1 ? 3.0F : 2.0F) : -1.0F;
 	}
 
@@ -154,8 +165,8 @@
 		int var4 = var2;
 
 		for(int var5 = var2 + this.leafDistanceLimit; var4 < var5; ++var4) {
-			float var6 = this.func_429_b(var4 - var2);
-			this.func_426_a(var1, var4, var3, var6, (byte)1, 18);
+			float var6 = this.func_526_b(var4 - var2);
+			this.func_523_a(var1, var4, var3, var6, (byte)1, 18);
 		}
 
 	}
@@ -192,8 +203,26 @@
 				var14[var7] = MathHelper.floor_double((double)var1[var7] + (double)var15 * var10 + 0.5D);
 				var14[var8] = MathHelper.floor_double((double)var1[var8] + (double)var15 * var12 + 0.5D);
 				this.worldObj.setBlock(var14[0], var14[1], var14[2], var3);
+
+				int x = var14[0];
+				int z = var14[2];
+
+				if (this.rand.nextInt(4) == 0) this.placeVines(x - 1, var14[1], z, 8);
+				if (this.rand.nextInt(4) == 0) this.placeVines(x + 1, var14[1], z, 2);
+				if (this.rand.nextInt(4) == 0) this.placeVines(x, var14[1], z - 1, 1);
+				if (this.rand.nextInt(4) == 0) this.placeVines(x, var14[1], z + 1, 4);
 			}
 
+		}
+	}
+
+	void placeVines(int x, int y, int z, int d) {
+		if (!this.worldObj.checkChunksExist(x, y, z, x, y, z) || !this.worldObj.isAirBlock(x, y, z)) return;
+
+		int length = 2 + rand.nextInt(4);
+
+		for (int i = 0; i < length && this.worldObj.isAirBlock(x, y - i, z); i++) {
+			this.worldObj.setBlockAndMetadata(x, y - i, z, Block.field_35045_bv.blockID, d);
 		}
 	}
 
@@ -314,26 +343,26 @@
 		}
 	}
 
-	public void func_420_a(double var1, double var3, double var5) {
+	public void func_517_a(double var1, double var3, double var5) {
 		this.heightLimitLimit = (int)(var1 * 12.0D);
 		if(var1 > 0.5D) {
 			this.leafDistanceLimit = 5;
 		}
 
-		this.field_751_j = var3;
-		this.field_750_k = var5;
+		this.field_873_j = var3;
+		this.field_872_k = var5;
 	}
 
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		this.worldObj = var1;
 		long var6 = var2.nextLong();
-		this.random0.setSeed(var6);
+		this.rand.setSeed(var6);
 		this.basePos[0] = var3;
 		this.basePos[1] = var4;
 		this.basePos[2] = var5;
-		if(this.heightLimit == 0) {
-			this.heightLimit = 5 + this.random0.nextInt(this.heightLimitLimit);
-		}
+		// Nasty height limit bug removed
+		this.heightLimit = 8 + this.rand.nextInt(this.heightLimitLimit);
+		this.trunkSize = this.heightLimit < 15 ? 1 : 2;
 
 		if(!this.validTreeLocation()) {
 			return false;
--- net/minecraft/src/BlockSandStone.java
+++ net/minecraft/src/BlockSandStone.java
@@ -8,4 +8,13 @@
 	public int getBlockTextureFromSide(int var1) {
 		return var1 == 1 ? this.blockIndexInTexture - 16 : (var1 == 0 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture);
 	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return (var1 == 1 ? this.blockIndexInTexture - 16 : (var1 == 0 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture))
+				+ var2 * 256;
+	}
+
+	protected int damageDropped(int var1) {
+		return var1 & 3;
+	}
 }
--- net/minecraft/src/MapGenCavesHell.java
+++ net/minecraft/src/MapGenCavesHell.java
@@ -80,10 +80,8 @@
 						var53 = 1;
 					}
 
-					this.field_35530_d.getClass();
-					if(var36 > 128 - 8) {
-						this.field_35530_d.getClass();
-						var36 = 128 - 8;
+					if(var36 > 256 - 8) {
+						var36 = 256 - 8;
 					}
 
 					if(var54 < 0) {
@@ -96,18 +94,14 @@
 
 					boolean var55 = false;
 
-					int var10000;
 					int var40;
 					int var43;
 					for(var40 = var52; !var55 && var40 < var34; ++var40) {
 						for(int var41 = var54; !var55 && var41 < var38; ++var41) {
 							for(int var42 = var36 + 1; !var55 && var42 >= var53 - 1; --var42) {
-								var10000 = var40 * 16 + var41;
-								this.field_35530_d.getClass();
-								var43 = var10000 * 128 + var42;
+								var43 = var40 << 12 | var41 << 8 | var42;
 								if(var42 >= 0) {
-									this.field_35530_d.getClass();
-									if(var42 < 128) {
+									if(var42 < 256) {
 										if(var3[var43] == Block.lavaMoving.blockID || var3[var43] == Block.lavaStill.blockID) {
 											var55 = true;
 										}
@@ -127,9 +121,7 @@
 
 							for(var43 = var54; var43 < var38; ++var43) {
 								double var44 = ((double)(var43 + var2 * 16) + 0.5D - var8) / var27;
-								var10000 = var40 * 16 + var43;
-								this.field_35530_d.getClass();
-								int var46 = var10000 * 128 + var36;
+								int var46 = var40 << 12 | var43 << 8 | var36;
 
 								for(int var47 = var36 - 1; var47 >= var53; --var47) {
 									double var48 = ((double)var47 + 0.5D - var6) / var29;
@@ -155,7 +147,7 @@
 
 	}
 
-	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
+	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6, byte[] var6a) {
 		int var7 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(10) + 1) + 1);
 		if(this.rand.nextInt(5) != 0) {
 			var7 = 0;
@@ -163,9 +155,7 @@
 
 		for(int var8 = 0; var8 < var7; ++var8) {
 			double var9 = (double)(var2 * 16 + this.rand.nextInt(16));
-			Random var10000 = this.rand;
-			var1.getClass();
-			double var11 = (double)var10000.nextInt(128);
+			double var11 = (double)this.rand.nextInt(128);
 			double var13 = (double)(var3 * 16 + this.rand.nextInt(16));
 			int var15 = 1;
 			if(this.rand.nextInt(4) == 0) {
--- /dev/null
+++ net/minecraft/src/GenLayerBiomeVariants.java
@@ -1,0 +1,28 @@
+package net.minecraft.src;
+
+public class GenLayerBiomeVariants extends GenLayer {
+	public GenLayerBiomeVariants(long var1, GenLayer var2) {
+		super(var1);
+		this.field_35023_a = var2;
+	}
+
+	public int[] func_35018_a(int var1, int var2, int var3, int var4) {
+		int[] input = this.field_35023_a.func_35018_a(var1, var2, var3, var4);
+		int[] output = IntCache.func_35549_a(var3 * var4);
+
+		for (int z = 0; z < var4; z++) {
+			for (int x = 0; x < var3; x++) {
+				this.func_35017_a(z + var1, x + var2);
+				int biome = input[z + x * var3];
+
+				if (biome == BiomeGenBase.badlands.field_35529_y && this.func_35016_a(3) == 0) {
+					biome = BiomeGenBase.woodedBadlands.field_35529_y;
+				}
+
+				output[z + x * var3] = biome;
+			}
+		}
+
+		return output;
+	}
+}
--- /dev/null
+++ net/minecraft/src/GenLayerRemoveTooMuchOcean.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+public class GenLayerRemoveTooMuchOcean extends GenLayer {
+	public GenLayerRemoveTooMuchOcean(long var1, GenLayer var3) {
+		super(var1);
+		this.field_35023_a = var3;
+	}
+
+	public int[] func_35018_a(int var1, int var2, int var3, int var4) {
+		int var5 = var1 - 1;
+        int var6 = var2 - 1;
+        int var7 = var3 + 2;
+        int var8 = var4 + 2;
+        int[] var9 = this.field_35023_a.func_35018_a(var5, var6, var7, var8);
+        int[] var10 = IntCache.func_35549_a(var3 * var4);
+
+        for (int var11 = 0; var11 < var4; ++var11) {
+            for (int var12 = 0; var12 < var3; ++var12) {
+                int var13 = var9[var12 + 1 + (var11 + 1 - 1) * (var3 + 2)];
+                int var14 = var9[var12 + 1 + 1 + (var11 + 1) * (var3 + 2)];
+                int var15 = var9[var12 + 1 - 1 + (var11 + 1) * (var3 + 2)];
+                int var16 = var9[var12 + 1 + (var11 + 1 + 1) * (var3 + 2)];
+                int var17 = var9[var12 + 1 + (var11 + 1) * var7];
+                var10[var12 + var11 * var3] = var17;
+                this.func_35017_a((long) (var12 + var1), (long) (var11 + var2));
+
+                if (var17 == 0 && var13 == 0 && var14 == 0 && var15 == 0 && var16 == 0
+                        && this.func_35016_a(2) == 0) {
+                    var10[var12 + var11 * var3] = 1;
+                }
+            }
+        }
+
+        return var10;
+	}
+}
--- net/minecraft/src/WorldGenForest.java
+++ net/minecraft/src/WorldGenForest.java
@@ -3,87 +3,156 @@
 import java.util.Random;
 
 public class WorldGenForest extends WorldGenerator {
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		int var6 = var2.nextInt(3) + 5;
+	public boolean generate(World world, Random random, int x, int y, int z) {
+		int var6 = random.nextInt(3) + random.nextInt(3) + 5;
 		boolean var7 = true;
-		if(var4 >= 1) {
-			int var10000 = var4 + var6 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
-				int var8;
-				int var10;
-				int var11;
-				int var12;
-				for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
-					byte var9 = 1;
-					if(var8 == var4) {
-						var9 = 0;
-					}
-
-					if(var8 >= var4 + 1 + var6 - 2) {
-						var9 = 2;
-					}
-
-					for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
-						for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-							if(var8 >= 0) {
-								var1.getClass();
-								if(var8 < 128) {
-									var12 = var1.getBlockId(var10, var8, var11);
-									if(var12 != 0 && var12 != Block.leaves.blockID) {
-										var7 = false;
-									}
-									continue;
-								}
+
+		if (y >= 1 && y + var6 + 1 <= 256) {
+			int var10;
+			int var11;
+
+			for (int var8 = y; var8 <= y + 1 + var6; ++var8) {
+				byte var9 = 1;
+
+				if (var8 == y) {
+					var9 = 0;
+				}
+
+				if (var8 >= y + 1 + var6 - 2) {
+					var9 = 2;
+				}
+
+				for (var10 = x - var9; var10 <= x + var9 && var7; ++var10) {
+					for (var11 = z - var9; var11 <= z + var9 && var7; ++var11) {
+						if (var8 >= 0 && var8 < 256) {
+							int var12 = world.getBlockId(var10, var8, var11);
+
+							if (!this.func_150523_a(var12)) {
+								var7 = false;
 							}
-
+						} else {
 							var7 = false;
 						}
 					}
 				}
-
-				if(!var7) {
-					return false;
-				}
-
-				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if(var8 == Block.grass.blockID || var8 == Block.dirt.blockID) {
-					var1.getClass();
-					if(var4 < 128 - var6 - 1) {
-						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
-
-						int var16;
-						for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
-							var10 = var16 - (var4 + var6);
-							var11 = 1 - var10 / 2;
-
-							for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
-								int var13 = var12 - var3;
-
-								for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
-									int var15 = var14 - var5;
-									if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
-										var1.setBlockAndMetadata(var12, var16, var14, Block.leaves.blockID, 2);
-									}
-								}
-							}
-						}
-
-						for(var16 = 0; var16 < var6; ++var16) {
-							var10 = var1.getBlockId(var3, var4 + var16, var5);
-							if(var10 == 0 || var10 == Block.leaves.blockID) {
-								var1.setBlockAndMetadata(var3, var4 + var16, var5, Block.wood.blockID, 2);
-							}
-						}
-
-						return true;
-					}
-				}
-
+			}
+
+			if (!var7) {
 				return false;
+			} else {
+				int var21 = world.getBlockId(x, y - 1, z);
+
+				if ((var21 == Block.grass.blockID || var21 == Block.dirt.blockID) && y < 256 - var6 - 1) {
+					world.setBlock(x, y - 1, z, Block.dirt.blockID);
+					int var22 = random.nextInt(4);
+					var10 = var6 - random.nextInt(4) - 1;
+					var11 = 3 - random.nextInt(3);
+					int var23 = x;
+					int var13 = z;
+					int var14 = 0;
+					int var15;
+					int var16;
+
+					for (var15 = 0; var15 < var6; ++var15) {
+						var16 = y + var15;
+
+						if (var15 >= var10 && var11 > 0) {
+							var23 += ModelBed.field_35612_a[var22];
+							var13 += ModelBed.field_35610_b[var22];
+							--var11;
+						}
+
+						int var17 = world.getBlockId(var23, var16, var13);
+
+						if (var17 == 0 || Block.blocksList[var17].blockMaterial == Material.leaves) {
+							world.setBlockAndMetadata(var23, var16, var13, Block.wood.blockID, 2);
+							var14 = var16;
+						}
+					}
+
+					for (var15 = -1; var15 <= 1; ++var15) {
+						for (var16 = -1; var16 <= 1; ++var16) {
+							this.func_150525_a(world, var23 + var15, var14 + 1, var13 + var16);
+						}
+					}
+
+					this.func_150525_a(world, var23 + 2, var14 + 1, var13);
+					this.func_150525_a(world, var23 - 2, var14 + 1, var13);
+					this.func_150525_a(world, var23, var14 + 1, var13 + 2);
+					this.func_150525_a(world, var23, var14 + 1, var13 - 2);
+
+					for (var15 = -3; var15 <= 3; ++var15) {
+						for (var16 = -3; var16 <= 3; ++var16) {
+							if (Math.abs(var15) != 3 || Math.abs(var16) != 3) {
+								this.func_150525_a(world, var23 + var15, var14, var13 + var16);
+							}
+						}
+					}
+
+					var23 = x;
+					var13 = z;
+					var15 = random.nextInt(4);
+
+					if (var15 != var22) {
+						var16 = var10 - random.nextInt(2) - 1;
+						int var24 = 1 + random.nextInt(3);
+						var14 = 0;
+						int var18;
+						int var19;
+
+						for (var18 = var16; var18 < var6 && var24 > 0; --var24) {
+							if (var18 >= 1) {
+								var19 = y + var18;
+								var23 += ModelBed.field_35612_a[var15];
+								var13 += ModelBed.field_35610_b[var15];
+								int var20 = world.getBlockId(var23, var19, var13);
+
+								if (var20 == 0 || Block.blocksList[var20].blockMaterial == Material.leaves) {
+									world.setBlockAndMetadata(var23, var19, var13, Block.wood.blockID, 2);
+									var14 = var19;
+								}
+							}
+
+							++var18;
+						}
+
+						if (var14 > 0) {
+							for (var18 = -1; var18 <= 1; ++var18) {
+								for (var19 = -1; var19 <= 1; ++var19) {
+									this.func_150525_a(world, var23 + var18, var14 + 1, var13 + var19);
+								}
+							}
+
+							for (var18 = -2; var18 <= 2; ++var18) {
+								for (var19 = -2; var19 <= 2; ++var19) {
+									if (Math.abs(var18) != 2 || Math.abs(var19) != 2) {
+										this.func_150525_a(world, var23 + var18, var14, var13 + var19);
+									}
+								}
+							}
+						}
+					}
+
+					return true;
+				} else {
+					return false;
+				}
 			}
-		}
-
-		return false;
+		} else {
+			return false;
+		}
+	}
+
+	private void func_150525_a(World p_150525_1_, int p_150525_2_, int p_150525_3_, int p_150525_4_) {
+		int var5 = p_150525_1_.getBlockId(p_150525_2_, p_150525_3_, p_150525_4_);
+
+		if (var5 == 0 || Block.blocksList[var5].blockMaterial == Material.leaves) {
+			p_150525_1_.setBlockAndMetadata(p_150525_2_, p_150525_3_, p_150525_4_, Block.leaves.blockID, 2);
+		}
+	}
+
+	protected boolean func_150523_a(int blockId) {
+		Block p_150523_1_ = Block.blocksList[blockId];
+		return blockId == 0 || p_150523_1_.blockMaterial == Material.leaves || p_150523_1_ == Block.grass || p_150523_1_ == Block.dirt || p_150523_1_ == Block.wood || p_150523_1_ == Block.sapling || p_150523_1_ == Block.field_35045_bv;
 	}
 }
--- net/minecraft/src/ItemAxe.java
+++ net/minecraft/src/ItemAxe.java
@@ -1,9 +1,7 @@
 package net.minecraft.src;
 
 public class ItemAxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.planks, Block.bookShelf, Block.wood, Block.chest};
-
 	protected ItemAxe(int var1, EnumToolMaterial var2) {
-		super(var1, 3, var2, blocksEffectiveAgainst);
+		super(var1, 3, var2, EnumTool.AXE);
 	}
 }
--- net/minecraft/src/BlockGravel.java
+++ net/minecraft/src/BlockGravel.java
@@ -7,6 +7,14 @@
 		super(var1, var2);
 	}
 
+	protected int damageDropped(int var1) {
+		return 0;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.blockIndexInTexture;
+	}
+
 	public int idDropped(int var1, Random var2) {
 		return var2.nextInt(10) == 0 ? Item.flint.shiftedIndex : this.blockID;
 	}
--- net/minecraft/src/FoodStats.java
+++ net/minecraft/src/FoodStats.java
@@ -18,6 +18,7 @@
 
 	public void func_35584_a(EntityPlayer var1) {
 		int var2 = var1.worldObj.difficultySetting;
+
 		this.field_35592_e = this.field_35595_a;
 		if(this.field_35594_c > 4.0F) {
 			this.field_35594_c -= 4.0F;
@@ -28,15 +29,9 @@
 			}
 		}
 
-		if(this.field_35595_a >= 18 && var1.func_35206_W()) {
-			++this.field_35591_d;
-			if(this.field_35591_d >= 80) {
-				var1.heal(1);
-				this.field_35591_d = 0;
-			}
-		} else if(this.field_35595_a <= 0) {
-			++this.field_35591_d;
-			if(this.field_35591_d >= 80) {
+		if(this.field_35595_a <= 0) {
+			++this.field_35591_d;
+			if(this.field_35591_d >= 40) {
 				if(var1.health > 10 || var2 >= 3 || var1.health > 1 && var2 >= 2) {
 					var1.attackEntityFrom(DamageSource.field_35085_f, 1);
 				}
--- net/minecraft/src/ItemPickaxe.java
+++ net/minecraft/src/ItemPickaxe.java
@@ -1,10 +1,8 @@
 package net.minecraft.src;
 
 public class ItemPickaxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.sandStone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.ice, Block.netherrack, Block.oreLapis, Block.blockLapis};
-
 	protected ItemPickaxe(int var1, EnumToolMaterial var2) {
-		super(var1, 2, var2, blocksEffectiveAgainst);
+		super(var1, 2, var2, EnumTool.PICKAXE);
 	}
 
 	public boolean canHarvestBlock(Block var1) {
--- /dev/null
+++ net/minecraft/src/WorldGenVines.java
@@ -1,0 +1,39 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenVines extends WorldGenerator {
+    public WorldGenVines() {
+    }
+
+    public boolean generate(World par1World, Random par2Random, int par3, int par4, int par5) {
+        int i = par3;
+        int j = par5;
+        label0:
+
+        for (; par4 < 256; par4++) {
+            if (par1World.isAirBlock(par3, par4, par5)) {
+                int k = 2;
+
+                do {
+                    if (k > 5) {
+                        continue label0;
+                    }
+
+                    if (Block.field_35045_bv.canPlaceBlockOnSide(par1World, par3, par4, par5, k)) {
+                        par1World.setBlockAndMetadata(par3, par4, par5, Block.field_35045_bv.blockID, 1 << ModelBed.field_35609_d[Facing.faceToSide[k]]);
+                        continue label0;
+                    }
+
+                    k++;
+                }
+                while (true);
+            }
+
+            par3 = (i + par2Random.nextInt(4)) - par2Random.nextInt(4);
+            par5 = (j + par2Random.nextInt(4)) - par2Random.nextInt(4);
+        }
+
+        return true;
+    }
+}
--- net/minecraft/src/BiomeDecorator.java
+++ net/minecraft/src/BiomeDecorator.java
@@ -11,16 +11,16 @@
 	protected WorldGenerator field_35270_a = new WorldGenClay(4);
 	protected WorldGenerator field_35268_b = new WorldGenSand(7, Block.sand.blockID);
 	protected WorldGenerator field_35269_c = new WorldGenSand(6, Block.gravel.blockID);
-	protected WorldGenerator field_35266_d = new WorldGenMinable(Block.dirt.blockID, 32);
-	protected WorldGenerator field_35267_e = new WorldGenMinable(Block.gravel.blockID, 32);
-	protected WorldGenerator field_35264_f = new WorldGenMinable(Block.oreCoal.blockID, 16);
-	protected WorldGenerator field_35265_g = new WorldGenMinable(Block.oreIron.blockID, 8);
-	protected WorldGenerator field_35277_h = new WorldGenMinable(Block.oreGold.blockID, 8);
-	protected WorldGenerator field_35278_i = new WorldGenMinable(Block.oreRedstone.blockID, 7);
-	protected WorldGenerator field_35275_j = new WorldGenMinable(Block.oreDiamond.blockID, 7);
-	protected WorldGenerator field_35276_k = new WorldGenMinable(Block.oreLapis.blockID, 6);
+	protected WorldGenerator field_35266_d = new WorldGenMinable(Block.dirt.blockID, 32).normalStoneOnly();
+	protected WorldGenerator field_35267_e = new WorldGenMinable(Block.gravel.blockID, 32).normalStoneOnly();
+	protected WorldGenerator field_35264_f = new WorldGenMinable(Block.oreCoal.blockID, 16).inClay(0, 64).inheritStoneType();
+	protected WorldGenerator field_35265_g = new WorldGenMinable(Block.oreIron.blockID, 8).inClay(0, 64).inheritStoneType();
+	protected WorldGenerator field_35277_h = new WorldGenMinable(Block.oreGold.blockID, 8).inClay(0, 80).inheritStoneType();
+	protected WorldGenerator field_35278_i = new WorldGenMinable(Block.oreRedstone.blockID, 7).inClay(0, 64).inheritStoneType();
+	protected WorldGenerator field_35275_j = new WorldGenMinable(Block.oreDiamond.blockID, 7).inClay(0, 64).inheritStoneType();
+	protected WorldGenerator field_35276_k = new WorldGenMinable(Block.oreLapis.blockID, 6).inClay(0, 64).inheritStoneType();
 	protected WorldGenerator field_35273_l = new WorldGenFlowers(Block.plantYellow.blockID);
-	protected WorldGenerator field_35274_m = new WorldGenFlowers(Block.plantYellow.blockID);
+	protected WorldGenerator field_35274_m = new WorldGenFlowers(Block.plantRed.blockID);
 	protected WorldGenerator field_35271_n = new WorldGenFlowers(Block.mushroomBrown.blockID);
 	protected WorldGenerator field_35272_o = new WorldGenFlowers(Block.mushroomRed.blockID);
 	protected WorldGenerator field_35286_p = new WorldGenReed();
@@ -92,40 +92,31 @@
 			var5.generate(this.field_35262_B, this.field_35263_C, var3, this.field_35262_B.getHeightValue(var3, var4), var4);
 		}
 
-		Random var10000;
 		int var8;
-		for(var2 = 0; var2 < this.field_35283_s; ++var2) {
+		for(var2 = 0; var2 < this.field_35283_s * 2; ++var2) {
 			var3 = this.field_35258_D + this.field_35263_C.nextInt(16) + 8;
-			var10000 = this.field_35263_C;
-			this.field_35262_B.getClass();
-			var4 = var10000.nextInt(128);
+			var4 = this.field_35263_C.nextInt(256);
 			var8 = this.field_35259_E + this.field_35263_C.nextInt(16) + 8;
 			this.field_35273_l.generate(this.field_35262_B, this.field_35263_C, var3, var4, var8);
 			if(this.field_35263_C.nextInt(4) == 0) {
 				var3 = this.field_35258_D + this.field_35263_C.nextInt(16) + 8;
-				var10000 = this.field_35263_C;
-				this.field_35262_B.getClass();
-				var4 = var10000.nextInt(128);
+				var4 = this.field_35263_C.nextInt(256);
 				var8 = this.field_35259_E + this.field_35263_C.nextInt(16) + 8;
 				this.field_35274_m.generate(this.field_35262_B, this.field_35263_C, var3, var4, var8);
 			}
 		}
 
-		for(var2 = 0; var2 < this.field_35282_t; ++var2) {
+		for(var2 = 0; var2 < this.field_35282_t * 2; ++var2) {
 			byte var7 = 1;
 			var4 = this.field_35258_D + this.field_35263_C.nextInt(16) + 8;
-			var10000 = this.field_35263_C;
-			this.field_35262_B.getClass();
-			var8 = var10000.nextInt(128);
+			var8 = this.field_35263_C.nextInt(256);
 			int var6 = this.field_35259_E + this.field_35263_C.nextInt(16) + 8;
-			(new WorldGenTallGrass(Block.tallGrass.blockID, var7)).generate(this.field_35262_B, this.field_35263_C, var4, var8, var6);
+			this.field_35260_F.getRandomWorldGenForGrass(this.field_35263_C).generate(this.field_35262_B, this.field_35263_C, var4, var8, var6);
 		}
 
-		for(var2 = 0; var2 < this.field_35281_u; ++var2) {
+		for(var2 = 0; var2 < this.field_35281_u * 2; ++var2) {
 			var3 = this.field_35258_D + this.field_35263_C.nextInt(16) + 8;
-			var10000 = this.field_35263_C;
-			this.field_35262_B.getClass();
-			var4 = var10000.nextInt(128);
+			var4 = this.field_35263_C.nextInt(256);
 			var8 = this.field_35259_E + this.field_35263_C.nextInt(16) + 8;
 			(new WorldGenDeadBush(Block.deadBush.blockID)).generate(this.field_35262_B, this.field_35263_C, var3, var4, var8);
 		}
@@ -138,88 +129,66 @@
 				this.field_35271_n.generate(this.field_35262_B, this.field_35263_C, var3, var8, var4);
 			}
 
-			if(this.field_35263_C.nextInt(8) == 0) {
+			if(this.field_35263_C.nextInt(4) == 0) {
 				var3 = this.field_35258_D + this.field_35263_C.nextInt(16) + 8;
 				var4 = this.field_35259_E + this.field_35263_C.nextInt(16) + 8;
-				var10000 = this.field_35263_C;
-				this.field_35262_B.getClass();
-				var8 = var10000.nextInt(128);
+				var8 = this.field_35263_C.nextInt(256);
 				this.field_35272_o.generate(this.field_35262_B, this.field_35263_C, var3, var8, var4);
 			}
 		}
 
-		if(this.field_35263_C.nextInt(4) == 0) {
+		if(this.field_35263_C.nextInt(2) == 0) {
 			var2 = this.field_35258_D + this.field_35263_C.nextInt(16) + 8;
-			var10000 = this.field_35263_C;
-			this.field_35262_B.getClass();
-			var3 = var10000.nextInt(128);
+			var3 = this.field_35263_C.nextInt(256);
 			var4 = this.field_35259_E + this.field_35263_C.nextInt(16) + 8;
 			this.field_35271_n.generate(this.field_35262_B, this.field_35263_C, var2, var3, var4);
 		}
 
-		if(this.field_35263_C.nextInt(8) == 0) {
+		if(this.field_35263_C.nextInt(4) == 0) {
 			var2 = this.field_35258_D + this.field_35263_C.nextInt(16) + 8;
-			var10000 = this.field_35263_C;
-			this.field_35262_B.getClass();
-			var3 = var10000.nextInt(128);
+			var3 = this.field_35263_C.nextInt(256);
 			var4 = this.field_35259_E + this.field_35263_C.nextInt(16) + 8;
 			this.field_35272_o.generate(this.field_35262_B, this.field_35263_C, var2, var3, var4);
 		}
 
-		for(var2 = 0; var2 < this.field_35279_w; ++var2) {
+		for(var2 = 0; var2 < this.field_35279_w * 2; ++var2) {
 			var3 = this.field_35258_D + this.field_35263_C.nextInt(16) + 8;
 			var4 = this.field_35259_E + this.field_35263_C.nextInt(16) + 8;
-			var10000 = this.field_35263_C;
-			this.field_35262_B.getClass();
-			var8 = var10000.nextInt(128);
+			var8 = this.field_35263_C.nextInt(256);
 			this.field_35286_p.generate(this.field_35262_B, this.field_35263_C, var3, var8, var4);
 		}
 
-		for(var2 = 0; var2 < 10; ++var2) {
+		for(var2 = 0; var2 < 20; ++var2) {
 			var3 = this.field_35258_D + this.field_35263_C.nextInt(16) + 8;
-			var10000 = this.field_35263_C;
-			this.field_35262_B.getClass();
-			var4 = var10000.nextInt(128);
+			var4 = this.field_35263_C.nextInt(256);
 			var8 = this.field_35259_E + this.field_35263_C.nextInt(16) + 8;
 			this.field_35286_p.generate(this.field_35262_B, this.field_35263_C, var3, var4, var8);
 		}
 
 		if(this.field_35263_C.nextInt(32) == 0) {
 			var2 = this.field_35258_D + this.field_35263_C.nextInt(16) + 8;
-			var10000 = this.field_35263_C;
-			this.field_35262_B.getClass();
-			var3 = var10000.nextInt(128);
 			var4 = this.field_35259_E + this.field_35263_C.nextInt(16) + 8;
+			var3 = this.field_35262_B.getHeightValue(var2, var4);
 			(new WorldGenPumpkin()).generate(this.field_35262_B, this.field_35263_C, var2, var3, var4);
 		}
 
-		for(var2 = 0; var2 < this.field_35289_x; ++var2) {
+		for(var2 = 0; var2 < this.field_35289_x * 2; ++var2) {
 			var3 = this.field_35258_D + this.field_35263_C.nextInt(16) + 8;
-			var10000 = this.field_35263_C;
-			this.field_35262_B.getClass();
-			var4 = var10000.nextInt(128);
+			var4 = this.field_35263_C.nextInt(256);
 			var8 = this.field_35259_E + this.field_35263_C.nextInt(16) + 8;
 			this.field_35285_q.generate(this.field_35262_B, this.field_35263_C, var3, var4, var8);
 		}
 
-		Random var10001;
-		for(var2 = 0; var2 < 50; ++var2) {
+		for(var2 = 0; var2 < 100; ++var2) {
 			var3 = this.field_35258_D + this.field_35263_C.nextInt(16) + 8;
-			var10000 = this.field_35263_C;
-			var10001 = this.field_35263_C;
-			this.field_35262_B.getClass();
-			var4 = var10000.nextInt(var10001.nextInt(128 - 8) + 8);
+			var4 = this.field_35263_C.nextInt(this.field_35263_C.nextInt(256 - 8) + 8);
 			var8 = this.field_35259_E + this.field_35263_C.nextInt(16) + 8;
 			(new WorldGenLiquids(Block.waterMoving.blockID)).generate(this.field_35262_B, this.field_35263_C, var3, var4, var8);
 		}
 
-		for(var2 = 0; var2 < 20; ++var2) {
+		for(var2 = 0; var2 < 40; ++var2) {
 			var3 = this.field_35258_D + this.field_35263_C.nextInt(16) + 8;
-			var10000 = this.field_35263_C;
-			var10001 = this.field_35263_C;
-			Random var10002 = this.field_35263_C;
-			this.field_35262_B.getClass();
-			var4 = var10000.nextInt(var10001.nextInt(var10002.nextInt(128 - 16) + 8) + 8);
+			var4 = this.field_35263_C.nextInt(this.field_35263_C.nextInt(this.field_35263_C.nextInt(256 - 16) + 8) + 8);
 			var8 = this.field_35259_E + this.field_35263_C.nextInt(16) + 8;
 			(new WorldGenLiquids(Block.lavaMoving.blockID)).generate(this.field_35262_B, this.field_35263_C, var3, var4, var8);
 		}
@@ -247,31 +216,13 @@
 	}
 
 	protected void func_35253_a() {
-		WorldGenerator var10002 = this.field_35266_d;
-		this.field_35262_B.getClass();
-		this.func_35257_a(20, var10002, 0, 128);
-		var10002 = this.field_35267_e;
-		this.field_35262_B.getClass();
-		this.func_35257_a(10, var10002, 0, 128);
-		var10002 = this.field_35264_f;
-		this.field_35262_B.getClass();
-		this.func_35257_a(20, var10002, 0, 128);
-		var10002 = this.field_35265_g;
-		this.field_35262_B.getClass();
-		this.func_35257_a(20, var10002, 0, 128 / 2);
-		var10002 = this.field_35277_h;
-		this.field_35262_B.getClass();
-		this.func_35257_a(2, var10002, 0, 128 / 4);
-		var10002 = this.field_35278_i;
-		this.field_35262_B.getClass();
-		this.func_35257_a(8, var10002, 0, 128 / 8);
-		var10002 = this.field_35275_j;
-		this.field_35262_B.getClass();
-		this.func_35257_a(1, var10002, 0, 128 / 8);
-		var10002 = this.field_35276_k;
-		this.field_35262_B.getClass();
-		int var10003 = 128 / 8;
-		this.field_35262_B.getClass();
-		this.func_35254_b(1, var10002, var10003, 128 / 8);
+		this.func_35257_a(40, this.field_35266_d, 0, 256);
+		this.func_35257_a(20, this.field_35267_e, 0, 256);
+		this.func_35257_a(40, this.field_35264_f, 0, 256);
+		this.func_35257_a(20, this.field_35265_g, 0, 128 / 2);
+		this.func_35257_a(2, this.field_35277_h, 0, 128 / 4);
+		this.func_35257_a(8, this.field_35278_i, 0, 128 / 8);
+		this.func_35257_a(1, this.field_35275_j, 0, 128 / 8);
+		this.func_35254_b(1, this.field_35276_k, 128 / 8, 128 / 8);
 	}
 }
--- net/minecraft/src/Block.java
+++ net/minecraft/src/Block.java
@@ -21,36 +21,36 @@
 	public static final boolean[] canBlockGrass = new boolean[256];
 	public static final int[] lightValue = new int[256];
 	public static final boolean[] requiresSelfNotify = new boolean[256];
-	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stone");
-	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("grass");
-	public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep).setBlockName("dirt");
-	public static final Block cobblestone = (new Block(4, 16, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stonebrick");
-	public static final Block planks = (new Block(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("wood").setRequiresSelfNotify();
+	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stone").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("grass").setEffectiveAgainst(EnumTool.SHOVEL);
+	public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep).setBlockName("dirt").setEffectiveAgainst(EnumTool.SHOVEL);
+	public static final Block cobblestone = (new BlockStone(4, 16)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stonebrick").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block planks = (new BlockMultitype(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("wood").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
 	public static final Block sapling = (new BlockSapling(6, 15)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("sapling").setRequiresSelfNotify();
 	public static final Block bedrock = (new Block(7, 17, Material.rock)).setBlockUnbreakable().setResistance(6000000.0F).setStepSound(soundStoneFootstep).setBlockName("bedrock").disableStats();
-	public static final Block waterMoving = (new BlockFlowing(8, Material.water)).setHardness(100.0F).setLightOpacity(3).setBlockName("water").disableStats().setRequiresSelfNotify();
-	public static final Block waterStill = (new BlockStationary(9, Material.water)).setHardness(100.0F).setLightOpacity(3).setBlockName("water").disableStats().setRequiresSelfNotify();
+	public static final Block waterMoving = (new BlockFlowing(8, Material.water)).setHardness(100.0F).setLightOpacity(1).setBlockName("water").disableStats().setRequiresSelfNotify();
+	public static final Block waterStill = (new BlockStationary(9, Material.water)).setHardness(100.0F).setLightOpacity(1).setBlockName("water").disableStats().setRequiresSelfNotify();
 	public static final Block lavaMoving = (new BlockFlowing(10, Material.lava)).setHardness(0.0F).setLightValue(1.0F).setLightOpacity(255).setBlockName("lava").disableStats().setRequiresSelfNotify();
 	public static final Block lavaStill = (new BlockStationary(11, Material.lava)).setHardness(100.0F).setLightValue(1.0F).setLightOpacity(255).setBlockName("lava").disableStats().setRequiresSelfNotify();
-	public static final Block sand = (new BlockSand(12, 18)).setHardness(0.5F).setStepSound(soundSandFootstep).setBlockName("sand");
-	public static final Block gravel = (new BlockGravel(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("gravel");
-	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreGold");
-	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreIron");
-	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreCoal");
-	public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep).setBlockName("log").setRequiresSelfNotify();
+	public static final Block sand = (new BlockSand(12, 18)).setHardness(0.5F).setStepSound(soundSandFootstep).setBlockName("sand").setEffectiveAgainst(EnumTool.SHOVEL);
+	public static final Block gravel = (new BlockGravel(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("gravel").setEffectiveAgainst(EnumTool.SHOVEL);
+	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreGold").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreIron").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreCoal").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep).setBlockName("log").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
 	public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep).setBlockName("leaves").setRequiresSelfNotify();
 	public static final Block sponge = (new BlockSponge(19)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("sponge");
 	public static final Block glass = (new BlockGlass(20, 49, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep).setBlockName("glass");
-	public static final Block oreLapis = (new BlockOre(21, 160)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreLapis");
-	public static final Block blockLapis = (new Block(22, 144, Material.rock)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("blockLapis");
+	public static final Block oreLapis = (new BlockOre(21, 160)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreLapis").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block blockLapis = (new Block(22, 144, Material.rock)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("blockLapis").setEffectiveAgainst(EnumTool.PICKAXE);
 	public static final Block dispenser = (new BlockDispenser(23)).setHardness(3.5F).setStepSound(soundStoneFootstep).setBlockName("dispenser").setRequiresSelfNotify();
-	public static final Block sandStone = (new BlockSandStone(24)).setStepSound(soundStoneFootstep).setHardness(0.8F).setBlockName("sandStone");
-	public static final Block music = (new BlockNote(25)).setHardness(0.8F).setBlockName("musicBlock").setRequiresSelfNotify();
+	public static final Block sandStone = (new BlockSandStone(24)).setStepSound(soundStoneFootstep).setHardness(0.8F).setBlockName("sandStone").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block music = (new BlockNote(25)).setHardness(0.8F).setBlockName("musicBlock").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
 	public static final Block bed = (new BlockBed(26)).setHardness(0.2F).setBlockName("bed").disableStats().setRequiresSelfNotify();
 	public static final Block railPowered = (new BlockRail(27, 179, true)).setHardness(0.7F).setStepSound(soundMetalFootstep).setBlockName("goldenRail").setRequiresSelfNotify();
 	public static final Block railDetector = (new BlockDetectorRail(28, 195)).setHardness(0.7F).setStepSound(soundMetalFootstep).setBlockName("detectorRail").setRequiresSelfNotify();
 	public static final Block pistonStickyBase = (new BlockPistonBase(29, 106, true)).setBlockName("pistonStickyBase").setRequiresSelfNotify();
-	public static final Block web = (new BlockWeb(30, 11)).setLightOpacity(1).setHardness(4.0F).setBlockName("web");
+	public static final Block web = (new BlockWeb(30, 11)).setLightOpacity(1).setHardness(4.0F).setBlockName("web").setEffectiveAgainst(EnumTool.SWORD);
 	public static final BlockTallGrass tallGrass = (BlockTallGrass)(new BlockTallGrass(31, 39)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("tallgrass");
 	public static final BlockDeadBush deadBush = (BlockDeadBush)(new BlockDeadBush(32, 55)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("deadbush");
 	public static final Block pistonBase = (new BlockPistonBase(33, 107, false)).setBlockName("pistonBase").setRequiresSelfNotify();
@@ -61,62 +61,62 @@
 	public static final BlockFlower plantRed = (BlockFlower)(new BlockFlower(38, 12)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("rose");
 	public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(2.0F / 16.0F).setBlockName("mushroom");
 	public static final BlockFlower mushroomRed = (BlockFlower)(new BlockMushroom(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("mushroom");
-	public static final Block blockGold = (new BlockOreStorage(41, 23)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockGold");
-	public static final Block blockSteel = (new BlockOreStorage(42, 22)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockIron");
-	public static final Block stairDouble = (new BlockStep(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab");
-	public static final Block stairSingle = (new BlockStep(44, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab");
-	public static final Block brick = (new Block(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("brick");
+	public static final Block blockGold = (new BlockOreStorage(41, 23)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockGold").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block blockSteel = (new BlockOreStorage(42, 22)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockIron").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairDouble = (new BlockStep(43, true, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairSingle = (new BlockStep(44, false, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block brick = (new Block(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("brick").setEffectiveAgainst(EnumTool.PICKAXE);
 	public static final Block tnt = (new BlockTNT(46, 8)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("tnt");
-	public static final Block bookShelf = (new BlockBookshelf(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep).setBlockName("bookshelf");
-	public static final Block cobblestoneMossy = (new Block(48, 36, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneMoss");
-	public static final Block obsidian = (new BlockObsidian(49, 37)).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep).setBlockName("obsidian");
+	public static final Block bookShelf = (new BlockBookshelf(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep).setBlockName("bookshelf").setEffectiveAgainst(EnumTool.AXE);
+	public static final Block cobblestoneMossy = (new Block(48, 36, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneMoss").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block obsidian = (new Block(49, 37, Material.rock)).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep).setBlockName("obsidian");
 	public static final Block torchWood = (new BlockTorch(50, 80)).setHardness(0.0F).setLightValue(15.0F / 16.0F).setStepSound(soundWoodFootstep).setBlockName("torch").setRequiresSelfNotify();
 	public static final BlockFire fire = (BlockFire)(new BlockFire(51, 31)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep).setBlockName("fire").disableStats();
-	public static final Block mobSpawner = (new BlockMobSpawner(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep).setBlockName("mobSpawner").disableStats();
-	public static final Block stairCompactPlanks = (new BlockStairs(53, planks)).setBlockName("stairsWood").setRequiresSelfNotify();
-	public static final Block chest = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep).setBlockName("chest").setRequiresSelfNotify();
+	public static final Block mobSpawner = (new BlockMobSpawner(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep).setBlockName("mobSpawner").disableStats().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairCompactPlanks = (new BlockStairs(53, planks)).setBlockName("stairsMahogany").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block chest = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep).setBlockName("chest").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
 	public static final Block redstoneWire = (new BlockRedstoneWire(55, 164)).setHardness(0.0F).setStepSound(soundPowderFootstep).setBlockName("redstoneDust").disableStats().setRequiresSelfNotify();
-	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreDiamond");
-	public static final Block blockDiamond = (new BlockOreStorage(57, 24)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockDiamond");
-	public static final Block workbench = (new BlockWorkbench(58)).setHardness(2.5F).setStepSound(soundWoodFootstep).setBlockName("workbench");
+	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreDiamond").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block blockDiamond = (new BlockOreStorage(57, 24)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockDiamond").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block workbench = (new BlockWorkbench(58)).setHardness(2.5F).setStepSound(soundWoodFootstep).setBlockName("workbench").setEffectiveAgainst(EnumTool.AXE);
 	public static final Block crops = (new BlockCrops(59, 88)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("crops").disableStats().setRequiresSelfNotify();
-	public static final Block tilledField = (new BlockFarmland(60)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("farmland").setRequiresSelfNotify();
-	public static final Block stoneOvenIdle = (new BlockFurnace(61, false)).setHardness(3.5F).setStepSound(soundStoneFootstep).setBlockName("furnace").setRequiresSelfNotify();
-	public static final Block stoneOvenActive = (new BlockFurnace(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(14.0F / 16.0F).setBlockName("furnace").setRequiresSelfNotify();
-	public static final Block signPost = (new BlockSign(63, TileEntitySign.class, true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("sign").disableStats().setRequiresSelfNotify();
-	public static final Block doorWood = (new BlockDoor(64, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setBlockName("doorWood").disableStats().setRequiresSelfNotify();
-	public static final Block ladder = (new BlockLadder(65, 83)).setHardness(0.4F).setStepSound(soundWoodFootstep).setBlockName("ladder").setRequiresSelfNotify();
-	public static final Block rail = (new BlockRail(66, 128, false)).setHardness(0.7F).setStepSound(soundMetalFootstep).setBlockName("rail").setRequiresSelfNotify();
-	public static final Block stairCompactCobblestone = (new BlockStairs(67, cobblestone)).setBlockName("stairsStone").setRequiresSelfNotify();
-	public static final Block signWall = (new BlockSign(68, TileEntitySign.class, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("sign").disableStats().setRequiresSelfNotify();
+	public static final Block tilledField = (new BlockFarmland(60)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("farmland").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.SHOVEL);
+	public static final Block stoneOvenIdle = (new BlockFurnace(61, false)).setHardness(3.5F).setStepSound(soundStoneFootstep).setBlockName("furnace").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stoneOvenActive = (new BlockFurnace(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(14.0F / 16.0F).setBlockName("furnace").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block signPost = (new BlockSign(63, TileEntitySign.class, true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("sign").disableStats().setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block doorWood = (new BlockDoor(64, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setBlockName("doorWood").disableStats().setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block ladder = (new BlockLadder(65, 83)).setHardness(0.4F).setStepSound(soundWoodFootstep).setBlockName("ladder").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block rail = (new BlockRail(66, 128, false)).setHardness(0.7F).setStepSound(soundMetalFootstep).setBlockName("rail").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairCompactCobblestone = (new BlockStairs(67, cobblestone)).setBlockName("stairsStone").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block signWall = (new BlockSign(68, TileEntitySign.class, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("sign").disableStats().setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
 	public static final Block lever = (new BlockLever(69, 96)).setHardness(0.5F).setStepSound(soundWoodFootstep).setBlockName("lever").setRequiresSelfNotify();
-	public static final Block pressurePlateStone = (new BlockPressurePlate(70, stone.blockIndexInTexture, EnumMobType.mobs, Material.rock)).setHardness(0.5F).setStepSound(soundStoneFootstep).setBlockName("pressurePlate").setRequiresSelfNotify();
-	public static final Block doorSteel = (new BlockDoor(71, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep).setBlockName("doorIron").disableStats().setRequiresSelfNotify();
-	public static final Block pressurePlatePlanks = (new BlockPressurePlate(72, planks.blockIndexInTexture, EnumMobType.everything, Material.wood)).setHardness(0.5F).setStepSound(soundWoodFootstep).setBlockName("pressurePlate").setRequiresSelfNotify();
-	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreRedstone").setRequiresSelfNotify();
-	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, true)).setLightValue(10.0F / 16.0F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreRedstone").setRequiresSelfNotify();
+	public static final Block pressurePlateStone = (new BlockPressurePlate(70, stone.blockIndexInTexture, EnumMobType.mobs, Material.rock)).setHardness(0.5F).setStepSound(soundStoneFootstep).setBlockName("pressurePlate").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block doorSteel = (new BlockDoor(71, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep).setBlockName("doorIron").disableStats().setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block pressurePlatePlanks = (new BlockPressurePlate(72, planks.blockIndexInTexture, EnumMobType.everything, Material.wood)).setHardness(0.5F).setStepSound(soundWoodFootstep).setBlockName("pressurePlate").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreRedstone").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, true)).setLightValue(10.0F / 16.0F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreRedstone").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
 	public static final Block torchRedstoneIdle = (new BlockRedstoneTorch(75, 115, false)).setHardness(0.0F).setStepSound(soundWoodFootstep).setBlockName("notGate").setRequiresSelfNotify();
 	public static final Block torchRedstoneActive = (new BlockRedstoneTorch(76, 99, true)).setHardness(0.0F).setLightValue(0.5F).setStepSound(soundWoodFootstep).setBlockName("notGate").setRequiresSelfNotify();
 	public static final Block button = (new BlockButton(77, stone.blockIndexInTexture)).setHardness(0.5F).setStepSound(soundStoneFootstep).setBlockName("button").setRequiresSelfNotify();
-	public static final Block snow = (new BlockSnow(78, 66)).setHardness(0.1F).setStepSound(soundClothFootstep).setBlockName("snow");
-	public static final Block ice = (new BlockIce(79, 67)).setHardness(0.5F).setLightOpacity(3).setStepSound(soundGlassFootstep).setBlockName("ice");
-	public static final Block blockSnow = (new BlockSnowBlock(80, 66)).setHardness(0.2F).setStepSound(soundClothFootstep).setBlockName("snow");
+	public static final Block snow = (new BlockSnow(78, 66)).setHardness(0.1F).setStepSound(soundClothFootstep).setBlockName("snow").setEffectiveAgainst(EnumTool.SHOVEL);
+	public static final Block ice = (new BlockIce(79, 67)).setHardness(0.5F).setLightOpacity(3).setStepSound(soundGlassFootstep).setBlockName("ice").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block blockSnow = (new BlockSnowBlock(80, 66)).setHardness(0.2F).setStepSound(soundClothFootstep).setBlockName("snow").setEffectiveAgainst(EnumTool.SHOVEL);
 	public static final Block cactus = (new BlockCactus(81, 70)).setHardness(0.4F).setStepSound(soundClothFootstep).setBlockName("cactus");
-	public static final Block blockClay = (new BlockClay(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("clay");
+	public static final Block blockClay = (new BlockClay(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("clay").setEffectiveAgainst(EnumTool.SHOVEL);
 	public static final Block reed = (new BlockReed(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("reeds").disableStats();
-	public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("jukebox").setRequiresSelfNotify();
-	public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("fence");
-	public static final Block pumpkin = (new BlockPumpkin(86, 102, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("pumpkin").setRequiresSelfNotify();
-	public static final Block netherrack = (new BlockNetherrack(87, 103)).setHardness(0.4F).setStepSound(soundStoneFootstep).setBlockName("hellrock");
-	public static final Block slowSand = (new BlockSoulSand(88, 104)).setHardness(0.5F).setStepSound(soundSandFootstep).setBlockName("hellsand");
+	public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("jukebox").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("fence").setEffectiveAgainst(EnumTool.AXE);
+	public static final Block pumpkin = (new BlockPumpkin(86, 102, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("pumpkin").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block netherrack = (new BlockNetherrack(87, 103)).setHardness(0.4F).setStepSound(soundStoneFootstep).setBlockName("hellrock").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block slowSand = (new BlockSoulSand(88, 104)).setHardness(0.5F).setStepSound(soundSandFootstep).setBlockName("hellsand").setEffectiveAgainst(EnumTool.SHOVEL);
 	public static final Block glowStone = (new BlockGlowStone(89, 105, Material.rock)).setHardness(0.3F).setStepSound(soundGlassFootstep).setLightValue(1.0F).setBlockName("lightgem");
 	public static final BlockPortal portal = (BlockPortal)(new BlockPortal(90, 14)).setHardness(-1.0F).setStepSound(soundGlassFootstep).setLightValue(12.0F / 16.0F).setBlockName("portal");
-	public static final Block pumpkinLantern = (new BlockPumpkin(91, 102, true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setLightValue(1.0F).setBlockName("litpumpkin").setRequiresSelfNotify();
+	public static final Block pumpkinLantern = (new BlockPumpkin(91, 102, true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setLightValue(1.0F).setBlockName("litpumpkin").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
 	public static final Block cake = (new BlockCake(92, 121)).setHardness(0.5F).setStepSound(soundClothFootstep).setBlockName("cake").disableStats().setRequiresSelfNotify();
 	public static final Block redstoneRepeaterIdle = (new BlockRedstoneRepeater(93, false)).setHardness(0.0F).setStepSound(soundWoodFootstep).setBlockName("diode").disableStats().setRequiresSelfNotify();
 	public static final Block redstoneRepeaterActive = (new BlockRedstoneRepeater(94, true)).setHardness(0.0F).setLightValue(10.0F / 16.0F).setStepSound(soundWoodFootstep).setBlockName("diode").disableStats().setRequiresSelfNotify();
 	public static final Block lockedChest = (new BlockLockedChest(95)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep).setBlockName("lockedchest").setTickOnLoad(true).setRequiresSelfNotify();
-	public static final Block trapdoor = (new BlockTrapDoor(96, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setBlockName("trapdoor").disableStats().setRequiresSelfNotify();
+	public static final Block trapdoor = (new BlockTrapDoor(96, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setBlockName("trapdoor").disableStats().setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
 	public static final Block field_35056_bm = (new BlockSilverfish(97)).setHardness(12.0F / 16.0F);
 	public static final Block field_35052_bn = (new BlockStoneBrick(98)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stonebricksmooth");
 	public static final Block field_35053_bo = (new BlockMushroomCap(99, Material.wood, 142, 0)).setHardness(0.2F).setStepSound(soundWoodFootstep).setBlockName("mushroom").setRequiresSelfNotify();
@@ -130,12 +130,30 @@
 	public static final Block field_35044_bw = (new BlockFenceGate(107, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("fenceGate").setRequiresSelfNotify();
 	public static final Block field_35047_bx = (new BlockStairs(108, brick)).setBlockName("stairsBrick").setRequiresSelfNotify();
 	public static final Block field_35046_by = (new BlockStairs(109, field_35052_bn)).setBlockName("stairsStoneBrickSmooth").setRequiresSelfNotify();
+	public static final Block hardenedClay = (new BlockHardenedClay(110, 226, Material.rock)).setHardness(1.25F).setResistance(4.2F).setStepSound(soundStoneFootstep).setBlockName("hardenedClay").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairCompactPlanks1 = (new BlockStairs(111, planks, 1)).setBlockName("stairsPalm").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairCompactPlanks2 = (new BlockStairs(112, planks, 2)).setBlockName("stairsAcacia").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairDoubleWood = (new BlockStepWood(113, true, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("stoneSlab").setEffectiveAgainst(EnumTool.AXE);
+	public static final Block stairSingleWood = (new BlockStepWood(114, false, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("stoneSlab").setEffectiveAgainst(EnumTool.AXE);
+	public static final Block stairCompactPlanks3 = (new BlockStairs(115, planks, 3)).setBlockName("stairsWenge").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairCompactCobblestone1 = (new BlockStairs(116, cobblestone, 1)).setBlockName("stairsLimestone").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairCompactCobblestone2 = (new BlockStairs(117, cobblestone, 2)).setBlockName("stairsGranite").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairCompactCobblestone3 = (new BlockStairs(118, cobblestone, 3)).setBlockName("stairsBasalt").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block field_35279_by1 = (new BlockStairs(119, field_35052_bn, 1)).setBlockName("stairsLimestoneBrickSmooth").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block field_35279_by2 = (new BlockStairs(120, field_35052_bn, 2)).setBlockName("stairsGraniteBrickSmooth").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block field_35279_by3 = (new BlockStairs(121, field_35052_bn, 3)).setBlockName("stairsBasaltBrickSmooth").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block coral = (new BlockHardenedClay(122, 224, Material.rock)).setHardness(1.25F).setResistance(4.2F).setStepSound(soundStoneFootstep).setBlockName("coral").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block ash = (new BlockAsh(125, 227)).setHardness(0.5F).setStepSound(soundSandFootstep).setBlockName("ash").setEffectiveAgainst(EnumTool.SHOVEL);
+	public static final Block palmFenceGate = (new BlockFenceGate(126, 260)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("palmFenceGate").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block acaciaFenceGate = (new BlockFenceGate(127, 516)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("acaciaFenceGate").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block wengeFenceGate = (new BlockFenceGate(128, 772)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("wengeFenceGate").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
 	public int blockIndexInTexture;
 	public final int blockID;
 	protected float blockHardness;
 	protected float blockResistance;
 	protected boolean blockConstructorCalled;
 	protected boolean enableStats;
+	private int effectiveAgainst;
 	public double minX;
 	public double minY;
 	public double minZ;
@@ -201,6 +219,17 @@
 		return this;
 	}
 
+	protected Block setEffectiveAgainst(EnumTool... tools) {
+		for (EnumTool tool : tools) {
+			effectiveAgainst |= tool.getToolBit();
+		}
+		return this;
+	}
+
+	public int getEffectiveAgainst() {
+		return effectiveAgainst;
+	}
+
 	public boolean isACube() {
 		return true;
 	}
@@ -538,14 +567,23 @@
 	static {
 		Item.itemsList[cloth.blockID] = (new ItemCloth(cloth.blockID - 256)).setItemName("cloth");
 		Item.itemsList[wood.blockID] = (new ItemLog(wood.blockID - 256, wood)).setItemName("log");
+		Item.itemsList[planks.blockID] = (new ItemLog(planks.blockID - 256, planks)).setItemName("wood");
 		Item.itemsList[field_35052_bn.blockID] = (new ItemLog(field_35052_bn.blockID - 256, field_35052_bn)).setItemName("stonebricksmooth");
-		Item.itemsList[stairSingle.blockID] = (new ItemSlab(stairSingle.blockID - 256)).setItemName("stoneSlab");
+		Item.itemsList[stairSingle.blockID] = (new ItemSlab(stairSingle.blockID - 256, (BlockStep)stairSingle)).setItemName("stoneSlab");
 		Item.itemsList[sapling.blockID] = (new ItemSapling(sapling.blockID - 256)).setItemName("sapling");
 		Item.itemsList[leaves.blockID] = (new ItemLeaves(leaves.blockID - 256)).setItemName("leaves");
 		Item.itemsList[field_35045_bv.blockID] = new ItemVine(field_35045_bv.blockID - 256, false);
 		Item.itemsList[tallGrass.blockID] = new ItemVine(tallGrass.blockID - 256, true);
 		Item.itemsList[pistonBase.blockID] = new ItemPiston(pistonBase.blockID - 256);
 		Item.itemsList[pistonStickyBase.blockID] = new ItemPiston(pistonStickyBase.blockID - 256);
+		Item.itemsList[hardenedClay.blockID] = (new ItemCloth(hardenedClay.blockID - 256)).setItemName("hardenedClay");
+		Item.itemsList[sand.blockID] = (new ItemLog(sand.blockID - 256, sand)).setItemName("sand");
+		Item.itemsList[sandStone.blockID] = (new ItemLog(sandStone.blockID - 256, sandStone)).setItemName("sandStone");
+		Item.itemsList[stairSingleWood.blockID] = (new ItemSlab(stairSingleWood.blockID - 256, (BlockStep)stairSingleWood)).setItemName("stoneSlab.wood");
+		Item.itemsList[stone.blockID] = (new ItemLog(stone.blockID - 256, stone)).setItemName("stone");
+		Item.itemsList[cobblestone.blockID] = (new ItemLog(cobblestone.blockID - 256, cobblestone)).setItemName("stonebrick");
+		Item.itemsList[coral.blockID] = (new ItemCloth(coral.blockID - 256)).setItemName("coral");
+		Item.itemsList[fence.blockID] = (new ItemLog(fence.blockID - 256, fence)).setItemName("fence");
 
 		for(int var0 = 0; var0 < 256; ++var0) {
 			if(blocksList[var0] != null && Item.itemsList[var0] == null) {
--- net/minecraft/src/EntityPlayerMP.java
+++ net/minecraft/src/EntityPlayerMP.java
@@ -160,12 +160,12 @@
 					int var10003 = var7.chunkXPos * 16;
 					int var10005 = var7.chunkZPos * 16;
 					var9.getClass();
-					var10000.sendPacket(new Packet51MapChunk(var10003, 0, var10005, 16, 128, 16, var9));
+					var10000.sendPacket(new Packet51MapChunk(var10003, 0, var10005, 16, 256, 16, var9));
 					int var10001 = var7.chunkXPos * 16;
 					var10003 = var7.chunkZPos * 16;
 					int var10004 = var7.chunkXPos * 16 + 16;
 					var9.getClass();
-					List var5 = var9.getTileEntityList(var10001, 0, var10003, var10004, 128, var7.chunkZPos * 16 + 16);
+					List var5 = var9.getTileEntityList(var10001, 0, var10003, var10004, 256, var7.chunkZPos * 16 + 16);
 
 					for(int var6 = 0; var6 < var5.size(); ++var6) {
 						this.getTileEntityInfo((TileEntity)var5.get(var6));
--- net/minecraft/src/Item.java
+++ net/minecraft/src/Item.java
@@ -30,7 +30,7 @@
 	public static Item pickaxeDiamond = (new ItemPickaxe(22, EnumToolMaterial.EMERALD)).setIconCoord(3, 6).setItemName("pickaxeDiamond");
 	public static Item axeDiamond = (new ItemAxe(23, EnumToolMaterial.EMERALD)).setIconCoord(3, 7).setItemName("hatchetDiamond");
 	public static Item stick = (new Item(24)).setIconCoord(5, 3).setFull3D().setItemName("stick");
-	public static Item bowlEmpty = (new Item(25)).setIconCoord(7, 4).setItemName("bowl");
+	public static Item bowlEmpty = (new ItemBottle(25)).setIconCoord(7, 4).setItemName("bowl");
 	public static Item bowlSoup = (new ItemSoup(26, 8)).setIconCoord(8, 4).setItemName("mushroomStew");
 	public static Item swordGold = (new ItemSword(27, EnumToolMaterial.GOLD)).setIconCoord(4, 4).setItemName("swordGold");
 	public static Item shovelGold = (new ItemSpade(28, EnumToolMaterial.GOLD)).setIconCoord(4, 5).setItemName("shovelGold");
@@ -118,6 +118,14 @@
 	public static Item field_35409_bj = (new ItemFood(110, 6, 0.6F, true)).setIconCoord(10, 7).setItemName("chickenCooked");
 	public static Item field_35410_bk = (new ItemFood(111, 4, 0.1F, true)).func_35422_a(Potion.field_35468_s.field_35447_H, 30, 0, 0.8F).setIconCoord(11, 5).setItemName("rottenFlesh");
 	public static Item field_35411_bl = (new Item(112)).setIconCoord(11, 6).setItemName("enderPearl");
+	public static Item glassBottle = (new ItemBottle(113)).setIconCoord(12, 8).setItemName("glassBottle");
+	public static Item waterBottle = (new ItemBottle(114, 8, 0.8F)).setIconCoord(13, 8).setItemName("waterBottle");
+	public static Item impureWaterBottle = (new ItemBottle(115, 5, 0.3F, 100)).setIconCoord(13, 8).setItemName("impureWaterBottle");
+	public static Item impureWaterBowl = (new ItemBottle(116, 3, 0.3F, 60)).setIconCoord(6, 6).setItemName("impureWaterBowl");
+	public static Item waterBowl = (new ItemBottle(117, 5, 0.5F)).setIconCoord(6, 6).setItemName("waterBowl");
+	public static Item rawIron = (new Item(118)).setIconCoord(12, 6).setItemName("rawIron");
+	public static Item rawGold = (new Item(119)).setIconCoord(12, 7).setItemName("rawGold");
+	public static Item flippers = (new ItemArmor(120, 0, -1, 3)).setIconCoord(6, 7).setItemName("flippers");
 	public static Item record13 = (new ItemRecord(2000, "13")).setIconCoord(0, 15).setItemName("record");
 	public static Item recordCat = (new ItemRecord(2001, "cat")).setIconCoord(1, 15).setItemName("record");
 	public final int shiftedIndex;
--- net/minecraft/src/BlockLeaves.java
+++ net/minecraft/src/BlockLeaves.java
@@ -4,7 +4,6 @@
 
 public class BlockLeaves extends BlockLeavesBase {
 	private int baseIndexInPNG;
-	int[] adjacentTreeBlocks;
 
 	protected BlockLeaves(int var1, int var2) {
 		super(var1, var2, Material.leaves, false);
@@ -12,122 +11,23 @@
 		this.setTickOnLoad(true);
 	}
 
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		byte var5 = 1;
-		int var6 = var5 + 1;
-		if(var1.checkChunksExist(var2 - var6, var3 - var6, var4 - var6, var2 + var6, var3 + var6, var4 + var6)) {
-			for(int var7 = -var5; var7 <= var5; ++var7) {
-				for(int var8 = -var5; var8 <= var5; ++var8) {
-					for(int var9 = -var5; var9 <= var5; ++var9) {
-						int var10 = var1.getBlockId(var2 + var7, var3 + var8, var4 + var9);
-						if(var10 == Block.leaves.blockID) {
-							int var11 = var1.getBlockMetadata(var2 + var7, var3 + var8, var4 + var9);
-							var1.setBlockMetadata(var2 + var7, var3 + var8, var4 + var9, var11 | 8);
-						}
-					}
-				}
-			}
-		}
-
-	}
-
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
 		if(!var1.singleplayerWorld) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if((var6 & 8) != 0 && (var6 & 4) == 0) {
-				byte var7 = 4;
-				int var8 = var7 + 1;
-				byte var9 = 32;
-				int var10 = var9 * var9;
-				int var11 = var9 / 2;
-				if(this.adjacentTreeBlocks == null) {
-					this.adjacentTreeBlocks = new int[var9 * var9 * var9];
-				}
-
-				int var12;
-				if(var1.checkChunksExist(var2 - var8, var3 - var8, var4 - var8, var2 + var8, var3 + var8, var4 + var8)) {
-					var12 = -var7;
-
-					label112:
-					while(true) {
-						int var13;
-						int var14;
-						int var15;
-						if(var12 > var7) {
-							var12 = 1;
-
-							while(true) {
-								if(var12 > 4) {
-									break label112;
-								}
-
-								for(var13 = -var7; var13 <= var7; ++var13) {
-									for(var14 = -var7; var14 <= var7; ++var14) {
-										for(var15 = -var7; var15 <= var7; ++var15) {
-											if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11] == var12 - 1) {
-												if(this.adjacentTreeBlocks[(var13 + var11 - 1) * var10 + (var14 + var11) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11 - 1) * var10 + (var14 + var11) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11 + 1) * var10 + (var14 + var11) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11 + 1) * var10 + (var14 + var11) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 - 1) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 - 1) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 + 1) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 + 1) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + (var15 + var11 - 1)] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + (var15 + var11 - 1)] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11 + 1] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11 + 1] = var12;
-												}
-											}
-										}
-									}
-								}
-
-								++var12;
-							}
-						}
-
-						for(var13 = -var7; var13 <= var7; ++var13) {
-							for(var14 = -var7; var14 <= var7; ++var14) {
-								var15 = var1.getBlockId(var2 + var12, var3 + var13, var4 + var14);
-								if(var15 == Block.wood.blockID) {
-									this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = 0;
-								} else if(var15 == Block.leaves.blockID) {
-									this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = -2;
-								} else {
-									this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = -1;
-								}
-							}
-						}
-
-						++var12;
+			if(!var1.getBlockMaterial(var2, var3 - 1, var4).isSolid()) {
+				for (int i8 = var3 - 3; i8 <= var3 + 3; ++i8) {
+					for (int i7 = var2 - 5; i7 <= var2 + 5; ++i7) {
+						for (int i9 = var4 - 5; i9 <= var4 + 5; ++i9) {
+							if (var1.getBlockId(i7, i8, i9) == Block.wood.blockID) {
+								return;
+							}
+						}
 					}
 				}
 
-				var12 = this.adjacentTreeBlocks[var11 * var10 + var11 * var9 + var11];
-				if(var12 >= 0) {
-					var1.setBlockMetadata(var2, var3, var4, var6 & -9);
-				} else {
-					this.removeLeaves(var1, var2, var3, var4);
-				}
+				this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
+				var1.setBlockWithNotify(var2, var3, var4, 0);
 			}
-
 		}
-	}
-
-	private void removeLeaves(World var1, int var2, int var3, int var4) {
-		this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-		var1.setBlockWithNotify(var2, var3, var4, 0);
 	}
 
 	public int quantityDropped(Random var1) {
@@ -157,7 +57,7 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return (var2 & 3) == 1 ? this.blockIndexInTexture + 80 : this.blockIndexInTexture;
+		return (var2 & 3) == 2 || (var2 & 3) == 3 ? this.blockIndexInTexture : this.blockIndexInTexture + 80;
 	}
 
 	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
--- net/minecraft/src/MapGenCaves.java
+++ net/minecraft/src/MapGenCaves.java
@@ -3,11 +3,11 @@
 import java.util.Random;
 
 public class MapGenCaves extends MapGenBase {
-	protected void generateLargeCaveNode(long var1, int var3, int var4, byte[] var5, double var6, double var8, double var10) {
-		this.generateCaveNode(var1, var3, var4, var5, var6, var8, var10, 1.0F + this.rand.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
+	protected void generateLargeCaveNode(long var1, int var3, int var4, byte[] var5, byte[] var5a, double var6, double var8, double var10) {
+		this.generateCaveNode(var1, var3, var4, var5, var5a, var6, var8, var10, 1.0F + this.rand.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
 	}
 
-	protected void generateCaveNode(long var1, int var3, int var4, byte[] var5, double var6, double var8, double var10, float var12, float var13, float var14, int var15, int var16, double var17) {
+	protected void generateCaveNode(long var1, int var3, int var4, byte[] var5, byte[] var5a, double var6, double var8, double var10, float var12, float var13, float var14, int var15, int var16, double var17) {
 		double var19 = (double)(var3 * 16 + 8);
 		double var21 = (double)(var4 * 16 + 8);
 		float var23 = 0.0F;
@@ -47,8 +47,8 @@
 			var24 += (var25.nextFloat() - var25.nextFloat()) * var25.nextFloat() * 2.0F;
 			var23 += (var25.nextFloat() - var25.nextFloat()) * var25.nextFloat() * 4.0F;
 			if(!var54 && var15 == var27 && var12 > 1.0F && var16 > 0) {
-				this.generateCaveNode(var25.nextLong(), var3, var4, var5, var6, var8, var10, var25.nextFloat() * 0.5F + 0.5F, var13 - (float)Math.PI * 0.5F, var14 / 3.0F, var15, var16, 1.0D);
-				this.generateCaveNode(var25.nextLong(), var3, var4, var5, var6, var8, var10, var25.nextFloat() * 0.5F + 0.5F, var13 + (float)Math.PI * 0.5F, var14 / 3.0F, var15, var16, 1.0D);
+				this.generateCaveNode(var25.nextLong(), var3, var4, var5, var5a, var6, var8, var10, var25.nextFloat() * 0.5F + 0.5F, var13 - (float)Math.PI * 0.5F, var14 / 3.0F, var15, var16, 1.0D);
+				this.generateCaveNode(var25.nextLong(), var3, var4, var5, var5a, var6, var8, var10, var25.nextFloat() * 0.5F + 0.5F, var13 + (float)Math.PI * 0.5F, var14 / 3.0F, var15, var16, 1.0D);
 				return;
 			}
 
@@ -80,9 +80,7 @@
 						var56 = 1;
 					}
 
-					this.field_35530_d.getClass();
 					if(var38 > 128 - 8) {
-						this.field_35530_d.getClass();
 						var38 = 128 - 8;
 					}
 
@@ -96,18 +94,14 @@
 
 					boolean var58 = false;
 
-					int var10000;
 					int var42;
 					int var45;
 					for(var42 = var55; !var58 && var42 < var36; ++var42) {
 						for(int var43 = var57; !var58 && var43 < var40; ++var43) {
 							for(int var44 = var38 + 1; !var58 && var44 >= var56 - 1; --var44) {
-								var10000 = var42 * 16 + var43;
-								this.field_35530_d.getClass();
-								var45 = var10000 * 128 + var44;
+								var45 = var42 << 12 | var43 << 8 | var44;
 								if(var44 >= 0) {
-									this.field_35530_d.getClass();
-									if(var44 < 128) {
+									if(var44 < 256) {
 										if(var5[var45] == Block.waterMoving.blockID || var5[var45] == Block.waterStill.blockID) {
 											var58 = true;
 										}
@@ -127,9 +121,7 @@
 
 							for(var45 = var57; var45 < var40; ++var45) {
 								double var46 = ((double)(var45 + var4 * 16) + 0.5D - var10) / var29;
-								var10000 = var42 * 16 + var45;
-								this.field_35530_d.getClass();
-								int var48 = var10000 * 128 + var38;
+								int var48 = var42 << 12 | var45 << 8 | var38;
 								boolean var49 = false;
 								if(var59 * var59 + var46 * var46 < 1.0D) {
 									for(int var50 = var38 - 1; var50 >= var56; --var50) {
@@ -140,11 +132,13 @@
 												var49 = true;
 											}
 
-											if(var53 == Block.stone.blockID || var53 == Block.dirt.blockID || var53 == Block.grass.blockID) {
+											if(var53 == Block.stone.blockID || var53 == Block.dirt.blockID || var53 == Block.grass.blockID || var53 == Block.hardenedClay.blockID) {
 												if(var50 < 10) {
 													var5[var48] = (byte)Block.lavaMoving.blockID;
+													var5a[var48] = 0;
 												} else {
 													var5[var48] = 0;
+													var5a[var48] = 0;
 													if(var49 && var5[var48 - 1] == Block.dirt.blockID) {
 														var5[var48 - 1] = (byte)Block.grass.blockID;
 													}
@@ -168,7 +162,7 @@
 
 	}
 
-	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
+	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6, byte[] var6a) {
 		int var7 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(40) + 1) + 1);
 		if(this.rand.nextInt(15) != 0) {
 			var7 = 0;
@@ -176,14 +170,11 @@
 
 		for(int var8 = 0; var8 < var7; ++var8) {
 			double var9 = (double)(var2 * 16 + this.rand.nextInt(16));
-			Random var10000 = this.rand;
-			Random var10001 = this.rand;
-			var1.getClass();
-			double var11 = (double)var10000.nextInt(var10001.nextInt(128 - 8) + 8);
+			double var11 = (double)this.rand.nextInt(this.rand.nextInt(128 - 8) + 8);
 			double var13 = (double)(var3 * 16 + this.rand.nextInt(16));
 			int var15 = 1;
 			if(this.rand.nextInt(4) == 0) {
-				this.generateLargeCaveNode(this.rand.nextLong(), var4, var5, var6, var9, var11, var13);
+				this.generateLargeCaveNode(this.rand.nextLong(), var4, var5, var6, var6a, var9, var11, var13);
 				var15 += this.rand.nextInt(4);
 			}
 
@@ -195,7 +186,7 @@
 					var19 *= this.rand.nextFloat() * this.rand.nextFloat() * 3.0F + 1.0F;
 				}
 
-				this.generateCaveNode(this.rand.nextLong(), var4, var5, var6, var9, var11, var13, var19, var17, var18, 0, 0, 1.0D);
+				this.generateCaveNode(this.rand.nextLong(), var4, var5, var6, var6a, var9, var11, var13, var19, var17, var18, 0, 0, 1.0D);
 			}
 		}
 
--- net/minecraft/src/MapGenStructure.java
+++ net/minecraft/src/MapGenStructure.java
@@ -7,11 +7,11 @@
 public abstract class MapGenStructure extends MapGenBase {
 	protected HashMap field_35534_e = new HashMap();
 
-	public void generate(IChunkProvider var1, World var2, int var3, int var4, byte[] var5) {
-		super.generate(var1, var2, var3, var4, var5);
+	public void generate(IChunkProvider var1, World var2, int var3, int var4, byte[] var5, byte[] var6) {
+		super.generate(var1, var2, var3, var4, var5, var6);
 	}
 
-	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
+	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6, byte[] var6a) {
 		if(!this.field_35534_e.containsKey(Long.valueOf(ChunkCoordIntPair.chunkXZ2Int(var2, var3)))) {
 			this.rand.nextInt();
 			if(this.func_35531_a(var2, var3)) {
--- /dev/null
+++ net/minecraft/src/EnumTool.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public enum EnumTool {
+    SWORD(0b00001),
+    AXE(0b00010),
+    PICKAXE(0b00100),
+    SHOVEL(0b01000),
+    HOE(0b10000);
+
+
+    private final int toolBit;
+    EnumTool(int bit) {
+        toolBit = bit;
+    }
+
+    public int getToolBit() {
+        return toolBit;
+    }
+}
--- net/minecraft/src/ItemSword.java
+++ net/minecraft/src/ItemSword.java
@@ -1,13 +1,9 @@
 package net.minecraft.src;
 
-public class ItemSword extends Item {
-	private int weaponDamage;
-
+public class ItemSword extends ItemTool {
 	public ItemSword(int var1, EnumToolMaterial var2) {
-		super(var1);
-		this.maxStackSize = 1;
-		this.setMaxDamage(var2.getMaxUses());
-		this.weaponDamage = 4 + var2.getDamageVsEntity() * 2;
+		super(var1, 0, var2, EnumTool.SWORD);
+		this.damageVsEntity = 4 + var2.getDamageVsEntity() * 2;
 	}
 
 	public float getStrVsBlock(ItemStack var1, Block var2) {
@@ -22,10 +18,6 @@
 	public boolean onBlockDestroyed(ItemStack var1, int var2, int var3, int var4, int var5, EntityLiving var6) {
 		var1.damageItem(2, var6);
 		return true;
-	}
-
-	public int getDamageVsEntity(Entity var1) {
-		return this.weaponDamage;
 	}
 
 	public EnumAction func_35406_b(ItemStack var1) {
--- net/minecraft/src/TileEntityChest.java
+++ net/minecraft/src/TileEntityChest.java
@@ -3,10 +3,6 @@
 public class TileEntityChest extends TileEntity implements IInventory {
 	private ItemStack[] chestContents = new ItemStack[36];
 	public boolean field_35175_a = false;
-	public TileEntityChest field_35172_b;
-	public TileEntityChest field_35173_c;
-	public TileEntityChest field_35170_d;
-	public TileEntityChest field_35171_e;
 	public float field_35168_f;
 	public float field_35169_g;
 	public int field_35176_h;
@@ -99,67 +95,27 @@
 		this.field_35175_a = false;
 	}
 
-	public void func_35167_h() {
-		if(!this.field_35175_a) {
-			this.field_35175_a = true;
-			this.field_35172_b = null;
-			this.field_35173_c = null;
-			this.field_35170_d = null;
-			this.field_35171_e = null;
-			if(this.worldObj.getBlockId(this.xCoord - 1, this.yCoord, this.zCoord) == Block.chest.blockID) {
-				this.field_35170_d = (TileEntityChest)this.worldObj.getBlockTileEntity(this.xCoord - 1, this.yCoord, this.zCoord);
-			}
-
-			if(this.worldObj.getBlockId(this.xCoord + 1, this.yCoord, this.zCoord) == Block.chest.blockID) {
-				this.field_35173_c = (TileEntityChest)this.worldObj.getBlockTileEntity(this.xCoord + 1, this.yCoord, this.zCoord);
-			}
-
-			if(this.worldObj.getBlockId(this.xCoord, this.yCoord, this.zCoord - 1) == Block.chest.blockID) {
-				this.field_35172_b = (TileEntityChest)this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord - 1);
-			}
-
-			if(this.worldObj.getBlockId(this.xCoord, this.yCoord, this.zCoord + 1) == Block.chest.blockID) {
-				this.field_35171_e = (TileEntityChest)this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord + 1);
-			}
-
-			if(this.field_35172_b != null) {
-				this.field_35172_b.func_35164_g();
-			}
-
-			if(this.field_35171_e != null) {
-				this.field_35171_e.func_35164_g();
-			}
-
-			if(this.field_35173_c != null) {
-				this.field_35173_c.func_35164_g();
-			}
-
-			if(this.field_35170_d != null) {
-				this.field_35170_d.func_35164_g();
-			}
-
-		}
-	}
-
 	public void updateEntity() {
 		super.updateEntity();
-		this.func_35167_h();
 		if(++this.field_35174_q % 20 * 4 == 0) {
 			this.worldObj.playNoteAt(this.xCoord, this.yCoord, this.zCoord, 1, this.field_35176_h);
 		}
 
+		int metadata = this.getBlockMetadata();
+		int direction = metadata & 3;
+
 		this.field_35169_g = this.field_35168_f;
 		float var1 = 0.1F;
 		double var2;
 		double var4;
-		if(this.field_35176_h > 0 && this.field_35168_f == 0.0F && this.field_35172_b == null && this.field_35170_d == null) {
+		if(this.field_35176_h > 0 && this.field_35168_f == 0.0F && (metadata >> 2 & 1) == 0) {
 			var2 = (double)this.xCoord + 0.5D;
 			var4 = (double)this.zCoord + 0.5D;
-			if(this.field_35171_e != null) {
+			if(direction == 0 || direction == 2) {
 				var4 += 0.5D;
 			}
 
-			if(this.field_35173_c != null) {
+			if(direction == 1 || direction == 3) {
 				var2 += 0.5D;
 			}
 
@@ -177,21 +133,19 @@
 				this.field_35168_f = 1.0F;
 			}
 
-			if(this.field_35168_f < 0.0F) {
+			if(this.field_35168_f < 0.0F && (metadata >> 2 & 1) == 0) {
 				this.field_35168_f = 0.0F;
-				if(this.field_35172_b == null && this.field_35170_d == null) {
-					var2 = (double)this.xCoord + 0.5D;
-					var4 = (double)this.zCoord + 0.5D;
-					if(this.field_35171_e != null) {
-						var4 += 0.5D;
-					}
-
-					if(this.field_35173_c != null) {
-						var2 += 0.5D;
-					}
-
-					this.worldObj.playSoundEffect(var2, (double)this.yCoord + 0.5D, var4, "random.door_close", 1.0F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
-				}
+				var2 = (double)this.xCoord + 0.5D;
+				var4 = (double)this.zCoord + 0.5D;
+				if(direction == 0 || direction == 2) {
+					var4 += 0.5D;
+				}
+
+				if(direction == 1 || direction == 3) {
+					var2 += 0.5D;
+				}
+
+				this.worldObj.playSoundEffect(var2, (double)this.yCoord + 0.5D, var4, "random.door_close", 1.0F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
 			}
 		}
 
@@ -216,7 +170,6 @@
 
 	public void invalidate() {
 		this.func_35164_g();
-		this.func_35167_h();
 		super.invalidate();
 	}
 }
--- net/minecraft/src/ComponentMineshaftCross.java
+++ net/minecraft/src/ComponentMineshaftCross.java
@@ -6,6 +6,7 @@
 public class ComponentMineshaftCross extends StructureComponent {
 	private final int field_35364_a;
 	private final boolean field_35363_b;
+	private int woodType;
 
 	public ComponentMineshaftCross(int var1, Random var2, StructureBoundingBox var3, int var4) {
 		super(var1);
@@ -93,6 +94,14 @@
 		if(this.func_35295_a(var1, var3)) {
 			return false;
 		} else {
+			if (!this.isNotFloatingOrHasBlockAbove(var1, var3) ||
+					var1.getWorldChunkManager().getBiomeGenAt(var3.field_35678_a, var3.field_35677_c).field_35529_y == BiomeGenBase.volcanicIsland.field_35529_y) {
+				return false;
+			}
+
+			if (var1.getWorldChunkManager().getBiomeGenAt(var3.field_35678_a, var3.field_35677_c) instanceof BiomeGenBadlands)
+				this.woodType = 3;
+
 			if(this.field_35363_b) {
 				this.func_35294_a(var1, var3, this.field_35316_g.field_35678_a + 1, this.field_35316_g.field_35676_b, this.field_35316_g.field_35677_c, this.field_35316_g.field_35674_d - 1, this.field_35316_g.field_35676_b + 3 - 1, this.field_35316_g.field_35673_f, 0, 0, false);
 				this.func_35294_a(var1, var3, this.field_35316_g.field_35678_a, this.field_35316_g.field_35676_b, this.field_35316_g.field_35677_c + 1, this.field_35316_g.field_35674_d, this.field_35316_g.field_35676_b + 3 - 1, this.field_35316_g.field_35673_f - 1, 0, 0, false);
@@ -104,10 +113,10 @@
 				this.func_35294_a(var1, var3, this.field_35316_g.field_35678_a, this.field_35316_g.field_35676_b, this.field_35316_g.field_35677_c + 1, this.field_35316_g.field_35674_d, this.field_35316_g.field_35675_e, this.field_35316_g.field_35673_f - 1, 0, 0, false);
 			}
 
-			this.func_35294_a(var1, var3, this.field_35316_g.field_35678_a + 1, this.field_35316_g.field_35676_b, this.field_35316_g.field_35677_c + 1, this.field_35316_g.field_35678_a + 1, this.field_35316_g.field_35675_e, this.field_35316_g.field_35677_c + 1, Block.planks.blockID, 0, false);
-			this.func_35294_a(var1, var3, this.field_35316_g.field_35678_a + 1, this.field_35316_g.field_35676_b, this.field_35316_g.field_35673_f - 1, this.field_35316_g.field_35678_a + 1, this.field_35316_g.field_35675_e, this.field_35316_g.field_35673_f - 1, Block.planks.blockID, 0, false);
-			this.func_35294_a(var1, var3, this.field_35316_g.field_35674_d - 1, this.field_35316_g.field_35676_b, this.field_35316_g.field_35677_c + 1, this.field_35316_g.field_35674_d - 1, this.field_35316_g.field_35675_e, this.field_35316_g.field_35677_c + 1, Block.planks.blockID, 0, false);
-			this.func_35294_a(var1, var3, this.field_35316_g.field_35674_d - 1, this.field_35316_g.field_35676_b, this.field_35316_g.field_35673_f - 1, this.field_35316_g.field_35674_d - 1, this.field_35316_g.field_35675_e, this.field_35316_g.field_35673_f - 1, Block.planks.blockID, 0, false);
+			this.func_35294_ametadata(var1, var3, this.field_35316_g.field_35678_a + 1, this.field_35316_g.field_35676_b, this.field_35316_g.field_35677_c + 1, this.field_35316_g.field_35678_a + 1, this.field_35316_g.field_35675_e, this.field_35316_g.field_35677_c + 1, Block.planks.blockID, 0, false, this.woodType);
+			this.func_35294_ametadata(var1, var3, this.field_35316_g.field_35678_a + 1, this.field_35316_g.field_35676_b, this.field_35316_g.field_35673_f - 1, this.field_35316_g.field_35678_a + 1, this.field_35316_g.field_35675_e, this.field_35316_g.field_35673_f - 1, Block.planks.blockID, 0, false, this.woodType);
+			this.func_35294_ametadata(var1, var3, this.field_35316_g.field_35674_d - 1, this.field_35316_g.field_35676_b, this.field_35316_g.field_35677_c + 1, this.field_35316_g.field_35674_d - 1, this.field_35316_g.field_35675_e, this.field_35316_g.field_35677_c + 1, Block.planks.blockID, 0, false, this.woodType);
+			this.func_35294_ametadata(var1, var3, this.field_35316_g.field_35674_d - 1, this.field_35316_g.field_35676_b, this.field_35316_g.field_35673_f - 1, this.field_35316_g.field_35674_d - 1, this.field_35316_g.field_35675_e, this.field_35316_g.field_35673_f - 1, Block.planks.blockID, 0, false, this.woodType);
 			return true;
 		}
 	}
--- net/minecraft/src/BiomeGenPlains.java
+++ net/minecraft/src/BiomeGenPlains.java
@@ -1,10 +1,18 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class BiomeGenPlains extends BiomeGenBase {
 	protected BiomeGenPlains(int var1) {
 		super(var1);
-		this.field_35523_u.field_35284_r = -999;
+		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 5, 4, 4));
+		this.field_35523_u.field_35284_r = 1;
 		this.field_35523_u.field_35283_s = 4;
 		this.field_35523_u.field_35282_t = 10;
+		this.stoneBlockMetadata = 2;
 	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return this.field_35516_B;
+ 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockStepWood.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+public class BlockStepWood extends BlockStep {
+	public static final String[] field_22037_b = new String[]{"mahogany", "palm", "acacia", "wenge"};
+	public BlockStepWood(int var1, boolean var2, Material var3) {
+		super(var1, var2, var3);
+	}
+
+	public BlockStep getSingleForm() {
+		return (BlockStep)Block.stairSingleWood;
+	}
+
+	public BlockStep getDoubleForm() {
+		return (BlockStep)Block.stairDoubleWood;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return Block.planks.getBlockTextureFromSideAndMetadata(var1, var2);
+	}
+
+	public String[] getTypeNames() {
+		return field_22037_b;
+	}
+}
--- net/minecraft/src/ItemTool.java
+++ net/minecraft/src/ItemTool.java
@@ -1,15 +1,15 @@
 package net.minecraft.src;
 
 public class ItemTool extends Item {
-	private Block[] blocksEffectiveAgainst;
+	private EnumTool tool;
 	private float efficiencyOnProperMaterial = 4.0F;
-	private int damageVsEntity;
+	int damageVsEntity;
 	protected EnumToolMaterial toolMaterial;
 
-	protected ItemTool(int var1, int var2, EnumToolMaterial var3, Block[] var4) {
+	protected ItemTool(int var1, int var2, EnumToolMaterial var3, EnumTool tool) {
 		super(var1);
 		this.toolMaterial = var3;
-		this.blocksEffectiveAgainst = var4;
+		this.tool = tool;
 		this.maxStackSize = 1;
 		this.setMaxDamage(var3.getMaxUses());
 		this.efficiencyOnProperMaterial = var3.getEfficiencyOnProperMaterial();
@@ -17,11 +17,8 @@
 	}
 
 	public float getStrVsBlock(ItemStack var1, Block var2) {
-		for(int var3 = 0; var3 < this.blocksEffectiveAgainst.length; ++var3) {
-			if(this.blocksEffectiveAgainst[var3] == var2) {
-				return this.efficiencyOnProperMaterial;
-			}
-		}
+		if ((var2.getEffectiveAgainst() & tool.getToolBit()) != 0)
+			return this.efficiencyOnProperMaterial;
 
 		return 1.0F;
 	}
--- net/minecraft/src/EntityLiving.java
+++ net/minecraft/src/EntityLiving.java
@@ -501,9 +501,10 @@
 			var3 = this.posY;
 			this.moveFlying(var1, var2, 0.02F);
 			this.moveEntity(this.motionX, this.motionY, this.motionZ);
-			this.motionX *= (double)0.8F;
-			this.motionY *= (double)0.8F;
-			this.motionZ *= (double)0.8F;
+			double resistance = this.fastSwim() ? 0.9D : 0.8D;
+			this.motionX *= resistance;
+			this.motionY *= resistance;
+			this.motionZ *= resistance;
 			this.motionY -= 0.02D;
 			if(this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + (double)0.6F - this.posY + var3, this.motionZ)) {
 				this.motionY = (double)0.3F;
@@ -570,7 +571,7 @@
 			}
 
 			this.moveEntity(this.motionX, this.motionY, this.motionZ);
-			if(this.isCollidedHorizontally && this.isOnLadder()) {
+			if((this.isCollidedHorizontally || this.isJumping) && this.isOnLadder()) {
 				this.motionY = 0.2D;
 			}
 
@@ -596,7 +597,7 @@
 		int var1 = MathHelper.floor_double(this.posX);
 		int var2 = MathHelper.floor_double(this.boundingBox.minY);
 		int var3 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.getBlockId(var1, var2, var3) == Block.ladder.blockID;
+		return this.worldObj.getBlockId(var1, var2, var3) == Block.ladder.blockID || this.worldObj.getBlockId(var1, var2, var3) == Block.field_35045_bv.blockID;
 	}
 
 	public void writeEntityToNBT(NBTTagCompound var1) {
@@ -964,5 +965,9 @@
 		}
 
 		return var1;
+	}
+
+	public boolean fastSwim() {
+		return false;
 	}
 }
--- /dev/null
+++ net/minecraft/src/GenLayerAddOasis.java
@@ -1,0 +1,44 @@
+package net.minecraft.src;
+
+public class GenLayerAddOasis extends GenLayer {
+    private static final boolean[] deserts;
+
+    static {
+        deserts = new boolean[256];
+        deserts[BiomeGenBase.desert.field_35529_y] = true;
+        deserts[BiomeGenBase.oasis.field_35529_y] = true;
+    }
+
+    public GenLayerAddOasis(long par1, GenLayer par3GenLayer) {
+        super(par1);
+        this.field_35023_a = par3GenLayer;
+    }
+
+    public int[] func_35018_a(int par1, int par2, int par3, int par4) {
+        int i = par1 - 1;
+        int j = par2 - 1;
+        int k = par3 + 2;
+        int l = par4 + 2;
+        int[] ai = this.field_35023_a.func_35018_a(i, j, k, l);
+        int[] ai1 = IntCache.func_35549_a(par3 * par4);
+
+        for (int i1 = 0; i1 < par4; i1++) {
+            for (int j1 = 0; j1 < par3; j1++) {
+                int k1 = ai[j1 + 1 + (i1 + 0) * k];
+                int l1 = ai[j1 + 2 + (i1 + 1) * k];
+                int i2 = ai[j1 + 0 + (i1 + 1) * k];
+                int j2 = ai[j1 + 1 + (i1 + 2) * k];
+                int k2 = ai[j1 + 1 + (i1 + 1) * k];
+                this.func_35017_a(j1 + par1, i1 + par2);
+
+                if (deserts[k2] && deserts[k1] && deserts[l1] && deserts[i2] && deserts[j2] && this.func_35016_a(2) == 0) {
+                    ai1[j1 + i1 * par3] = BiomeGenBase.oasis.field_35529_y;
+                } else {
+                    ai1[j1 + i1 * par3] = k2;
+                }
+            }
+        }
+
+        return ai1;
+    }
+}
--- net/minecraft/src/MapGenRavine.java
+++ net/minecraft/src/MapGenRavine.java
@@ -5,7 +5,7 @@
 public class MapGenRavine extends MapGenBase {
 	private float[] field_35540_a = new float[1024];
 
-	protected void func_35539_a(long var1, int var3, int var4, byte[] var5, double var6, double var8, double var10, float var12, float var13, float var14, int var15, int var16, double var17) {
+	protected void func_35539_a(long var1, int var3, int var4, byte[] var5, byte[] var5a, double var6, double var8, double var10, float var12, float var13, float var14, int var15, int var16, double var17) {
 		Random var19 = new Random(var1);
 		double var20 = (double)(var3 * 16 + 8);
 		double var22 = (double)(var4 * 16 + 8);
@@ -25,9 +25,16 @@
 		float var27 = 1.0F;
 		int var28 = 0;
 
+		for (int i280 = 0; i280 < 128; i280++) {
+			if(i280 == 0 || var19.nextInt(3) == 0) {
+				var27 = 1.0F + var19.nextFloat() * var19.nextFloat() * 1.0F;
+			}
+
+			this.field_35540_a[i280] = var27 * var27;
+		}
+
 		while(true) {
-			this.field_35530_d.getClass();
-			if(var28 >= 128) {
+			if(var28 >= 256) {
 				for(; var15 < var16; ++var15) {
 					double var54 = 1.5D + (double)(MathHelper.sin((float)var15 * (float)Math.PI / (float)var16) * var12 * 1.0F);
 					double var30 = var54 * var17;
@@ -73,10 +80,8 @@
 								var56 = 1;
 							}
 
-							this.field_35530_d.getClass();
-							if(var37 > 128 - 8) {
-								this.field_35530_d.getClass();
-								var37 = 128 - 8;
+							if(var37 > 256 - 8) {
+								var37 = 256 - 8;
 							}
 
 							if(var57 < 0) {
@@ -89,18 +94,14 @@
 
 							boolean var58 = false;
 
-							int var10000;
 							int var41;
 							int var44;
 							for(var41 = var55; !var58 && var41 < var35; ++var41) {
 								for(int var42 = var57; !var58 && var42 < var39; ++var42) {
 									for(int var43 = var37 + 1; !var58 && var43 >= var56 - 1; --var43) {
-										var10000 = var41 * 16 + var42;
-										this.field_35530_d.getClass();
-										var44 = var10000 * 128 + var43;
+										var44 = var41 << 12 | var42 << 8 | var43;
 										if(var43 >= 0) {
-											this.field_35530_d.getClass();
-											if(var43 < 128) {
+											if(var43 < 256) {
 												if(var5[var44] == Block.waterMoving.blockID || var5[var44] == Block.waterStill.blockID) {
 													var58 = true;
 												}
@@ -120,9 +121,7 @@
 
 									for(var44 = var57; var44 < var39; ++var44) {
 										double var45 = ((double)(var44 + var4 * 16) + 0.5D - var10) / var54;
-										var10000 = var41 * 16 + var44;
-										this.field_35530_d.getClass();
-										int var47 = var10000 * 128 + var37;
+										int var47 = var41 << 12 | var44 << 8 | var37;
 										boolean var48 = false;
 										if(var59 * var59 + var45 * var45 < 1.0D) {
 											for(int var49 = var37 - 1; var49 >= var56; --var49) {
@@ -133,11 +132,13 @@
 														var48 = true;
 													}
 
-													if(var52 == Block.stone.blockID || var52 == Block.dirt.blockID || var52 == Block.grass.blockID) {
+													if(var52 == Block.stone.blockID || var52 == Block.dirt.blockID || var52 == Block.grass.blockID || var52 == Block.hardenedClay.blockID) {
 														if(var49 < 10) {
 															var5[var47] = (byte)Block.lavaMoving.blockID;
+															var5a[var47] = 0;
 														} else {
 															var5[var47] = 0;
+															var5a[var47] = 0;
 															if(var48 && var5[var47 - 1] == Block.dirt.blockID) {
 																var5[var47 - 1] = (byte)Block.grass.blockID;
 															}
@@ -171,7 +172,7 @@
 		}
 	}
 
-	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
+	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6, byte[] var6a) {
 		if(this.rand.nextInt(50) == 0) {
 			double var7 = (double)(var2 * 16 + this.rand.nextInt(16));
 			double var9 = (double)(this.rand.nextInt(this.rand.nextInt(40) + 8) + 20);
@@ -182,7 +183,7 @@
 				float var15 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
 				float var16 = (this.rand.nextFloat() - 0.5F) * 2.0F / 8.0F;
 				float var17 = (this.rand.nextFloat() * 2.0F + this.rand.nextFloat()) * 2.0F;
-				this.func_35539_a(this.rand.nextLong(), var4, var5, var6, var7, var9, var11, var17, var15, var16, 0, 0, 3.0D);
+				this.func_35539_a(this.rand.nextLong(), var4, var5, var6, var6a, var7, var9, var11, var17, var15, var16, 0, 0, 3.0D);
 			}
 
 		}
--- net/minecraft/src/BlockDoor.java
+++ net/minecraft/src/BlockDoor.java
@@ -174,7 +174,7 @@
 
 	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
 		var1.getClass();
-		return var3 >= 128 - 1 ? false : var1.isBlockNormalCube(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
+		return var3 >= 256 - 1 ? false : var1.isBlockNormalCube(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
 	}
 
 	public static boolean isOpen(int var0) {
--- net/minecraft/src/RecipesCrafting.java
+++ net/minecraft/src/RecipesCrafting.java
@@ -5,8 +5,13 @@
 		var1.addRecipe(new ItemStack(Block.chest), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planks});
 		var1.addRecipe(new ItemStack(Block.stoneOvenIdle), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.cobblestone});
 		var1.addRecipe(new ItemStack(Block.workbench), new Object[]{"##", "##", Character.valueOf('#'), Block.planks});
-		var1.addRecipe(new ItemStack(Block.sandStone), new Object[]{"##", "##", Character.valueOf('#'), Block.sand});
-		var1.addRecipe(new ItemStack(Block.field_35052_bn, 4), new Object[]{"##", "##", Character.valueOf('#'), Block.stone});
+		var1.addRecipe(new ItemStack(Block.sandStone, 1, 0), new Object[]{"##", "##", Character.valueOf('#'), new ItemStack(Block.sand, 1, 0)});
+		var1.addRecipe(new ItemStack(Block.sandStone, 1, 1), new Object[]{"##", "##", Character.valueOf('#'), new ItemStack(Block.sand, 1, 1)});
+		var1.addRecipe(new ItemStack(Block.sandStone, 1, 2), new Object[]{"##", "##", Character.valueOf('#'), new ItemStack(Block.sand, 1, 2)});
+		var1.addRecipe(new ItemStack(Block.field_35052_bn, 4, 0), new Object[]{"##", "##", Character.valueOf('#'), new ItemStack(Block.stone, 1, 0)});
+		var1.addRecipe(new ItemStack(Block.field_35052_bn, 4, 1), new Object[]{"##", "##", Character.valueOf('#'), new ItemStack(Block.stone, 1, 1)});
+		var1.addRecipe(new ItemStack(Block.field_35052_bn, 4, 2), new Object[]{"##", "##", Character.valueOf('#'), new ItemStack(Block.stone, 1, 2)});
+		var1.addRecipe(new ItemStack(Block.field_35052_bn, 4, 3), new Object[]{"##", "##", Character.valueOf('#'), new ItemStack(Block.stone, 1, 3)});
 		var1.addRecipe(new ItemStack(Block.field_35055_bq, 16), new Object[]{"###", "###", Character.valueOf('#'), Item.ingotIron});
 		var1.addRecipe(new ItemStack(Block.field_35049_br, 16), new Object[]{"###", "###", Character.valueOf('#'), Block.glass});
 	}
--- net/minecraft/src/BlockVine.java
+++ net/minecraft/src/BlockVine.java
@@ -168,8 +168,7 @@
 			int var12;
 			int var13;
 			if(var10 == 1) {
-				var1.getClass();
-				if(var3 < 128 - 1 && var1.isAirBlock(var2, var3 + 1, var4)) {
+				if(var3 < 256 - 1 && var1.isAirBlock(var2, var3 + 1, var4)) {
 					if(var8) {
 						return;
 					}
--- net/minecraft/src/BlockStone.java
+++ net/minecraft/src/BlockStone.java
@@ -10,4 +10,13 @@
 	public int idDropped(int var1, Random var2) {
 		return Block.cobblestone.blockID;
 	}
+
+
+	protected int damageDropped(int var1) {
+		return var1;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.blockIndexInTexture + var2 * 256;
+	}
 }
--- net/minecraft/src/EntityTrackerEntry.java
+++ net/minecraft/src/EntityTrackerEntry.java
@@ -262,7 +262,15 @@
 				if(this.trackedEntity instanceof EntityFallingSand) {
 					EntityFallingSand var3 = (EntityFallingSand)this.trackedEntity;
 					if(var3.blockID == Block.sand.blockID) {
-						return new Packet23VehicleSpawn(this.trackedEntity, 70);
+						if(var3.blockMetadata == 1) {
+							return new Packet23VehicleSpawn(this.trackedEntity, 72);
+						} else if(var3.blockMetadata == 2) {
+							return new Packet23VehicleSpawn(this.trackedEntity, 73);
+						} if(var3.blockMetadata == 3) {
+							return new Packet23VehicleSpawn(this.trackedEntity, 74);
+						} else {
+							return new Packet23VehicleSpawn(this.trackedEntity, 70);
+						}
 					}
 
 					if(var3.blockID == Block.gravel.blockID) {
--- net/minecraft/src/BlockMushroom.java
+++ net/minecraft/src/BlockMushroom.java
@@ -60,8 +60,7 @@
 
 	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
 		if(var3 >= 0) {
-			var1.getClass();
-			if(var3 < 128) {
+			if(var3 < 256) {
 				return var1.getFullBlockLightValue(var2, var3, var4) < 13 && this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
 			}
 		}
--- net/minecraft/src/ComponentMineshaftCorridor.java
+++ net/minecraft/src/ComponentMineshaftCorridor.java
@@ -8,6 +8,7 @@
 	private final boolean field_35359_b;
 	private boolean field_35360_c;
 	private int field_35358_d;
+	private int woodType;
 
 	public ComponentMineshaftCorridor(int var1, Random var2, StructureBoundingBox var3, int var4) {
 		super(var1);
@@ -126,9 +127,17 @@
 		if(this.func_35295_a(var1, var3)) {
 			return false;
 		} else {
+			if (!this.isNotFloatingOrHasBlockAbove(var1, var3) ||
+					var1.getWorldChunkManager().getBiomeGenAt(var3.field_35678_a, var3.field_35677_c).field_35529_y == BiomeGenBase.volcanicIsland.field_35529_y) {
+				return false;
+			}
+
+			if (var1.getWorldChunkManager().getBiomeGenAt(var3.field_35678_a, var3.field_35677_c) instanceof BiomeGenBadlands)
+				this.woodType = 3;
 			int var8 = this.field_35358_d * 5 - 1;
 			this.func_35294_a(var1, var3, 0, 0, 0, 2, 1, var8, 0, 0, false);
 			this.func_35315_a(var1, var3, var2, 0.8F, 0, 2, 0, 2, 2, var8, 0, 0, false);
+			this.func_35294_air(var1, var3, 0, -1, 0, 2, -1, var8, Block.planks.blockID, Block.planks.blockID, this.woodType);
 			if(this.field_35359_b) {
 				this.func_35315_a(var1, var3, var2, 0.6F, 0, 0, 0, 2, 1, var8, Block.web.blockID, 0, false);
 			}
@@ -137,14 +146,20 @@
 			int var10;
 			for(var9 = 0; var9 < this.field_35358_d; ++var9) {
 				var10 = 2 + var9 * 5;
-				this.func_35294_a(var1, var3, 0, 0, var10, 0, 1, var10, Block.fence.blockID, 0, false);
-				this.func_35294_a(var1, var3, 2, 0, var10, 2, 1, var10, Block.fence.blockID, 0, false);
+				this.func_35294_ametadata(var1, var3, 0, 0, var10, 0, 1, var10, Block.fence.blockID, 0, false, this.woodType);
+				this.func_35294_ametadata(var1, var3, 2, 0, var10, 2, 1, var10, Block.fence.blockID, 0, false, this.woodType);
+				if (this.beamNoBurn(var1, 0, -2, var10, var3)) {
+					this.func_35303_b(var1, Block.wood.blockID, this.woodType, 0, -2, var10, var3);
+				}
+				if (this.beamNoBurn(var1, 2, -2, var10, var3)) {
+					this.func_35303_b(var1, Block.wood.blockID, this.woodType, 2, -2, var10, var3);
+				}
 				if(var2.nextInt(4) != 0) {
-					this.func_35294_a(var1, var3, 0, 2, var10, 2, 2, var10, Block.planks.blockID, 0, false);
+					this.func_35294_ametadata(var1, var3, 0, 2, var10, 2, 2, var10, Block.planks.blockID, 0, false, this.woodType);
 				} else {
-					this.func_35294_a(var1, var3, 0, 2, var10, 0, 2, var10, Block.planks.blockID, 0, false);
-					this.func_35294_a(var1, var3, 2, 2, var10, 2, 2, var10, Block.planks.blockID, 0, false);
-				}
+					this.func_35294_ametadata(var1, var3, 0, 2, var10, 0, 2, var10, Block.planks.blockID, 0, false, this.woodType);
+					this.func_35294_ametadata(var1, var3, 2, 2, var10, 2, 2, var10, Block.planks.blockID, 0, false, this.woodType);
+ 				}
 
 				this.func_35302_a(var1, var3, var2, 0.1F, 0, 2, var10 - 1, Block.web.blockID, 0);
 				this.func_35302_a(var1, var3, var2, 0.1F, 2, 2, var10 - 1, Block.web.blockID, 0);
--- net/minecraft/src/WorldGenTaiga1.java
+++ net/minecraft/src/WorldGenTaiga1.java
@@ -10,9 +10,7 @@
 		int var9 = 1 + var2.nextInt(var8 + 1);
 		boolean var10 = true;
 		if(var4 >= 1) {
-			int var10000 = var4 + var6 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
+			if(var4 + var6 + 1 <= 256) {
 				int var11;
 				int var13;
 				int var14;
@@ -29,8 +27,7 @@
 					for(var13 = var3 - var18; var13 <= var3 + var18 && var10; ++var13) {
 						for(var14 = var5 - var18; var14 <= var5 + var18 && var10; ++var14) {
 							if(var11 >= 0) {
-								var1.getClass();
-								if(var11 < 128) {
+								if(var11 < 256) {
 									var15 = var1.getBlockId(var13, var11, var14);
 									if(var15 != 0 && var15 != Block.leaves.blockID) {
 										var10 = false;
@@ -50,8 +47,7 @@
 
 				var11 = var1.getBlockId(var3, var4 - 1, var5);
 				if(var11 == Block.grass.blockID || var11 == Block.dirt.blockID) {
-					var1.getClass();
-					if(var4 < 128 - var6 - 1) {
+					if(var4 < 256 - var6 - 1) {
 						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
 						var18 = 0;
 
@@ -62,7 +58,7 @@
 								for(int var16 = var5 - var18; var16 <= var5 + var18; ++var16) {
 									int var17 = var16 - var5;
 									if((Math.abs(var15) != var18 || Math.abs(var17) != var18 || var18 <= 0) && !Block.opaqueCubeLookup[var1.getBlockId(var14, var13, var16)]) {
-										var1.setBlockAndMetadata(var14, var13, var16, Block.leaves.blockID, 1);
+										var1.setBlockAndMetadata(var14, var13, var16, Block.leaves.blockID, 3);
 									}
 								}
 							}
@@ -77,7 +73,7 @@
 						for(var13 = 0; var13 < var6 - 1; ++var13) {
 							var14 = var1.getBlockId(var3, var4 + var13, var5);
 							if(var14 == 0 || var14 == Block.leaves.blockID) {
-								var1.setBlockAndMetadata(var3, var4 + var13, var5, Block.wood.blockID, 1);
+								var1.setBlockAndMetadata(var3, var4 + var13, var5, Block.wood.blockID, 3);
 							}
 						}
 

--- net/minecraft/src/ComponentMineshaftStairs.java
+++ net/minecraft/src/ComponentMineshaftStairs.java
@@ -55,6 +55,11 @@
 		if(this.func_35013_a(var1, var3)) {
 			return false;
 		} else {
+			if (!this.isNotFloatingOrHasBlockAbove(var1, var3) ||
+					var1.getWorldChunkManager().getBiomeGenAt(var3.field_35753_a, var3.field_35752_c).field_35494_y == BiomeGenBase.volcanicIsland.field_35494_y) {
+				return false;
+			}
+
 			this.func_35011_a(var1, var3, 0, 5, 0, 2, 7, 1, 0, 0, false);
 			this.func_35011_a(var1, var3, 0, 0, 7, 2, 2, 8, 0, 0, false);
 
--- /dev/null
+++ net/minecraft/src/Facing.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+public class Facing {
+    public static final int[] faceToSide =
+            {
+                    1, 0, 3, 2, 5, 4
+            };
+    public static final int[] offsetsXForSide =
+            {
+                    0, 0, 0, 0, -1, 1
+            };
+    public static final int[] offsetsYForSide =
+            {
+                    -1, 1, 0, 0, 0, 0
+            };
+    public static final int[] offsetsZForSide =
+            {
+                    0, 0, -1, 1, 0, 0
+            };
+
+    public Facing() {
+    }
+}
--- net/minecraft/src/WorldGenBigMushroom.java
+++ net/minecraft/src/WorldGenBigMushroom.java
@@ -21,9 +21,7 @@
 		int var7 = var2.nextInt(3) + 4;
 		boolean var8 = true;
 		if(var4 >= 1) {
-			int var10000 = var4 + var7 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
+			if(var4 + var7 + 1 <= 256) {
 				int var9;
 				int var11;
 				int var12;
@@ -37,8 +35,7 @@
 					for(var11 = var3 - var10; var11 <= var3 + var10 && var8; ++var11) {
 						for(var12 = var5 - var10; var12 <= var5 + var10 && var8; ++var12) {
 							if(var9 >= 0) {
-								var1.getClass();
-								if(var9 < 128) {
+								if(var9 < 256) {
 									var13 = var1.getBlockId(var11, var9, var12);
 									if(var13 != 0 && var13 != Block.leaves.blockID) {
 										var8 = false;
--- /dev/null
+++ net/minecraft/src/BiomeGenBeach.java
@@ -1,0 +1,30 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenBeach extends BiomeGenBase {
+	public BiomeGenBeach(int var1) {
+		super(var1);
+		this.spawnableCreatureList.clear();
+		this.topBlock = (byte)Block.sand.blockID;
+		this.fillerBlock = (byte)Block.sand.blockID;
+		this.field_35488_u.field_35911_r = 0;
+		this.field_35488_u.field_35908_u = 0;
+		this.field_35488_u.field_35906_w = 0;
+		this.field_35488_u.field_35916_x = 0;
+	}
+
+	protected BiomeGenBeach sandType(int type) {
+		this.topBlockMetadata = (byte)type;
+		this.fillerBlockMetadata = (byte)type;
+		return this;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return this.field_35483_D;
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+		super.buildBiomeSurface(world, random, blocks, metadata, x, z, heightValue, -100.0D);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeGenOasis.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenOasis extends BiomeGenBase {
+	protected static final NoiseGeneratorOctaves oasisNoise = new NoiseGeneratorOctaves(new Random("get wetted".hashCode()), 2);
+
+	public BiomeGenOasis(int var1) {
+		super(var1);
+		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 8, 4, 4));
+		this.field_35488_u.field_35911_r = 5;
+		this.field_35488_u.field_35910_s = 6;
+		this.field_35488_u.field_35909_t = 4;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(3) == 0 ? this.field_35480_A : this.field_35482_C;
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+		super.buildBiomeSurface(world, random, blocks, metadata, x, z, heightValue, -100.0D);
+
+		int chunkX = x & 15;
+		int chunkZ = z & 15;
+        double water = oasisNoise.func_806_a((double)x * 0.1D, (double)z * 0.1D);
+
+		if (water > 0.25D) {
+			for (int y = 255, i = chunkX << 12 | chunkZ << 8 | 255; y >= 0; --y, --i) {
+				if (blocks[i] != 0) {
+					blocks[i] = (byte)Block.waterMoving.blockID;
+					break;
+				}
+			}
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeGenBadlands.java
@@ -1,0 +1,90 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenBadlands extends BiomeGenBase {
+	protected static final NoiseGeneratorOctaves badlandsNoise = new NoiseGeneratorOctaves(new Random("where the bads are land >:3".hashCode()), 1);
+	private static final int[] clayColors = {
+			0,
+			1,
+			1,
+			1,
+			4,
+			7,
+			8,
+			14,
+			15,
+	};
+
+	private int[] clayColorCache = null;
+	private long clayColorSeed;
+	private boolean wooded;
+
+	protected BiomeGenBadlands(int var1) {
+		super(var1);
+		this.spawnableCreatureList.clear();
+		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 5, 4, 4));
+		this.field_35488_u.field_35911_r = 2;
+		this.field_35488_u.field_35909_t = 4;
+		this.field_35488_u.field_35908_u = 5;
+		this.field_35488_u.field_35916_x = 10;
+		this.topBlock = (byte)Block.sand.blockID;
+		this.topBlockMetadata = 1;
+		this.fillerBlock = (byte)Block.hardenedClay.blockID;
+		this.fillerBlockMetadata = 1;
+		this.stoneBlockMetadata = 1;
+		this.heightCutoff = 16;
+	}
+
+	protected BiomeGenBadlands wooded() {
+		this.wooded = true;
+		return this;
+	}
+
+	public void func_35477_a(World var1, Random var2, int var3, int var4) {
+		for(int var5 = 0; var5 < 20; ++var5) {
+			int var6 = var3 + var2.nextInt(16);
+			int var7 = var2.nextInt(80 - 32) + 32;
+			int var8 = var4 + var2.nextInt(16);
+			this.field_35488_u.field_35904_h.generate(var1, var2, var6, var7, var8);
+		}
+
+		super.func_35477_a(var1, var2, var3, var4);
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+		super.buildBiomeSurface(world, random, blocks, metadata, x, z, heightValue, -100.0D);
+
+		if (this.clayColorCache == null || this.clayColorSeed != world.getRandomSeed()) {
+			this.clayColorSeed = world.getRandomSeed();
+			this.clayColorCache = new int[256];
+			for (int i = 0; i < 256; i++) {
+				double index = badlandsNoise.generateNoise(this.clayColorSeed % 10000.0D, i, this.clayColorSeed % 10000.0D);
+				if (i > 64 || badlandsNoise.generateNoise(~this.clayColorSeed % 10000.0D, i, ~this.clayColorSeed % 10000.0D) > 0.0D) {
+					this.clayColorCache[i] = clayColors[Math.floorMod((int)(index * 10000.0D), clayColors.length)];
+				} else {
+					this.clayColorCache[i] = -1;
+				}
+			}
+		}
+
+		int chunkX = x & 15;
+		int chunkZ = z & 15;
+		int clayHeight = 78;
+		int grassHeight = 112 + random.nextInt(3);
+		for (int y = 0, i = chunkX << 12 | chunkZ << 8; y < 256; ++y, ++i) {
+			if (this.wooded && y > grassHeight && blocks[i] != 0 && (y == 255 || blocks[i + 1] == 0)) {
+				blocks[i] = (byte)Block.grass.blockID;
+				metadata[i] = 0;
+			} else if (blocks[i] != 0 && (y > clayHeight
+					|| blocks[i] == (byte) Block.stone.blockID && this.clayColorCache[y] >= 0)) {
+				blocks[i] = (byte)Block.hardenedClay.blockID;
+				metadata[i] = (byte)this.clayColorCache[y];
+			}
+		}
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return new WorldGenTaiga2();
+	}
+}
--- /dev/null
+++ net/minecraft/src/GenLayerShore.java
@@ -1,0 +1,46 @@
+package net.minecraft.src;
+
+public class GenLayerShore extends GenLayer {
+	private static final BiomeGenBase[] beaches = {
+			BiomeGenBase.beach,
+			BiomeGenBase.hillyBeach,
+			BiomeGenBase.rainbowBeach,
+			BiomeGenBase.rockyBeach
+	};
+
+	public GenLayerShore(long var1, GenLayer var3) {
+		super(var1);
+		this.field_35504_a = var3;
+	}
+
+	public int[] func_35500_a(int var1, int var2, int var3, int var4) {
+		int[] var5 = this.field_35504_a.func_35500_a(var1 - 1, var2 - 1, var3 + 2, var4 + 2);
+		int[] var6 = IntCache.func_35267_a(var3 * var4);
+
+		for(int var7 = 0; var7 < var4; ++var7) {
+			for(int var8 = 0; var8 < var3; ++var8) {
+				this.func_35499_a((long)(var8 + var1), (long)(var7 + var2));
+				int var9 = var5[var8 + 1 + (var7 + 1) * (var3 + 2)];
+				int var10;
+				int var11;
+				int var12;
+				int var13;
+				if(!BiomeGenBase.oceans[var9]) {
+					var10 = var5[var8 + 1 + (var7 + 1 - 1) * (var3 + 2)];
+					var11 = var5[var8 + 1 + 1 + (var7 + 1) * (var3 + 2)];
+					var12 = var5[var8 + 1 - 1 + (var7 + 1) * (var3 + 2)];
+					var13 = var5[var8 + 1 + (var7 + 1 + 1) * (var3 + 2)];
+					if(BiomeGenBase.oceans[var10] || BiomeGenBase.oceans[var11] || BiomeGenBase.oceans[var12] || BiomeGenBase.oceans[var13]) {
+						var6[var8 + var7 * var3] = beaches[this.func_35498_a(beaches.length)].field_35494_y;
+					} else {
+						var6[var8 + var7 * var3] = var9;
+					}
+				} else {
+					var6[var8 + var7 * var3] = var9;
+				}
+			}
+		}
+
+		return var6;
+	}
+}
--- net/minecraft/src/BlockOre.java
+++ net/minecraft/src/BlockOre.java
@@ -2,13 +2,18 @@
 
 import java.util.Random;
 
-public class BlockOre extends Block {
+public class BlockOre extends BlockMultitype {
 	public BlockOre(int var1, int var2) {
 		super(var1, var2, Material.rock);
 	}
 
 	public int idDropped(int var1, Random var2) {
-		return this.blockID == Block.oreCoal.blockID ? Item.coal.shiftedIndex : (this.blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (this.blockID == Block.oreLapis.blockID ? Item.dyePowder.shiftedIndex : this.blockID));
+		return this.blockID == Block.oreCoal.blockID ? Item.coal.shiftedIndex
+				: this.blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex
+				: this.blockID == Block.oreLapis.blockID ? Item.dyePowder.shiftedIndex
+				: this.blockID == Block.oreIron.blockID ? Item.rawIron.shiftedIndex
+				: this.blockID == Block.oreGold.blockID ? Item.rawGold.shiftedIndex
+				: this.blockID;
 	}
 
 	public int quantityDropped(Random var1) {
--- net/minecraft/src/ChunkProvider.java
+++ net/minecraft/src/ChunkProvider.java
@@ -17,8 +17,7 @@
 	private int field_35392_h;
 
 	public ChunkProvider(World var1, IChunkLoader var2, IChunkProvider var3) {
-		var1.getClass();
-		this.field_28064_b = new EmptyChunk(var1, new byte[256 * 128], 0, 0);
+		this.field_28064_b = new EmptyChunk(var1, new byte[256 * 256], 0, 0);
 		this.worldObj = var1;
 		this.chunkLoader = var2;
 		this.chunkProvider = var3;
--- net/minecraft/src/WorldGenTallGrass.java
+++ net/minecraft/src/WorldGenTallGrass.java
@@ -17,7 +17,7 @@
 		while(true) {
 			int var11 = var1.getBlockId(var3, var4, var5);
 			if(var11 != 0 && var11 != Block.leaves.blockID || var4 <= 0) {
-				for(int var7 = 0; var7 < 128; ++var7) {
+				for(int var7 = 0; var7 < 256; ++var7) {
 					int var8 = var3 + var2.nextInt(8) - var2.nextInt(8);
 					int var9 = var4 + var2.nextInt(4) - var2.nextInt(4);
 					int var10 = var5 + var2.nextInt(8) - var2.nextInt(8);
--- net/minecraft/src/GenLayerRiverMix.java
+++ net/minecraft/src/GenLayerRiverMix.java
@@ -22,7 +22,7 @@
 		int[] var7 = IntCache.func_35267_a(var3 * var4);
 
 		for(int var8 = 0; var8 < var3 * var4; ++var8) {
-			if(var5[var8] == BiomeGenBase.field_35484_b.field_35494_y) {
+			if(BiomeGenBase.oceans[var5[var8]] || var5[var8] == BiomeGenBase.oasis.field_35494_y) {
 				var7[var8] = var5[var8];
 			} else {
 				var7[var8] = var6[var8] >= 0 ? var6[var8] : var5[var8];
--- net/minecraft/src/GuiMainMenu.java
+++ net/minecraft/src/GuiMainMenu.java
@@ -2,6 +2,7 @@
 
 import java.awt.image.BufferedImage;
 import java.io.BufferedReader;
+import java.io.IOException;
 import java.io.InputStreamReader;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
@@ -13,11 +14,22 @@
 
 public class GuiMainMenu extends GuiScreen {
 	private static final Random rand = new Random();
-	private float updateCounter = 0.0F;
+	private static final ArrayList<String> credits = new ArrayList<>();
 	private String splashText = "missingno";
 	private GuiButton multiplayerButton;
-	private int field_35357_f = 0;
-	private int field_35358_g;
+	private int field_35357_f = rand.nextInt(10000);
+	private boolean creditsMode;
+
+	static {
+		try (BufferedReader reader = new BufferedReader(new InputStreamReader(GuiMainMenu.class.getResourceAsStream("/title/tacredits.txt"), Charset.forName("UTF-8")))) {
+			String line;
+			while ((line = reader.readLine()) != null) {
+				credits.add(line);
+			}
+		} catch (IOException e) {
+			credits.add("Failed to read credits!");
+		}
+	}
 
 	public GuiMainMenu() {
 		try {
@@ -45,7 +57,6 @@
 	}
 
 	public void updateScreen() {
-		++this.updateCounter;
 		++this.field_35357_f;
 	}
 
@@ -57,7 +68,6 @@
 	}
 
 	public void initGui() {
-		this.field_35358_g = this.mc.renderEngine.allocateAndSetupTexture(new BufferedImage(256, 256, 2));
 		Calendar var1 = Calendar.getInstance();
 		var1.setTime(new Date());
 		if(var1.get(2) + 1 == 11 && var1.get(5) == 9) {
@@ -72,18 +82,20 @@
 
 		StringTranslate var2 = StringTranslate.getInstance();
 		int var4 = this.height / 4 + 48;
-		this.controlList.add(new GuiButton(1, this.width / 2 - 100, var4, var2.translateKey("menu.singleplayer")));
-		this.controlList.add(this.multiplayerButton = new GuiButton(2, this.width / 2 - 100, var4 + 24, var2.translateKey("menu.multiplayer")));
-		this.controlList.add(new GuiButton(3, this.width / 2 - 100, var4 + 48, var2.translateKey("menu.mods")));
-		if(this.mc.hideQuitButton) {
-			this.controlList.add(new GuiButton(0, this.width / 2 - 100, var4 + 72, var2.translateKey("menu.options")));
-		} else {
-			this.controlList.add(new GuiButton(0, this.width / 2 - 100, var4 + 72 + 12, 98, 20, var2.translateKey("menu.options")));
-			this.controlList.add(new GuiButton(4, this.width / 2 + 2, var4 + 72 + 12, 98, 20, var2.translateKey("menu.quit")));
-		}
+		if (!this.creditsMode) {
+			this.controlList.add(new GuiButton(1, this.width / 2 - 100, var4, var2.translateKey("menu.singleplayer")));
+			this.controlList.add(this.multiplayerButton = new GuiButton(2, this.width / 2 - 100, var4 + 24, var2.translateKey("menu.multiplayer")));
+			this.controlList.add(new GuiButton(3, this.width / 2 - 100, var4 + 48, var2.translateKey("menu.mods")));
+			if(this.mc.hideQuitButton) {
+				this.controlList.add(new GuiButton(0, this.width / 2 - 100, var4 + 72, var2.translateKey("menu.options")));
+			} else {
+				this.controlList.add(new GuiButton(0, this.width / 2 - 100, var4 + 72 + 12, 98, 20, var2.translateKey("menu.options")));
+				this.controlList.add(new GuiButton(4, this.width / 2 + 2, var4 + 72 + 12, 98, 20, var2.translateKey("menu.quit")));
+			}
 
-		if(this.mc.session == null) {
-			this.multiplayerButton.enabled = false;
+			if(this.mc.session == null) {
+				this.multiplayerButton.enabled = false;
+			}
 		}
 
 	}
@@ -111,12 +123,23 @@
 
 	}
 
+	protected void mouseClicked(int var1, int var2, int var3) {
+		if (var3 == 0 && var1 < this.fontRenderer.getStringWidth("Tropical Adventure 1.0.1") + 4 && var2 >= this.height - 12) {
+				this.mc.sndManager.playSoundFX("random.wood click", 1.0F, 1.0F);
+			this.creditsMode = !this.creditsMode;
+			this.controlList.clear();
+			this.initGui();
+		} else {
+			super.mouseClicked(var1, var2, var3);
+		}
+	}
+
 	private void func_35355_b(int var1, int var2, float var3) {
 		Tessellator var4 = Tessellator.instance;
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glPushMatrix();
 		GL11.glLoadIdentity();
-		GLU.gluPerspective(120.0F, 1.0F, 0.05F, 10.0F);
+		GLU.gluPerspective(90.0F, (float) this.width / this.height, 0.05F, 10.0F);
 		GL11.glMatrixMode(GL11.GL_MODELVIEW);
 		GL11.glPushMatrix();
 		GL11.glLoadIdentity();
@@ -163,11 +186,10 @@
 				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/title/bg/panorama" + var10 + ".png"));
 				var4.startDrawingQuads();
 				var4.setColorRGBA_I(16777215, 255 / (var6 + 1));
-				float var11 = 0.0F;
-				var4.addVertexWithUV(-1.0D, -1.0D, 1.0D, (double)(0.0F + var11), (double)(0.0F + var11));
-				var4.addVertexWithUV(1.0D, -1.0D, 1.0D, (double)(1.0F - var11), (double)(0.0F + var11));
-				var4.addVertexWithUV(1.0D, 1.0D, 1.0D, (double)(1.0F - var11), (double)(1.0F - var11));
-				var4.addVertexWithUV(-1.0D, 1.0D, 1.0D, (double)(0.0F + var11), (double)(1.0F - var11));
+				var4.addVertexWithUV(-1.0D, -1.0D, 1.0D, 0.0D, 0.0D);
+				var4.addVertexWithUV(1.0D, -1.0D, 1.0D, 1.0D, 0.0D);
+				var4.addVertexWithUV(1.0D, 1.0D, 1.0D, 1.0D, 1.0D);
+				var4.addVertexWithUV(-1.0D, 1.0D, 1.0D, 0.0D, 1.0D);
 				var4.draw();
 				GL11.glPopMatrix();
 			}
@@ -188,57 +210,12 @@
 		GL11.glEnable(GL11.GL_DEPTH_TEST);
 	}
 
-	private void func_35354_a(float var1) {
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.field_35358_g);
-		GL11.glCopyTexSubImage2D(GL11.GL_TEXTURE_2D, 0, 0, 0, 0, 0, 256, 256);
-		GL11.glEnable(GL11.GL_BLEND);
-		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-		GL11.glColorMask(true, true, true, false);
-		Tessellator var2 = Tessellator.instance;
-		var2.startDrawingQuads();
-		byte var3 = 3;
-
-		for(int var4 = 0; var4 < var3; ++var4) {
-			var2.setColorRGBA_F(1.0F, 1.0F, 1.0F, 1.0F / (float)(var4 + 1));
-			int var5 = this.width;
-			int var6 = this.height;
-			float var7 = (float)(var4 - var3 / 2) / 256.0F;
-			var2.addVertexWithUV((double)var5, (double)var6, (double)this.zLevel, (double)(0.0F + var7), 0.0D);
-			var2.addVertexWithUV((double)var5, 0.0D, (double)this.zLevel, (double)(1.0F + var7), 0.0D);
-			var2.addVertexWithUV(0.0D, 0.0D, (double)this.zLevel, (double)(1.0F + var7), 1.0D);
-			var2.addVertexWithUV(0.0D, (double)var6, (double)this.zLevel, (double)(0.0F + var7), 1.0D);
-		}
-
-		var2.draw();
-		GL11.glColorMask(true, true, true, true);
-	}
-
 	private void func_35356_c(int var1, int var2, float var3) {
-		GL11.glViewport(0, 0, 256, 256);
 		this.func_35355_b(var1, var2, var3);
-		this.func_35354_a(var3);
-		this.func_35354_a(var3);
-		this.func_35354_a(var3);
-		this.func_35354_a(var3);
-		this.func_35354_a(var3);
-		this.func_35354_a(var3);
-		this.func_35354_a(var3);
-		this.func_35354_a(var3);
 		GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
 		Tessellator var4 = Tessellator.instance;
 		var4.startDrawingQuads();
-		float var5 = this.width > this.height ? 120.0F / (float)this.width : 120.0F / (float)this.height;
-		float var6 = (float)this.height * var5 / 256.0F;
-		float var7 = (float)this.width * var5 / 256.0F;
-		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
-		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
 		var4.setColorRGBA_F(1.0F, 1.0F, 1.0F, 1.0F);
-		int var8 = this.width;
-		int var9 = this.height;
-		var4.addVertexWithUV(0.0D, (double)var9, (double)this.zLevel, (double)(0.5F - var6), (double)(0.5F + var7));
-		var4.addVertexWithUV((double)var8, (double)var9, (double)this.zLevel, (double)(0.5F - var6), (double)(0.5F - var7));
-		var4.addVertexWithUV((double)var8, 0.0D, (double)this.zLevel, (double)(0.5F + var6), (double)(0.5F - var7));
-		var4.addVertexWithUV(0.0D, 0.0D, (double)this.zLevel, (double)(0.5F + var6), (double)(0.5F + var7));
 		var4.draw();
 	}
 
@@ -248,23 +225,44 @@
 		short var5 = 274;
 		int var6 = this.width / 2 - var5 / 2;
 		byte var7 = 30;
-		this.drawGradientRect(0, 0, this.width, this.height, -1426063361, 16777215);
-		this.drawGradientRect(0, 0, this.width, this.height, 0, -1442840576);
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/title/mclogo.png"));
-		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.drawTexturedModalRect(var6 + 0, var7 + 0, 0, 0, 155, 44);
-		this.drawTexturedModalRect(var6 + 155, var7 + 0, 0, 45, 155, 44);
-		var4.setColorOpaque_I(16777215);
-		GL11.glPushMatrix();
-		GL11.glTranslatef((float)(this.width / 2 + 90), 70.0F, 0.0F);
-		GL11.glRotatef(-20.0F, 0.0F, 0.0F, 1.0F);
-		float var8 = 1.8F - MathHelper.abs(MathHelper.sin((float)(System.currentTimeMillis() % 1000L) / 1000.0F * (float)Math.PI * 2.0F) * 0.1F);
-		var8 = var8 * 100.0F / (float)(this.fontRenderer.getStringWidth(this.splashText) + 32);
-		GL11.glScalef(var8, var8, var8);
-		this.drawCenteredString(this.fontRenderer, this.splashText, 0, -8, 16776960);
-		GL11.glPopMatrix();
-		this.drawString(this.fontRenderer, "Minecraft Beta 1.8.1", 2, this.height - 10, 16777215);
-		String var9 = "Copyright Mojang AB. Do not distribute!";
+		if (this.creditsMode) {
+			this.drawGradientRect(this.width / 2 - 64, 10, this.width / 2 + 64, credits.size() * 10 + 30, -1073741824, -1073741824);
+
+			int i = 20;
+			for (String line : credits) {
+				int color = 0xFFFFFF;
+				if (line.chars().allMatch(c -> Character.isUpperCase(c) || !Character.isAlphabetic(c))) {
+					color = 0xFFFF55;
+				}
+
+				this.drawCenteredString(this.fontRenderer, line, this.width / 2, i, color);
+				i += 10;
+			}
+
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/title/staggo-chillin.png"));
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			this.drawTexturedModalRect(0, this.height - 128, 0, 0, 128, 128);
+		} else {
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/title/mclogo.png"));
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			this.drawTexturedModalRect(var6 + 0, var7 + 0, 0, 0, 155, 64);
+			this.drawTexturedModalRect(var6 + 155, var7 + 0, 0, 64, 155, 64);
+			var4.setColorOpaque_I(16777215);
+			GL11.glPushMatrix();
+			GL11.glTranslatef((float)(this.width / 2 + 100), 80.0F, 0.0F);
+			GL11.glRotatef(-20.0F, 0.0F, 0.0F, 1.0F);
+			float var8 = 1.8F - MathHelper.abs(MathHelper.sin((float)(System.currentTimeMillis() % 1000L) / 1000.0F * (float)Math.PI * 2.0F) * 0.1F);
+			var8 = var8 * 100.0F / (float)(this.fontRenderer.getStringWidth(this.splashText) + 32);
+			GL11.glScalef(var8, var8, var8);
+			this.drawCenteredString(this.fontRenderer, this.splashText, 0, -8, 0x55FF00);
+			GL11.glPopMatrix();
+		}
+		this.drawString(this.fontRenderer, "Tropical Adventure 1.0.1", 2, this.height - 10, 16777215);
+		String var9 = "Tropical Adventure is not affiliated with Mojang";
+		this.drawString(this.fontRenderer, var9, this.width - this.fontRenderer.getStringWidth(var9) - 2, this.height - 26, 0xAAAAAA);
+		var9 = "and is not an official Minecraft product.";
+		this.drawString(this.fontRenderer, var9, this.width - this.fontRenderer.getStringWidth(var9) - 2, this.height - 18, 0xAAAAAA);
+		var9 = "Copyright Mojang AB. Do not distribute!";
 		this.drawString(this.fontRenderer, var9, this.width - this.fontRenderer.getStringWidth(var9) - 2, this.height - 10, 16777215);
 		super.drawScreen(var1, var2, var3);
 	}
--- net/minecraft/src/ChunkCache.java
+++ net/minecraft/src/ChunkCache.java
@@ -26,8 +26,7 @@
 		if(var2 < 0) {
 			return 0;
 		} else {
-			this.worldObj.getClass();
-			if(var2 >= 128) {
+			if(var2 >= 256) {
 				return 0;
 			} else {
 				int var4 = (var1 >> 4) - this.chunkX;
@@ -81,7 +80,7 @@
 			int var6;
 			if(var4) {
 				var5 = this.getBlockId(var1, var2, var3);
-				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID || var5 == Block.stairCompactPlanks.blockID || var5 == Block.stairCompactCobblestone.blockID) {
+				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID || var5 == Block.stairCompactPlanks.blockID || var5 == Block.stairCompactCobblestone.blockID || var5 == Block.stairSingleWood.blockID) {
 					var6 = this.getLightValueExt(var1, var2 + 1, var3, false);
 					int var7 = this.getLightValueExt(var1 + 1, var2, var3, false);
 					int var8 = this.getLightValueExt(var1 - 1, var2, var3, false);
@@ -110,8 +109,7 @@
 			if(var2 < 0) {
 				return 0;
 			} else {
-				this.worldObj.getClass();
-				if(var2 >= 128) {
+				if(var2 >= 256) {
 					var5 = 15 - this.worldObj.skylightSubtracted;
 					if(var5 < 0) {
 						var5 = 0;
@@ -133,8 +131,7 @@
 		if(var2 < 0) {
 			return 0;
 		} else {
-			this.worldObj.getClass();
-			if(var2 >= 128) {
+			if(var2 >= 256) {
 				return 0;
 			} else {
 				int var4 = (var1 >> 4) - this.chunkX;
@@ -173,18 +170,15 @@
 			var3 = 0;
 		}
 
-		this.worldObj.getClass();
-		if(var3 >= 128) {
-			this.worldObj.getClass();
-			var3 = 128 - 1;
+		if(var3 >= 256) {
+			var3 = 256 - 1;
 		}
 
 		if(var3 >= 0) {
-			this.worldObj.getClass();
-			if(var3 < 128 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 <= 30000000) {
+			if(var3 < 256 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 <= 30000000) {
 				int var5 = this.getBlockId(var2, var3, var4);
 				int var6;
-				if(var5 != Block.stairSingle.blockID && var5 != Block.tilledField.blockID && var5 != Block.stairCompactCobblestone.blockID && var5 != Block.stairCompactPlanks.blockID) {
+				if(var5 != Block.stairSingle.blockID && var5 != Block.tilledField.blockID && var5 != Block.stairCompactCobblestone.blockID && var5 != Block.stairCompactPlanks.blockID && var5 != Block.stairSingleWood.blockID) {
 					var5 = (var2 >> 4) - this.chunkX;
 					var6 = (var4 >> 4) - this.chunkZ;
 					return this.chunkArray[var5][var6].getSavedLightValue(var1, var2 & 15, var3, var4 & 15);
@@ -223,15 +217,12 @@
 			var3 = 0;
 		}
 
-		this.worldObj.getClass();
-		if(var3 >= 128) {
-			this.worldObj.getClass();
-			var3 = 128 - 1;
+		if(var3 >= 256) {
+			var3 = 256 - 1;
 		}
 
 		if(var3 >= 0) {
-			this.worldObj.getClass();
-			if(var3 < 128 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 <= 30000000) {
+			if(var3 < 256 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 <= 30000000) {
 				int var5 = (var2 >> 4) - this.chunkX;
 				int var6 = (var4 >> 4) - this.chunkZ;
 				return this.chunkArray[var5][var6].getSavedLightValue(var1, var2 & 15, var3, var4 & 15);
@@ -242,7 +233,6 @@
 	}
 
 	public int func_35452_b() {
-		this.worldObj.getClass();
-		return 128;
+		return 256;
 	}
 }
--- /dev/null
+++ net/minecraft/src/TextureWaterCausticsFX.java
@@ -1,0 +1,85 @@
+package net.minecraft.src;
+
+public class TextureWaterCausticsFX extends TextureFX {
+	protected float[] field_1158_g = new float[256];
+	protected float[] field_1157_h = new float[256];
+	protected float[] field_1156_i = new float[256];
+	protected float[] field_1155_j = new float[256];
+	private int tickCounter = 0;
+
+	public TextureWaterCausticsFX() {
+		super(Block.waterMoving.blockIndexInTexture + 16);
+	}
+
+	public void onTick() {
+		++this.tickCounter;
+
+		int var1;
+		int var2;
+		float var3;
+		int var5;
+		int var6;
+		for(var1 = 0; var1 < 16; ++var1) {
+			for(var2 = 0; var2 < 16; ++var2) {
+				var3 = 0.0F;
+
+				for(int var4 = var1 - 1; var4 <= var1 + 1; ++var4) {
+					var5 = var4 & 15;
+					var6 = var2 & 15;
+					var3 += this.field_1158_g[var5 + var6 * 16];
+				}
+
+				this.field_1157_h[var1 + var2 * 16] = var3 / 3.3F + this.field_1156_i[var1 + var2 * 16] * 0.8F;
+			}
+		}
+
+		for(var1 = 0; var1 < 16; ++var1) {
+			for(var2 = 0; var2 < 16; ++var2) {
+				this.field_1156_i[var1 + var2 * 16] += this.field_1155_j[var1 + var2 * 16] * 0.05F;
+				if(this.field_1156_i[var1 + var2 * 16] < 0.0F) {
+					this.field_1156_i[var1 + var2 * 16] = 0.0F;
+				}
+
+				this.field_1155_j[var1 + var2 * 16] -= 0.1F;
+				if(Math.random() < 0.05D) {
+					this.field_1155_j[var1 + var2 * 16] = 0.5F;
+				}
+			}
+		}
+
+		float[] var12 = this.field_1157_h;
+		this.field_1157_h = this.field_1158_g;
+		this.field_1158_g = var12;
+
+		for(var2 = 0; var2 < 256; ++var2) {
+			var3 = this.field_1158_g[var2];
+			if(var3 > 1.0F) {
+				var3 = 1.0F;
+			}
+
+			if(var3 < 0.0F) {
+				var3 = 0.0F;
+			}
+
+			float var13 = var3 * var3;
+			var5 = (int)(32.0F + var13 * 64.0F);
+			var6 = (int)(180.0F + var13 * 64.0F);
+			int var7 = 255;
+			int var8 = (int)(var13 * 255.0F);
+			if(this.anaglyphEnabled) {
+				int var9 = (var5 * 30 + var6 * 59 + var7 * 11) / 100;
+				int var10 = (var5 * 30 + var6 * 70) / 100;
+				int var11 = (var5 * 30 + var7 * 70) / 100;
+				var5 = var9;
+				var6 = var10;
+				var7 = var11;
+			}
+
+			this.imageData[var2 * 4 + 0] = (byte)var5;
+			this.imageData[var2 * 4 + 1] = (byte)var6;
+			this.imageData[var2 * 4 + 2] = (byte)var7;
+			this.imageData[var2 * 4 + 3] = (byte)var8;
+		}
+
+	}
+}
--- net/minecraft/src/BiomeGenDesert.java
+++ net/minecraft/src/BiomeGenDesert.java
@@ -1,14 +1,21 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class BiomeGenDesert extends BiomeGenBase {
 	public BiomeGenDesert(int var1) {
 		super(var1);
 		this.spawnableCreatureList.clear();
+		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 5, 4, 4));
 		this.topBlock = (byte)Block.sand.blockID;
 		this.fillerBlock = (byte)Block.sand.blockID;
-		this.field_35488_u.field_35911_r = -999;
 		this.field_35488_u.field_35908_u = 2;
 		this.field_35488_u.field_35906_w = 50;
 		this.field_35488_u.field_35916_x = 10;
+		this.stoneBlockMetadata = 2;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return this.field_35483_D;
 	}
 }
--- net/minecraft/src/RenderPlayer.java
+++ net/minecraft/src/RenderPlayer.java
@@ -19,17 +19,19 @@
 			Item var5 = var4.getItem();
 			if(var5 instanceof ItemArmor) {
 				ItemArmor var6 = (ItemArmor)var5;
-				this.loadTexture("/armor/" + armorFilenamePrefix[var6.renderIndex] + "_" + (var2 == 2 ? 2 : 1) + ".png");
-				ModelBiped var7 = var2 == 2 ? this.modelArmor : this.modelArmorChestplate;
-				var7.bipedHead.showModel = var2 == 0;
-				var7.bipedHeadwear.showModel = var2 == 0;
-				var7.bipedBody.showModel = var2 == 1 || var2 == 2;
-				var7.bipedRightArm.showModel = var2 == 1;
-				var7.bipedLeftArm.showModel = var2 == 1;
-				var7.bipedRightLeg.showModel = var2 == 2 || var2 == 3;
-				var7.bipedLeftLeg.showModel = var2 == 2 || var2 == 3;
-				this.setRenderPassModel(var7);
-				return true;
+				if (var6.renderIndex >= 0) {
+					this.loadTexture("/armor/" + armorFilenamePrefix[var6.renderIndex] + "_" + (var2 == 2 ? 2 : 1) + ".png");
+					ModelBiped var7 = var2 == 2 ? this.modelArmor : this.modelArmorChestplate;
+					var7.bipedHead.showModel = var2 == 0;
+					var7.bipedHeadwear.showModel = var2 == 0;
+					var7.bipedBody.showModel = var2 == 1 || var2 == 2;
+					var7.bipedRightArm.showModel = var2 == 1;
+					var7.bipedLeftArm.showModel = var2 == 1;
+					var7.bipedRightLeg.showModel = var2 == 2 || var2 == 3;
+					var7.bipedLeftLeg.showModel = var2 == 2 || var2 == 3;
+					this.setRenderPassModel(var7);
+					return true;
+				}
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/ItemBottle.java
@@ -1,0 +1,112 @@
+package net.minecraft.src;
+
+public class ItemBottle extends ItemFood {
+	public final boolean full;
+	public final int impurity;
+
+	public ItemBottle(int var1) {
+		this(var1, 0, 0);
+	}
+
+	public ItemBottle(int var1, int var2, float var3) {
+		this(var1, var2, var3, 0);
+	}
+
+	public ItemBottle(int var1, int var2, float var3, int var4) {
+		super(var1, var2, var3, false);
+		this.full = var2 > 0;
+		this.impurity = var4;
+	}
+
+	public ItemStack func_35413_b(ItemStack var1, World var2, EntityPlayer var3) {
+		Item item = Item.glassBottle;
+		if (this.shiftedIndex == Item.impureWaterBowl.shiftedIndex
+				|| this.shiftedIndex == Item.waterBowl.shiftedIndex) {
+			item = Item.bowlEmpty;
+		}
+
+		if (var1.stackSize == 1) {
+			var1 = new ItemStack(item);
+		} else {
+			--var1.stackSize;
+			var3.inventory.addItemStackToInventory(new ItemStack(item));
+		}
+		var3.func_35191_at().func_35771_a(this.getHealAmount(), this.func_35426_m());
+
+		if(!var2.multiplayerWorld && this.impurity > 0) {
+			var3.func_35165_a(new PotionEffect(Potion.field_35691_s.field_35670_H, this.impurity, 5));
+		}
+
+		if(!var2.multiplayerWorld && this.field_35433_bx > 0 && var2.rand.nextFloat() < this.field_35429_bA) {
+			var3.func_35165_a(new PotionEffect(this.field_35433_bx, this.field_35432_by * 20, this.field_35427_bz));
+		}
+
+		return var1;
+	}
+
+	public EnumAction func_35412_b(ItemStack var1) {
+		return EnumAction.eat;
+	}
+
+	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+		if (this.full) {
+			if (var3.func_35197_b(this.field_35433_bx > 0)) {
+				var3.func_35199_b(var1, this.func_35411_c(var1));
+			}
+			return var1;
+		}
+
+		float var4 = 1.0F;
+		float var5 = var3.prevRotationPitch + (var3.rotationPitch - var3.prevRotationPitch) * var4;
+		float var6 = var3.prevRotationYaw + (var3.rotationYaw - var3.prevRotationYaw) * var4;
+		double var7 = var3.prevPosX + (var3.posX - var3.prevPosX) * (double)var4;
+		double var9 = var3.prevPosY + (var3.posY - var3.prevPosY) * (double)var4 + 1.62D - (double)var3.yOffset;
+		double var11 = var3.prevPosZ + (var3.posZ - var3.prevPosZ) * (double)var4;
+		Vec3D var13 = Vec3D.createVector(var7, var9, var11);
+		float var14 = MathHelper.cos(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
+		float var15 = MathHelper.sin(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
+		float var16 = -MathHelper.cos(-var5 * ((float)Math.PI / 180.0F));
+		float var17 = MathHelper.sin(-var5 * ((float)Math.PI / 180.0F));
+		float var18 = var15 * var16;
+		float var20 = var14 * var16;
+		double var21 = 5.0D;
+		Vec3D var23 = var13.addVector((double)var18 * var21, (double)var17 * var21, (double)var20 * var21);
+		MovingObjectPosition var24 = var2.rayTraceBlocks_do(var13, var23, true);
+		if(var24 == null) {
+			return var1;
+		} else {
+			if(var24.typeOfHit == EnumMovingObjectType.TILE) {
+				int var25 = var24.blockX;
+				int var26 = var24.blockY;
+				int var27 = var24.blockZ;
+				if(!var2.canMineBlock(var3, var25, var26, var27)) {
+					return var1;
+				}
+
+				if(!var3.func_35190_e(var25, var26, var27)) {
+					return var1;
+				}
+
+				if(var2.getBlockId(var25, var26, var27) == Block.waterStill.blockID && var2.getBlockMetadata(var25, var26, var27) == 0) {
+					Item item = null;
+					if (this.shiftedIndex == Item.glassBottle.shiftedIndex) {
+						item = Item.impureWaterBottle;
+					} else if (this.shiftedIndex == Item.bowlEmpty.shiftedIndex) {
+						item = Item.impureWaterBowl;
+					}
+
+					if (item != null) {
+						if (var1.stackSize == 1) {
+							var1 = new ItemStack(item);
+						} else {
+							--var1.stackSize;
+							var3.inventory.addItemStackToInventory(new ItemStack(item));
+						}
+					}
+				}
+			}
+
+			return var1;
+		}
+	}
+}
--- net/minecraft/src/WorldGenTrees.java
+++ net/minecraft/src/WorldGenTrees.java
@@ -3,87 +3,156 @@
 import java.util.Random;
 
 public class WorldGenTrees extends WorldGenerator {
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		int var6 = var2.nextInt(3) + 4;
-		boolean var7 = true;
-		if(var4 >= 1) {
-			int var10000 = var4 + var6 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
-				int var8;
-				int var10;
-				int var11;
-				int var12;
-				for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
-					byte var9 = 1;
-					if(var8 == var4) {
-						var9 = 0;
-					}
-
-					if(var8 >= var4 + 1 + var6 - 2) {
-						var9 = 2;
-					}
-
-					for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
-						for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-							if(var8 >= 0) {
-								var1.getClass();
-								if(var8 < 128) {
-									var12 = var1.getBlockId(var10, var8, var11);
-									if(var12 != 0 && var12 != Block.leaves.blockID) {
-										var7 = false;
-									}
-									continue;
-								}
-							}
-
-							var7 = false;
-						}
-					}
-				}
-
-				if(!var7) {
-					return false;
-				}
-
-				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if(var8 == Block.grass.blockID || var8 == Block.dirt.blockID) {
-					var1.getClass();
-					if(var4 < 128 - var6 - 1) {
-						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
-
-						int var16;
-						for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
-							var10 = var16 - (var4 + var6);
-							var11 = 1 - var10 / 2;
-
-							for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
-								int var13 = var12 - var3;
-
-								for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
-									int var15 = var14 - var5;
-									if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
-										var1.setBlock(var12, var16, var14, Block.leaves.blockID);
-									}
-								}
-							}
-						}
-
-						for(var16 = 0; var16 < var6; ++var16) {
-							var10 = var1.getBlockId(var3, var4 + var16, var5);
-							if(var10 == 0 || var10 == Block.leaves.blockID) {
-								var1.setBlock(var3, var4 + var16, var5, Block.wood.blockID);
-							}
-						}
-
-						return true;
-					}
-				}
-
+	private final int field_48202_a;
+	private final boolean field_48200_b;
+	private final int field_48201_c;
+	private final int field_48199_d;
+
+	public WorldGenTrees() {
+		this(4, 0, 0, false);
+	}
+
+	public WorldGenTrees(int par2, int par3, int par4, boolean par5) {
+		field_48202_a = par2;
+		field_48201_c = par3;
+		field_48199_d = par4;
+		field_48200_b = par5;
+	}
+
+	public boolean generate(World par1World, Random par2Random, int par3, int par4, int par5) {
+		int i = par2Random.nextInt(3) + field_48202_a;
+		boolean flag = true;
+
+		if (par4 < 1 || par4 + i + 1 > 256) {
+			return false;
+		}
+
+		for (int j = par4; j <= par4 + 1 + i; j++) {
+			byte byte0 = 1;
+
+			if (j == par4) {
+				byte0 = 0;
+			}
+
+			if (j >= (par4 + 1 + i) - 2) {
+				byte0 = 2;
+			}
+
+			for (int l = par3 - byte0; l <= par3 + byte0 && flag; l++) {
+				for (int j1 = par5 - byte0; j1 <= par5 + byte0 && flag; j1++) {
+					if (j >= 0 && j < 256) {
+						int j2 = par1World.getBlockId(l, j, j1);
+
+						if (j2 != 0 && j2 != Block.leaves.blockID && j2 != Block.grass.blockID && j2 != Block.dirt.blockID && j2 != Block.wood.blockID) {
+							flag = false;
+							}
+					} else {
+						flag = false;
+						}
+				}
+			}
+		}
+
+		if (!flag) {
 				return false;
 			}
-		}
-
-		return false;
+
+		int k = par1World.getBlockId(par3, par4 - 1, par5);
+
+		if (k != Block.grass.blockID && k != Block.dirt.blockID || par4 >= 256 - i - 1) {
+			return false;
+		}
+
+		par1World.setBlock(par3, par4 - 1, par5, Block.dirt.blockID);
+		byte byte1 = 3;
+		int i1 = 0;
+
+		for (int k1 = (par4 - byte1) + i; k1 <= par4 + i; k1++) {
+			int k2 = k1 - (par4 + i);
+			int j3 = (i1 + 1) - k2 / 2;
+
+			for (int l3 = par3 - j3; l3 <= par3 + j3; l3++) {
+				int j4 = l3 - par3;
+
+				for (int l4 = par5 - j3; l4 <= par5 + j3; l4++) {
+					int i5 = l4 - par5;
+
+					if ((Math.abs(j4) != j3 || Math.abs(i5) != j3 || par2Random.nextInt(2) != 0 && k2 != 0) && !Block.opaqueCubeLookup[par1World.getBlockId(l3, k1, l4)]) {
+						par1World.setBlockAndMetadata(l3, k1, l4, Block.leaves.blockID, field_48199_d);
+					}
+				}
+			}
+		}
+
+		for (int l1 = 0; l1 < i; l1++) {
+			int l2 = par1World.getBlockId(par3, par4 + l1, par5);
+
+			if (l2 != 0 && l2 != Block.leaves.blockID) {
+				continue;
+			}
+
+			par1World.setBlockAndMetadata(par3, par4 + l1, par5, Block.wood.blockID, field_48201_c);
+
+			if (!field_48200_b || l1 <= 0) {
+				continue;
+			}
+
+			if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3 - 1, par4 + l1, par5)) {
+				par1World.setBlockAndMetadata(par3 - 1, par4 + l1, par5, Block.field_35278_bv.blockID, 8);
+			}
+
+			if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3 + 1, par4 + l1, par5)) {
+				par1World.setBlockAndMetadata(par3 + 1, par4 + l1, par5, Block.field_35278_bv.blockID, 2);
+			}
+
+			if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3, par4 + l1, par5 - 1)) {
+				par1World.setBlockAndMetadata(par3, par4 + l1, par5 - 1, Block.field_35278_bv.blockID, 1);
+			}
+
+			if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3, par4 + l1, par5 + 1)) {
+				par1World.setBlockAndMetadata(par3, par4 + l1, par5 + 1, Block.field_35278_bv.blockID, 4);
+			}
+		}
+
+		if (field_48200_b) {
+			for (int i2 = (par4 - 3) + i; i2 <= par4 + i; i2++) {
+				int i3 = i2 - (par4 + i);
+				int k3 = 2 - i3 / 2;
+
+				for (int i4 = par3 - k3; i4 <= par3 + k3; i4++) {
+					for (int k4 = par5 - k3; k4 <= par5 + k3; k4++) {
+						if (par1World.getBlockId(i4, i2, k4) != Block.leaves.blockID) {
+							continue;
+						}
+
+						if (par2Random.nextInt(4) == 0 && par1World.getBlockId(i4 - 1, i2, k4) == 0) {
+							func_48198_a(par1World, i4 - 1, i2, k4, 8);
+						}
+
+						if (par2Random.nextInt(4) == 0 && par1World.getBlockId(i4 + 1, i2, k4) == 0) {
+							func_48198_a(par1World, i4 + 1, i2, k4, 2);
+						}
+
+						if (par2Random.nextInt(4) == 0 && par1World.getBlockId(i4, i2, k4 - 1) == 0) {
+							func_48198_a(par1World, i4, i2, k4 - 1, 1);
+						}
+
+						if (par2Random.nextInt(4) == 0 && par1World.getBlockId(i4, i2, k4 + 1) == 0) {
+							func_48198_a(par1World, i4, i2, k4 + 1, 4);
+						}
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+
+	private void func_48198_a(World par1World, int par2, int par3, int par4, int par5) {
+		par1World.setBlockAndMetadata(par2, par3, par4, Block.field_35278_bv.blockID, par5);
+
+		for (int i = 4; par1World.getBlockId(par2, --par3, par4) == 0 && i > 0; i--) {
+			par1World.setBlockAndMetadata(par2, par3, par4, Block.field_35278_bv.blockID, par5);
+		}
 	}
 }
--- net/minecraft/src/ChunkProviderHell.java
+++ net/minecraft/src/ChunkProviderHell.java
@@ -72,14 +72,8 @@
 						double var39 = (var20 - var16) * var31;
 
 						for(int var41 = 0; var41 < 4; ++var41) {
-							int var10000 = var41 + var9 * 4;
-							this.worldObj.getClass();
-							var10000 <<= 11;
-							int var10001 = 0 + var10 * 4;
-							this.worldObj.getClass();
-							int var42 = var10000 | var10001 << 7 | var11 * 8 + var30;
-							this.worldObj.getClass();
-							int var43 = 1 << 7;
+							int var42 = (var41 + var9 * 4) << 12 | (0 + var10 * 4) << 8 | var11 * 8 + var30;
+							int var43 = 1 << 8;
 							double var44 = 0.25D;
 							double var46 = var33;
 							double var48 = (var35 - var33) * var44;
@@ -117,7 +111,6 @@
 	}
 
 	public void func_4058_b(int var1, int var2, byte[] var3) {
-		this.worldObj.getClass();
 		int var4 = 128 - 64;
 		double var5 = 1.0D / 32.0D;
 		this.field_4162_p = this.field_4166_l.generateNoiseOctaves(this.field_4162_p, var1 * 16, var2 * 16, 0, 16, 16, 1, var5, var5, 1.0D);
@@ -135,10 +128,7 @@
 				this.worldObj.getClass();
 
 				for(int var15 = 127; var15 >= 0; --var15) {
-					int var10000 = var8 * 16 + var7;
-					this.worldObj.getClass();
-					int var16 = var10000 * 128 + var15;
-					this.worldObj.getClass();
+					int var16 = var8 << 12 | var7 << 8 | var15;
 					if(var15 >= 127 - this.hellRNG.nextInt(5)) {
 						var3[var16] = (byte)Block.bedrock.blockID;
 					} else if(var15 <= 0 + this.hellRNG.nextInt(5)) {
@@ -201,10 +191,10 @@
 	public Chunk provideChunk(int var1, int var2) {
 		this.hellRNG.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
 		this.worldObj.getClass();
-		byte[] var3 = new byte[16 * 128 * 16];
+		byte[] var3 = new byte[16 * 256 * 16];
 		this.func_4059_a(var1, var2, var3);
 		this.func_4058_b(var1, var2, var3);
-		this.field_4159_s.generate(this, this.worldObj, var1, var2, var3);
+		this.field_4159_s.generate(this, this.worldObj, var1, var2, var3, null);
 		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
 		return var4;
 	}
--- net/minecraft/src/TileEntityFurnace.java
+++ net/minecraft/src/TileEntityFurnace.java
@@ -160,7 +160,14 @@
 			ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().shiftedIndex);
 			if(this.furnaceItemStacks[2] == null) {
 				this.furnaceItemStacks[2] = var1.copy();
-			} else if(this.furnaceItemStacks[2].itemID == var1.itemID) {
+				if (this.furnaceItemStacks[0].getHasSubtypes() && this.furnaceItemStacks[2].getHasSubtypes() && this.furnaceItemStacks[0].getItemDamage() > 0) {
+					this.furnaceItemStacks[2].setItemDamage(this.furnaceItemStacks[0].getItemDamage());
+				}
+			} else if(this.furnaceItemStacks[2].itemID == var1.itemID &&
+					(this.furnaceItemStacks[2].getItemDamage() == 0
+							|| !this.furnaceItemStacks[0].getHasSubtypes()
+							|| !this.furnaceItemStacks[2].getHasSubtypes()
+							|| this.furnaceItemStacks[0].getItemDamage() == this.furnaceItemStacks[2].getItemDamage())) {
 				++this.furnaceItemStacks[2].stackSize;
 			}
 
--- /dev/null
+++ net/minecraft/src/WorldGenUndergroundTree.java
@@ -1,0 +1,132 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenUndergroundTree extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int var6 = var2.nextInt(4) + 3;
+		boolean var7 = true;
+		if(var4 >= 1) {
+			if(var4 + var6 + 1 <= 256) {
+				int var8;
+				int var10;
+				int var11;
+				int var12;
+				for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
+					byte var9 = 1;
+					if(var8 == var4) {
+						var9 = 0;
+					}
+
+					if(var8 >= var4 + 1 + var6 - 2) {
+						var9 = 3;
+					}
+
+					for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
+						for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
+							if(var8 >= 0) {
+								if(var8 < 256) {
+									var12 = var1.getBlockId(var10, var8, var11);
+									if(var12 == 0 || var12 == Block.leaves.blockID) {
+										continue;
+									}
+
+									if(var8 > var4) {
+										var7 = false;
+									}
+									continue;
+								}
+							}
+
+							var7 = false;
+						}
+					}
+				}
+
+				if(!var7) {
+					return false;
+				}
+
+				var8 = var1.getBlockId(var3, var4 - 1, var5);
+				if(var8 == Block.stone.blockID) {
+					if(var4 < 256 - var6 - 1) {
+						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
+
+						int var13;
+						int var16;
+						for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
+							var10 = var16 - (var4 + var6);
+							var11 = 2 - var10 / 2;
+
+							for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
+								var13 = var12 - var3;
+
+								for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
+									int var15 = var14 - var5;
+									if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
+										var1.setBlock(var12, var16, var14, Block.leaves.blockID);
+									}
+								}
+							}
+						}
+
+						for(var16 = 0; var16 < var6; ++var16) {
+							var10 = var1.getBlockId(var3, var4 + var16, var5);
+							if(var10 == 0 || var10 == Block.leaves.blockID || var10 == Block.waterMoving.blockID || var10 == Block.waterStill.blockID) {
+								var1.setBlock(var3, var4 + var16, var5, Block.wood.blockID);
+							}
+						}
+
+						for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
+							var10 = var16 - (var4 + var6);
+							var11 = 2 - var10 / 2;
+
+							for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
+								for(var13 = var5 - var11; var13 <= var5 + var11; ++var13) {
+									if(var1.getBlockId(var12, var16, var13) == Block.leaves.blockID) {
+										if(var2.nextInt(4) == 0 && var1.getBlockId(var12 - 1, var16, var13) == 0) {
+											this.func_35265_a(var1, var12 - 1, var16, var13, 8);
+										}
+
+										if(var2.nextInt(4) == 0 && var1.getBlockId(var12 + 1, var16, var13) == 0) {
+											this.func_35265_a(var1, var12 + 1, var16, var13, 2);
+										}
+
+										if(var2.nextInt(4) == 0 && var1.getBlockId(var12, var16, var13 - 1) == 0) {
+											this.func_35265_a(var1, var12, var16, var13 - 1, 1);
+										}
+
+										if(var2.nextInt(4) == 0 && var1.getBlockId(var12, var16, var13 + 1) == 0) {
+											this.func_35265_a(var1, var12, var16, var13 + 1, 4);
+										}
+									}
+								}
+							}
+						}
+
+						return true;
+					}
+				}
+
+				return false;
+			}
+		}
+
+		return false;
+	}
+
+	private void func_35265_a(World var1, int var2, int var3, int var4, int var5) {
+		var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.field_35278_bv.blockID, var5);
+		int var6 = 4;
+
+		while(true) {
+			--var3;
+			if(var1.getBlockId(var2, var3, var4) != 0 || var6 <= 0) {
+				return;
+			}
+
+			var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.field_35278_bv.blockID, var5);
+			--var6;
+		}
+	}
+}
--- net/minecraft/src/WorldProvider.java
+++ net/minecraft/src/WorldProvider.java
@@ -36,7 +36,7 @@
 
 	public boolean canCoordinateBeSpawn(int var1, int var2) {
 		int var3 = this.worldObj.getFirstUncoveredBlock(var1, var2);
-		return var3 == Block.grass.blockID;
+        return var3 == Block.grass.blockID;
 	}
 
 	public float calculateCelestialAngle(long var1, float var3) {
--- net/minecraft/src/BiomeGenForest.java
+++ net/minecraft/src/BiomeGenForest.java
@@ -5,12 +5,11 @@
 public class BiomeGenForest extends BiomeGenBase {
 	public BiomeGenForest(int var1) {
 		super(var1);
-		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 5, 4, 4));
 		this.field_35488_u.field_35911_r = 10;
 		this.field_35488_u.field_35909_t = 2;
 	}
 
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
-		return (WorldGenerator)(var1.nextInt(5) == 0 ? this.field_35481_B : (var1.nextInt(10) == 0 ? this.field_35480_A : this.field_35493_z));
+		return (WorldGenerator)(var1.nextInt(5) == 0 ? this.field_35483_D : (var1.nextInt(10) == 0 ? this.field_35480_A : new WorldGenTrees(4 + var1.nextInt(7), 0, 0, true)));
 	}
 }
--- net/minecraft/src/GenLayerRiver.java
+++ net/minecraft/src/GenLayerRiver.java
@@ -7,26 +7,22 @@
 	}
 
 	public int[] func_35500_a(int var1, int var2, int var3, int var4) {
-		int var5 = var1 - 1;
-		int var6 = var2 - 1;
-		int var7 = var3 + 2;
-		int var8 = var4 + 2;
+		int var5 = var1 - 2;
+		int var6 = var2 - 2;
+		int var7 = var3 + 4;
+		int var8 = var4 + 4;
 		int[] var9 = this.field_35504_a.func_35500_a(var5, var6, var7, var8);
 		int[] var10 = IntCache.func_35267_a(var3 * var4);
 
 		for(int var11 = 0; var11 < var4; ++var11) {
 			for(int var12 = 0; var12 < var3; ++var12) {
-				int var13 = var9[var12 + 0 + (var11 + 1) * var7];
-				int var14 = var9[var12 + 2 + (var11 + 1) * var7];
-				int var15 = var9[var12 + 1 + (var11 + 0) * var7];
-				int var16 = var9[var12 + 1 + (var11 + 2) * var7];
-				int var17 = var9[var12 + 1 + (var11 + 1) * var7];
-				if(var17 != 0 && var13 != 0 && var14 != 0 && var15 != 0 && var16 != 0) {
-					if(var17 == var13 && var17 == var15 && var17 == var14 && var17 == var16) {
-						var10[var12 + var11 * var3] = -1;
-					} else {
-						var10[var12 + var11 * var3] = BiomeGenBase.field_35487_i.field_35494_y;
-					}
+				int var13 = func_151630_c(var9[var12 + 0 + (var11 + 2) * var7]);
+				int var14 = func_151630_c(var9[var12 + 4 + (var11 + 2) * var7]);
+				int var15 = func_151630_c(var9[var12 + 2 + (var11 + 0) * var7]);
+				int var16 = func_151630_c(var9[var12 + 2 + (var11 + 4) * var7]);
+				int var17 = func_151630_c(var9[var12 + 2 + (var11 + 2) * var7]);
+				if(var17 == var13 && var17 == var15 && var17 == var14 && var17 == var16) {
+					var10[var12 + var11 * var3] = -1;
 				} else {
 					var10[var12 + var11 * var3] = BiomeGenBase.field_35487_i.field_35494_y;
 				}
@@ -34,5 +30,9 @@
 		}
 
 		return var10;
+	}
+
+	private int func_151630_c(int p_151630_1_) {
+		return p_151630_1_ >= 2 ? 2 + (p_151630_1_ & 1) : p_151630_1_;
 	}
 }
--- net/minecraft/src/GenLayer.java
+++ net/minecraft/src/GenLayer.java
@@ -9,15 +9,16 @@
 	public static GenLayer[] func_35497_a(long var0) {
 		LayerIsland var2 = new LayerIsland(1L);
 		GenLayerZoomFuzzy var9 = new GenLayerZoomFuzzy(2000L, var2);
-		GenLayerIsland var10 = new GenLayerIsland(1L, var9);
-		GenLayerZoom var11 = new GenLayerZoom(2001L, var10);
-		var10 = new GenLayerIsland(2L, var11);
-		var11 = new GenLayerZoom(2002L, var10);
-		var10 = new GenLayerIsland(3L, var11);
-		var11 = new GenLayerZoom(2003L, var10);
-		var10 = new GenLayerIsland(3L, var11);
-		var11 = new GenLayerZoom(2004L, var10);
-		var10 = new GenLayerIsland(3L, var11);
+		GenLayer var10 = new GenLayerIsland(1L, var9);
+		var10 = new GenLayerZoom(2001L, var10);
+		var10 = new GenLayerIsland(2L, var10);
+		var10 = new GenLayerIsland(50L, var10);
+		var10 = new GenLayerIsland(70L, var10);
+		var10 = new GenLayerRemoveTooMuchOcean(2L, var10);
+		var10 = new GenLayerIsland(3L, var10);
+		var10 = new GenLayerZoom(2002L, var10);
+		var10 = new GenLayerZoom(2003L, var10);
+		var10 = new GenLayerIsland(4L, var10);
 		byte var3 = 4;
 		GenLayer var4 = GenLayerZoom.func_35515_a(1000L, var10, 0);
 		GenLayerRiverInit var12 = new GenLayerRiverInit(100L, var4);
@@ -26,7 +27,11 @@
 		GenLayerSmooth var14 = new GenLayerSmooth(1000L, var13);
 		GenLayer var5 = GenLayerZoom.func_35515_a(1000L, var10, 0);
 		GenLayerVillageLandscape var15 = new GenLayerVillageLandscape(200L, var5);
-		Object var16 = GenLayerZoom.func_35515_a(1000L, var15, 2);
+		Object var16 = GenLayerZoom.func_35515_a(1000L, var15, 1);
+		var16 = new GenLayerAddOasis(210L, (GenLayer)var16);
+		var16 = new GenLayerShore(210L, (GenLayer)var16);
+		var16 = new GenLayerBiomeVariants(220L, (GenLayer)var16);
+		var16 = GenLayerZoom.func_35515_a(1001L, (GenLayer)var16, 1);
 		Object var6 = new GenLayerTemperature((GenLayer)var16);
 		Object var7 = new GenLayerDownfall((GenLayer)var16);
 
--- net/minecraft/src/TextureWaterFX.java
+++ net/minecraft/src/TextureWaterFX.java
@@ -63,7 +63,7 @@
 
 			float var13 = var3 * var3;
 			var5 = (int)(32.0F + var13 * 32.0F);
-			var6 = (int)(50.0F + var13 * 64.0F);
+			var6 = (int)(180.0F + var13 * 64.0F);
 			int var7 = 255;
 			int var8 = (int)(146.0F + var13 * 50.0F);
 			if(this.anaglyphEnabled) {
--- net/minecraft/src/NBTBase.java
+++ net/minecraft/src/NBTBase.java
@@ -66,6 +66,8 @@
 			return new NBTTagList();
 		case 10:
 			return new NBTTagCompound();
+		case 11:
+			return new NBTTagIntArray();
 		default:
 			return null;
 		}
@@ -95,6 +97,8 @@
 			return "TAG_List";
 		case 10:
 			return "TAG_Compound";
+		case 11:
+			return "TAG_Int_Array";
 		default:
 			return "UNKNOWN";
 		}
--- net/minecraft/src/EntityBoat.java
+++ net/minecraft/src/EntityBoat.java
@@ -71,15 +71,7 @@
 					this.riddenByEntity.mountEntity(this);
 				}
 
-				int var3;
-				for(var3 = 0; var3 < 3; ++var3) {
-					this.dropItemWithOffset(Block.planks.blockID, 1, 0.0F);
-				}
-
-				for(var3 = 0; var3 < 2; ++var3) {
-					this.dropItemWithOffset(Item.stick.shiftedIndex, 1, 0.0F);
-				}
-
+				this.dropItemWithOffset(Item.boat.shiftedIndex, 1, 0.0F);
 				this.setEntityDead();
 			}
 
@@ -243,20 +235,7 @@
 				}
 			}
 
-			if(this.isCollidedHorizontally && var6 > 0.15D) {
-				if(!this.worldObj.multiplayerWorld) {
-					this.setEntityDead();
-
-					int var22;
-					for(var22 = 0; var22 < 3; ++var22) {
-						this.dropItemWithOffset(Block.planks.blockID, 1, 0.0F);
-					}
-
-					for(var22 = 0; var22 < 2; ++var22) {
-						this.dropItemWithOffset(Item.stick.shiftedIndex, 1, 0.0F);
-					}
-				}
-			} else {
+			if(!this.isCollidedHorizontally || var6 <= 0.15D) {
 				this.motionX *= (double)0.99F;
 				this.motionY *= (double)0.95F;
 				this.motionZ *= (double)0.99F;
--- net/minecraft/src/ChunkProviderGenerate.java
+++ net/minecraft/src/ChunkProviderGenerate.java
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.Arrays;
 import java.util.Random;
 
 public class ChunkProviderGenerate implements IChunkProvider {
@@ -7,14 +8,15 @@
 	private NoiseGeneratorOctaves field_912_k;
 	private NoiseGeneratorOctaves field_911_l;
 	private NoiseGeneratorOctaves field_910_m;
+	private NoiseGeneratorOctaves field_909_n;
 	private NoiseGeneratorOctaves field_908_o;
+	private NoiseGeneratorOctaves caveNoise;
 	public NoiseGeneratorOctaves field_922_a;
 	public NoiseGeneratorOctaves field_921_b;
 	public NoiseGeneratorOctaves mobSpawnerNoise;
 	private World worldObj;
 	private final boolean field_35389_t;
 	private double[] field_4180_q;
-	private double[] stoneNoise = new double[256];
 	private MapGenBase caveGenerator = new MapGenCaves();
 	public MapGenStronghold field_35386_d = new MapGenStronghold();
 	public MapGenVillage field_35387_e = new MapGenVillage();
@@ -28,6 +30,8 @@
 	double[] field_4181_h;
 	float[] field_35388_l;
 	int[][] unusedIntArray32x32 = new int[32][32];
+	private boolean[] hitSolid = new boolean[16];
+	private boolean[] doWater = new boolean[16];
 
 	public ChunkProviderGenerate(World var1, long var2, boolean var4) {
 		this.worldObj = var1;
@@ -36,28 +40,40 @@
 		this.field_912_k = new NoiseGeneratorOctaves(this.rand, 16);
 		this.field_911_l = new NoiseGeneratorOctaves(this.rand, 16);
 		this.field_910_m = new NoiseGeneratorOctaves(this.rand, 8);
+		this.field_909_n = new NoiseGeneratorOctaves(this.rand, 4);
 		this.field_908_o = new NoiseGeneratorOctaves(this.rand, 4);
 		this.field_922_a = new NoiseGeneratorOctaves(this.rand, 10);
 		this.field_921_b = new NoiseGeneratorOctaves(this.rand, 16);
 		this.mobSpawnerNoise = new NoiseGeneratorOctaves(this.rand, 8);
+		this.caveNoise = new NoiseGeneratorOctaves(this.rand, 4);
+		this.field_35388_l = new float[25];
+
+		for(int var8 = -2; var8 <= 2; ++var8) {
+			for(int var9 = -2; var9 <= 2; ++var9) {
+				float var10 = 10.0F / MathHelper.sqrt_float((float)(var8 * var8 + var9 * var9) + 0.2F);
+				this.field_35388_l[var8 + 2 + (var9 + 2) * 5] = var10;
+			}
+		}
 	}
 
 	public void generateTerrain(int var1, int var2, byte[] var3) {
 		byte var4 = 4;
-		this.worldObj.getClass();
-		int var5 = 128 / 8;
-		this.worldObj.getClass();
+		int var5 = 256 / 8;
 		byte var6 = 63;
 		int var7 = var4 + 1;
-		this.worldObj.getClass();
-		int var8 = 128 / 8 + 1;
+		int var8 = 256 / 8 + 1;
 		int var9 = var4 + 1;
 		this.biomesForGeneration = this.worldObj.getWorldChunkManager().func_35557_b(this.biomesForGeneration, var1 * 4 - 2, var2 * 4 - 2, var7 + 5, var9 + 5);
 		this.field_4180_q = this.func_4061_a(this.field_4180_q, var1 * var4, 0, var2 * var4, var7, var8, var9);
 
 		for(int var10 = 0; var10 < var4; ++var10) {
 			for(int var11 = 0; var11 < var4; ++var11) {
-				for(int var12 = 0; var12 < var5; ++var12) {
+				Arrays.fill(this.hitSolid, false);
+				for(int var12 = var5 - 1; var12 >= 0; --var12) {
+					for (int i = 0; i < 16; i++) {
+						this.doWater[i] = !this.hitSolid[i];
+					}
+
 					double var13 = 0.125D;
 					double var15 = this.field_4180_q[((var10 + 0) * var9 + var11 + 0) * var8 + var12 + 0];
 					double var17 = this.field_4180_q[((var10 + 0) * var9 + var11 + 1) * var8 + var12 + 0];
@@ -76,26 +92,23 @@
 						double var40 = (var21 - var17) * var32;
 
 						for(int var42 = 0; var42 < 4; ++var42) {
-							int var10000 = var42 + var10 * 4;
-							this.worldObj.getClass();
-							var10000 <<= 11;
-							int var10001 = 0 + var11 * 4;
-							this.worldObj.getClass();
-							int var43 = var10000 | var10001 << 7 | var12 * 8 + var31;
-							this.worldObj.getClass();
-							int var44 = 1 << 7;
+							int var43 = (var42 + var10 * 4) << 12 | (0 + var11 * 4) << 8 | var12 * 8 + var31;
+							int var44 = 1 << 8;
 							double var45 = 0.25D;
 							double var47 = var34;
 							double var49 = (var36 - var34) * var45;
 
 							for(int var51 = 0; var51 < 4; ++var51) {
+								int waterCheck = var42 << 2 | var51;
+
 								int var52 = 0;
-								if(var12 * 8 + var31 < var6) {
+								if(var12 * 8 + var31 < var6 && this.doWater[waterCheck]) {
 									var52 = Block.waterStill.blockID;
 								}
 
 								if(var47 > 0.0D) {
 									var52 = Block.stone.blockID;
+									if (var12 < 7 && var31 == 0) this.hitSolid[waterCheck] = true;
 								}
 
 								var3[var43] = (byte)var52;
@@ -118,65 +131,17 @@
 
 	}
 
-	public void replaceBlocksForBiome(int var1, int var2, byte[] var3, BiomeGenBase[] var4) {
-		this.worldObj.getClass();
-		byte var5 = 63;
+	public void replaceBlocksForBiome(int var1, int var2, byte[] var3, byte[] metadata, BiomeGenBase[] var4) {
 		double var6 = 1.0D / 32.0D;
-		this.stoneNoise = this.field_908_o.generateNoiseOctaves(this.stoneNoise, var1 * 16, var2 * 16, 0, 16, 16, 1, var6 * 2.0D, var6 * 2.0D, var6 * 2.0D);
-
-		for(int var8 = 0; var8 < 16; ++var8) {
-			for(int var9 = 0; var9 < 16; ++var9) {
-				BiomeGenBase var10 = var4[var9 + var8 * 16];
-				int var11 = (int)(this.stoneNoise[var8 + var9 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
-				int var12 = -1;
-				byte var13 = var10.topBlock;
-				byte var14 = var10.fillerBlock;
-				this.worldObj.getClass();
-
-				for(int var15 = 127; var15 >= 0; --var15) {
-					int var10000 = var9 * 16 + var8;
-					this.worldObj.getClass();
-					int var16 = var10000 * 128 + var15;
-					if(var15 <= 0 + this.rand.nextInt(5)) {
-						var3[var16] = (byte)Block.bedrock.blockID;
-					} else {
-						byte var17 = var3[var16];
-						if(var17 == 0) {
-							var12 = -1;
-						} else if(var17 == Block.stone.blockID) {
-							if(var12 == -1) {
-								if(var11 <= 0) {
-									var13 = 0;
-									var14 = (byte)Block.stone.blockID;
-								} else if(var15 >= var5 - 4 && var15 <= var5 + 1) {
-									var13 = var10.topBlock;
-									var14 = var10.fillerBlock;
-								}
-
-								if(var15 < var5 && var13 == 0) {
-									var13 = (byte)Block.waterStill.blockID;
-								}
-
-								var12 = var11;
-								if(var15 >= var5 - 1) {
-									var3[var16] = var13;
-								} else {
-									var3[var16] = var14;
-								}
-							} else if(var12 > 0) {
-								--var12;
-								var3[var16] = var14;
-								if(var12 == 0 && var14 == Block.sand.blockID) {
-									var12 = this.rand.nextInt(4);
-									var14 = (byte)Block.sandStone.blockID;
-								}
-							}
-						}
-					}
-				}
+
+		for (int x = 0; x < 16; ++x) {
+			for (int z = 0; z < 16; ++z) {
+				BiomeGenBase biome = var4[z << 4 | x];
+				int xx = var1 << 4 | x;
+				int zz = var2 << 4 | z;
+				biome.buildBiomeSurface(this.worldObj, this.rand, var3, metadata, xx, zz, this.field_908_o.func_806_a(xx * var6 * 2.0D, zz * var6 * 2.0D), this.field_909_n.generateNoise(xx * var6, zz * var6, 0.0D));
 			}
 		}
-
 	}
 
 	public Chunk loadChunk(int var1, int var2) {
@@ -185,20 +150,29 @@
 
 	public Chunk provideChunk(int var1, int var2) {
 		this.rand.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
-		this.worldObj.getClass();
-		byte[] var3 = new byte[16 * 128 * 16];
+		byte[] var3 = new byte[16 * 256 * 16];
+		byte[] metadata = new byte[16 * 256 * 16];
 		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
 		this.generateTerrain(var1, var2, var3);
 		this.biomesForGeneration = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, var1 * 16, var2 * 16, 16, 16);
-		this.replaceBlocksForBiome(var1, var2, var3, this.biomesForGeneration);
-		this.caveGenerator.generate(this, this.worldObj, var1, var2, var3);
+		this.replaceBlocksForBiome(var1, var2, var3, metadata, this.biomesForGeneration);
+		this.caveGenerator.generate(this, this.worldObj, var1, var2, var3, metadata);
 		if(this.field_35389_t) {
-			this.field_35386_d.generate(this, this.worldObj, var1, var2, var3);
-			this.field_35385_f.generate(this, this.worldObj, var1, var2, var3);
-			this.field_35387_e.generate(this, this.worldObj, var1, var2, var3);
-		}
-
-		this.field_35390_x.generate(this, this.worldObj, var1, var2, var3);
+			this.field_35386_d.generate(this, this.worldObj, var1, var2, var3, metadata);
+			this.field_35385_f.generate(this, this.worldObj, var1, var2, var3, metadata);
+			this.field_35387_e.generate(this, this.worldObj, var1, var2, var3, metadata);
+		}
+
+		this.field_35390_x.generate(this, this.worldObj, var1, var2, var3, metadata);
+		//FIXME: DUMB HACK
+		for (int x = 0; x < 16; x++) {
+			for (int z = 0; z < 16; z++) {
+				for (int y = 0; y < 256; y++) {
+					var4.data.setNibble(x, y, z, metadata[x << 12 | z << 8 | y]);
+				}
+			}
+		}
+
 		var4.generateSkylightMap();
 		return var4;
 	}
@@ -208,17 +182,6 @@
 			var1 = new double[var5 * var6 * var7];
 		}
 
-		if(this.field_35388_l == null) {
-			this.field_35388_l = new float[25];
-
-			for(int var8 = -2; var8 <= 2; ++var8) {
-				for(int var9 = -2; var9 <= 2; ++var9) {
-					float var10 = 10.0F / MathHelper.sqrt_float((float)(var8 * var8 + var9 * var9) + 0.2F);
-					this.field_35388_l[var8 + 2 + (var9 + 2) * 5] = var10;
-				}
-			}
-		}
-
 		double var43 = 684.412D;
 		double var44 = 684.412D;
 		this.field_4182_g = this.field_922_a.func_4109_a(this.field_4182_g, var2, var4, var5, var7, 1.121D, 1.121D, 0.5D);
@@ -236,6 +199,7 @@
 				float var17 = 0.0F;
 				float var18 = 0.0F;
 				byte var19 = 2;
+				float heightCutoff = 0.0F;
 				BiomeGenBase var20 = this.biomesForGeneration[var14 + 2 + (var15 + 2) * (var5 + 5)];
 
 				for(int var21 = -var19; var21 <= var19; ++var21) {
@@ -249,6 +213,10 @@
 						var16 += var23.field_35491_r * var24;
 						var17 += var23.field_35492_q * var24;
 						var18 += var24;
+
+						if (var23.heightCutoff > heightCutoff) {
+							heightCutoff = var23.heightCutoff;
+						}
 					}
 				}
 
@@ -284,12 +252,10 @@
 					double var47 = (double)var17;
 					double var26 = (double)var16;
 					var47 += var45 * 0.2D;
-					var47 = var47 * (double)var6 / 16.0D;
-					double var28 = (double)var6 / 2.0D + var47 * 4.0D;
+					var47 = var47 * 17.0D / 16.0D;
+					double var28 = 17.0D / 2.0D + var47 * 4.0D;
 					double var30 = 0.0D;
-					double var10000 = ((double)var46 - var28) * 12.0D * 128.0D;
-					this.worldObj.getClass();
-					double var32 = var10000 / 128.0D / var26;
+					double var32 = ((double)var46 - var28) * 12.0D * 128.0D / 128.0D / var26;
 					if(var32 < 0.0D) {
 						var32 *= 4.0D;
 					}
@@ -306,11 +272,28 @@
 					}
 
 					var30 -= var32;
-					if(var46 > var6 - 4) {
-						double var40 = (double)((float)(var46 - (var6 - 4)) / 3.0F);
+					if(var46 > var6 - 1 - heightCutoff) {
+						var30 = 0.0D;
+					} else if(var46 > var6 - 4 - heightCutoff) {
+						double var40 = (double)((float)(var46 - (var6 - 4 - heightCutoff)) / 3.0F);
 						var30 = var30 * (1.0D - var40) + -10.0D * var40;
 					}
 
+					double cave = this.caveNoise.generateNoise((var2 + var14) * 0.5D, (var3 + var46) * 1.5D, (var4 + var15) * 0.5D) - 2.0D;
+					if (cave > 0.0D) {
+						int caveCutoff = var20.field_35492_q > -0.2F ? 4 : 2;
+						if (var46 < 3) {
+							cave -= cave * ((3 - var46) / 2.0D);
+						}
+						if (var46 > caveCutoff) {
+							cave -= cave * ((var46 - caveCutoff) / 2.0D);
+						}
+					}
+
+					if (var30 > 0.0D && cave > 0.0D) {
+						var30 *= -cave;
+					}
+
 					var1[var12] = var30;
 					++var12;
 				}
@@ -343,24 +326,17 @@
 		int var12;
 		int var13;
 		int var14;
-		Random var10000;
 		if(!var11 && this.rand.nextInt(4) == 0) {
 			var12 = var4 + this.rand.nextInt(16) + 8;
-			var10000 = this.rand;
-			this.worldObj.getClass();
-			var13 = var10000.nextInt(128);
+			var13 = this.rand.nextInt(128);
 			var14 = var5 + this.rand.nextInt(16) + 8;
 			(new WorldGenLakes(Block.waterStill.blockID)).generate(this.worldObj, this.rand, var12, var13, var14);
 		}
 
 		if(!var11 && this.rand.nextInt(8) == 0) {
 			var12 = var4 + this.rand.nextInt(16) + 8;
-			var10000 = this.rand;
-			Random var10001 = this.rand;
-			this.worldObj.getClass();
-			var13 = var10000.nextInt(var10001.nextInt(128 - 8) + 8);
+			var13 = this.rand.nextInt(this.rand.nextInt(128 - 8) + 8);
 			var14 = var5 + this.rand.nextInt(16) + 8;
-			this.worldObj.getClass();
 			if(var13 < 63 || this.rand.nextInt(10) == 0) {
 				(new WorldGenLakes(Block.lavaStill.blockID)).generate(this.worldObj, this.rand, var12, var13, var14);
 			}
@@ -368,9 +344,7 @@
 
 		for(var12 = 0; var12 < 8; ++var12) {
 			var13 = var4 + this.rand.nextInt(16) + 8;
-			var10000 = this.rand;
-			this.worldObj.getClass();
-			var14 = var10000.nextInt(128);
+			var14 = this.rand.nextInt(128);
 			int var15 = var5 + this.rand.nextInt(16) + 8;
 			if((new WorldGenDungeons()).generate(this.worldObj, this.rand, var13, var14, var15)) {
 			}
--- net/minecraft/src/BlockFence.java
+++ net/minecraft/src/BlockFence.java
@@ -1,14 +1,10 @@
 package net.minecraft.src;
 
-public class BlockFence extends Block {
+public class BlockFence extends BlockMultitype {
 	public BlockFence(int var1, int var2) {
 		super(var1, var2, Material.wood);
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.getBlockId(var2, var3 - 1, var4) == this.blockID ? true : (!var1.getBlockMaterial(var2, var3 - 1, var4).isSolid() ? false : super.canPlaceBlockAt(var1, var2, var3, var4));
-	}
-
 	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
 		return AxisAlignedBB.getBoundingBoxFromPool((double)var2, (double)var3, (double)var4, (double)(var2 + 1), (double)((float)var3 + 1.5F), (double)(var4 + 1));
 	}
@@ -27,6 +23,6 @@
 
 	public boolean func_35303_f(IBlockAccess var1, int var2, int var3, int var4) {
 		int var5 = var1.getBlockId(var2, var3, var4);
-		return var5 == this.blockID || var5 == Block.field_35277_bw.blockID;
+		return var5 == this.blockID || var1.isBlockOpaqueCube(var2, var3, var4) || Block.blocksList[var5] instanceof BlockFenceGate;
 	}
 }
--- net/minecraft/src/NoiseGeneratorOctaves.java
+++ net/minecraft/src/NoiseGeneratorOctaves.java
@@ -16,6 +16,16 @@
 
 	}
 
+	public NoiseGeneratorOctaves(int var2) {
+		this.field_1191_b = var2;
+		this.generatorCollection = new NoiseGeneratorPerlin[var2];
+
+		for(int var3 = 0; var3 < var2; ++var3) {
+			this.generatorCollection[var3] = new NoiseGeneratorPerlin();
+		}
+
+	}
+
 	public double func_806_a(double var1, double var3) {
 		double var5 = 0.0D;
 		double var7 = 1.0D;
@@ -60,5 +70,17 @@
 
 	public double[] func_4109_a(double[] var1, int var2, int var3, int var4, int var5, double var6, double var8, double var10) {
 		return this.generateNoiseOctaves(var1, var2, 10, var3, var4, 1, var5, var6, 1.0D, var8);
+	}
+
+	public double generateNoise(double d1, double d3, double d5) {
+		double d7 = 0.0D;
+		double d9 = 1.0D;
+
+		for(int i11 = 0; i11 < this.field_1191_b; ++i11) {
+			d7 += this.generatorCollection[i11].generateNoise(d1 * d9, d3 * d9, d5 * d9) / d9;
+			d9 /= 2.0D;
+		}
+
+		return d7;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BiomeGenRockyBeach.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenRockyBeach extends BiomeGenBeach {
+    protected static final NoiseGeneratorOctaves rockNoise = new NoiseGeneratorOctaves(new Random("the rocks".hashCode()), 2);
+    private static final int[] surfaceBlocks = new int[]{Block.gravel.blockID, Block.cobblestone.blockID};
+
+    public BiomeGenRockyBeach(int var1) {
+        super(var1);
+        this.topBlock = (byte)Block.gravel.blockID;
+        this.fillerBlock = (byte)Block.cobblestone.blockID;
+    }
+
+    public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+        int block = (int) ((rockNoise.func_806_a((double)x * 0.045D, (double)z * 0.045D) * 2.0D) + random.nextFloat() * 1.25D);
+        int blockMetadata = (int) ((rockNoise.func_806_a((double)x * 0.025D, (double)z * 0.025D) * 3.0D) + random.nextFloat() * 1.5D);
+
+        this.topBlock = (byte) surfaceBlocks[block & 1];
+        this.topBlockMetadata = (byte) (this.topBlock == Block.cobblestone.blockID ? (blockMetadata & 3) % 3 : 0);
+        this.fillerBlockMetadata = (byte) getStoneMetadata(64, random);
+
+        super.buildBiomeSurface(world, random, blocks, metadata, x, z, heightValue, -100.0D);
+    }
+}
--- net/minecraft/src/WorldClient.java
+++ net/minecraft/src/WorldClient.java
@@ -81,7 +81,7 @@
 		}
 
 		if(!var3) {
-			this.markBlocksDirty(var1 * 16, 0, var2 * 16, var1 * 16 + 15, 128, var2 * 16 + 15);
+			this.markBlocksDirty(var1 * 16, 0, var2 * 16, var1 * 16 + 15, 256, var2 * 16 + 15);
 		}
 
 	}
--- net/minecraft/src/BlockPistonBase.java
+++ net/minecraft/src/BlockPistonBase.java
@@ -244,8 +244,7 @@
 					break;
 				}
 
-				var0.getClass();
-				if(var6 >= 128 - 1) {
+				if(var6 >= 256 - 1) {
 					break;
 				}
 
@@ -288,8 +287,7 @@
 					break;
 				}
 
-				var1.getClass();
-				if(var7 >= 128 - 1) {
+				if(var7 >= 256 - 1) {
 					break;
 				}
 
--- net/minecraft/src/WorldGenTaiga2.java
+++ net/minecraft/src/WorldGenTaiga2.java
@@ -11,8 +11,7 @@
 		boolean var10 = true;
 		if(var4 >= 1) {
 			int var10000 = var4 + var6 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
+			if(var10000 <= 256) {
 				int var11;
 				int var13;
 				int var15;
@@ -28,8 +27,7 @@
 					for(var13 = var3 - var21; var13 <= var3 + var21 && var10; ++var13) {
 						for(int var14 = var5 - var21; var14 <= var5 + var21 && var10; ++var14) {
 							if(var11 >= 0) {
-								var1.getClass();
-								if(var11 < 128) {
+								if(var11 < 256) {
 									var15 = var1.getBlockId(var13, var11, var14);
 									if(var15 != 0 && var15 != Block.leaves.blockID) {
 										var10 = false;
@@ -49,8 +47,7 @@
 
 				var11 = var1.getBlockId(var3, var4 - 1, var5);
 				if(var11 == Block.grass.blockID || var11 == Block.dirt.blockID) {
-					var1.getClass();
-					if(var4 < 128 - var6 - 1) {
+					if(var4 < 256 - var6 - 1) {
 						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
 						var21 = var2.nextInt(2);
 						var13 = 1;
@@ -67,7 +64,7 @@
 								for(int var19 = var5 - var21; var19 <= var5 + var21; ++var19) {
 									int var20 = var19 - var5;
 									if((Math.abs(var18) != var21 || Math.abs(var20) != var21 || var21 <= 0) && !Block.opaqueCubeLookup[var1.getBlockId(var17, var16, var19)]) {
-										var1.setBlockAndMetadata(var17, var16, var19, Block.leaves.blockID, 1);
+										var1.setBlockAndMetadata(var17, var16, var19, Block.leaves.blockID, 3);
 									}
 								}
 							}
@@ -89,7 +86,7 @@
 						for(var16 = 0; var16 < var6 - var15; ++var16) {
 							var17 = var1.getBlockId(var3, var4 + var16, var5);
 							if(var17 == 0 || var17 == Block.leaves.blockID) {
-								var1.setBlockAndMetadata(var3, var4 + var16, var5, Block.wood.blockID, 1);
+								var1.setBlockAndMetadata(var3, var4 + var16, var5, Block.wood.blockID, 3);
 							}
 						}
 
--- net/minecraft/src/PlayerControllerSP.java
+++ net/minecraft/src/PlayerControllerSP.java
@@ -136,7 +136,7 @@
 
 	public boolean sendPlaceBlock(EntityPlayer var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7) {
 		int var8 = var2.getBlockId(var4, var5, var6);
-		return var8 > 0 && Block.blocksList[var8].blockActivated(var2, var4, var5, var6, var1) ? true : (var3 == null ? false : var3.useItem(var1, var2, var4, var5, var6, var7));
+		return var8 > 0 && !var1.isSneaking() && Block.blocksList[var8].blockActivated(var2, var4, var5, var6, var1) ? true : (var3 == null ? false : var3.useItem(var1, var2, var4, var5, var6, var7));
 	}
 
 	public boolean func_35642_f() {
--- net/minecraft/src/BlockStairs.java
+++ net/minecraft/src/BlockStairs.java
@@ -5,10 +5,16 @@
 
 public class BlockStairs extends Block {
 	private Block modelBlock;
+	private int modelMetadata;
 
 	protected BlockStairs(int var1, Block var2) {
+		this(var1, var2, 0);
+	}
+
+	protected BlockStairs(int var1, Block var2, int var3) {
 		super(var1, var2.blockIndexInTexture, var2.blockMaterial);
 		this.modelBlock = var2;
+		this.modelMetadata = var3;
 		this.setHardness(var2.blockHardness);
 		this.setResistance(var2.blockResistance / 3.0F);
 		this.setStepSound(var2.stepSound);
@@ -94,20 +100,12 @@
 		return this.modelBlock.getRenderBlockPass();
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return this.modelBlock.idDropped(var1, var2);
-	}
-
-	public int quantityDropped(Random var1) {
-		return this.modelBlock.quantityDropped(var1);
-	}
-
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, 0);
+		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, this.modelMetadata);
 	}
 
 	public int getBlockTextureFromSide(int var1) {
-		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, 0);
+		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, this.modelMetadata);
 	}
 
 	public int tickRate() {
@@ -141,10 +139,6 @@
 
 	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
 		this.modelBlock.onBlockRemoval(var1, var2, var3, var4);
-	}
-
-	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		this.modelBlock.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
 	}
 
 	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
--- net/minecraft/src/RecipesArmor.java
+++ net/minecraft/src/RecipesArmor.java
@@ -14,5 +14,6 @@
 			}
 		}
 
+		var1.addRecipe(new ItemStack(Item.flippers), "X X", "# #", "# #", 'X', Item.ingotIron, '#', Item.leather);
 	}
 }
--- net/minecraft/src/WorldChunkManager.java
+++ net/minecraft/src/WorldChunkManager.java
@@ -19,6 +19,8 @@
 		this.field_35564_g.add(BiomeGenBase.forest);
 		this.field_35564_g.add(BiomeGenBase.swampland);
 		this.field_35564_g.add(BiomeGenBase.taiga);
+		this.field_35564_g.add(BiomeGenBase.oasis);
+		this.field_35564_g.add(BiomeGenBase.field_35485_c);
 	}
 
 	public WorldChunkManager(World var1) {
--- net/minecraft/src/EntityPlayerSP.java
+++ net/minecraft/src/EntityPlayerSP.java
@@ -127,7 +127,7 @@
 			this.pushOutOfBlocks(this.posX - (double)this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ - (double)this.width * 0.35D);
 			this.pushOutOfBlocks(this.posX + (double)this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ - (double)this.width * 0.35D);
 			this.pushOutOfBlocks(this.posX + (double)this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ + (double)this.width * 0.35D);
-			boolean var4 = (float)this.func_35191_at().func_35765_a() > 6.0F;
+			boolean var4 = this.func_35191_at().func_35765_a() > 6;
 			if(this.onGround && !var3 && this.movementInput.moveForward >= var2 && !this.func_35117_Q() && var4 && !this.func_35196_Z()) {
 				if(this.field_35224_c == 0) {
 					this.field_35224_c = 7;
--- net/minecraft/src/BlockSand.java
+++ net/minecraft/src/BlockSand.java
@@ -3,8 +3,57 @@
 import java.util.Random;
 
 public class BlockSand extends Block {
+    protected static final NoiseGeneratorOctaves rainbowNoise = new NoiseGeneratorOctaves(new Random("all sorts of rainbows!".hashCode()), 2);
+
 	public static boolean fallInstantly = false;
 
+	private static int hsvToRgb(float hue, float saturation, float value) {
+	    int r = 0;
+		int g = 0;
+		int b = 0;
+
+		int i = (int) Math.floor(hue * 6);
+	    float f = hue * 6 - i;
+	    float p = value * (1 - saturation);
+	    float q = value * (1 - f * saturation);
+	    float t = value * (1 - (1 - f) * saturation);
+
+	    switch (i % 6) {
+	        case 0:
+	            r = Math.round(value * 255);
+	            g = Math.round(t * 255);
+	            b = Math.round(p * 255);
+	            break;
+	        case 1:
+	            r = Math.round(q * 255);
+	            g = Math.round(value * 255);
+	            b = Math.round(p * 255);
+	            break;
+	        case 2:
+	            r = Math.round(p * 255);
+	            g = Math.round(value * 255);
+	            b = Math.round(t * 255);
+	            break;
+	        case 3:
+	            r = Math.round(p * 255);
+	            g = Math.round(q * 255);
+	            b = Math.round(value * 255);
+	            break;
+	        case 4:
+	            r = Math.round(t * 255);
+	            g = Math.round(p * 255);
+	            b = Math.round(value * 255);
+	            break;
+	        case 5:
+	            r = Math.round(value * 255);
+	            g = Math.round(p * 255);
+	            b = Math.round(q * 255);
+	            break;
+	    }
+
+	    return r << 16 | g << 8 | b;
+	}
+
 	public BlockSand(int var1, int var2) {
 		super(var1, var2, Material.sand);
 	}
@@ -22,10 +71,17 @@
 	}
 
 	private void tryToFall(World var1, int var2, int var3, int var4) {
+		if (var3 > 64 && this.blockID == Block.sand.blockID) {
+			int a = var1.getBlockMetadata(var2, var3, var4);
+			a += 2;
+		}
+
+		int meta = var1.getBlockMetadata(var2, var3, var4);
+
 		if(canFallBelow(var1, var2, var3 - 1, var4) && var3 >= 0) {
 			byte var8 = 32;
 			if(!fallInstantly && var1.checkChunksExist(var2 - var8, var3 - var8, var4 - var8, var2 + var8, var3 + var8, var4 + var8)) {
-				EntityFallingSand var9 = new EntityFallingSand(var1, (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), this.blockID);
+				EntityFallingSand var9 = new EntityFallingSand(var1, (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), this.blockID, meta);
 				var1.entityJoinedWorld(var9);
 			} else {
 				var1.setBlockWithNotify(var2, var3, var4, 0);
@@ -35,7 +91,7 @@
 				}
 
 				if(var3 > 0) {
-					var1.setBlockWithNotify(var2, var3, var4, this.blockID);
+					var1.setBlockAndMetadataWithNotify(var2, var3, var4, this.blockID, meta);
 				}
 			}
 		}
@@ -56,5 +112,22 @@
 			Material var5 = Block.blocksList[var4].blockMaterial;
 			return var5 == Material.water ? true : var5 == Material.lava;
 		}
+	}
+
+	protected int damageDropped(int var1) {
+		return var1 & 3;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.blockIndexInTexture + var2 * 256;
+	}
+
+	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
+		if ((var1.getBlockMetadata(var2, var3, var4) & 3) != 2) {
+			return super.colorMultiplier(var1, var2, var3, var4);
+		}
+
+		float hue = ((float)rainbowNoise.generateNoise(var2 * 0.01D, 0.0D, var4 * 0.01D) / 2.0F + 10.0F) % 1.0F;
+		return hsvToRgb(hue, 0.2F, 1.0F);
 	}
 }
--- net/minecraft/src/BlockFluid.java
+++ net/minecraft/src/BlockFluid.java
@@ -9,6 +9,7 @@
 		float var4 = 0.0F;
 		this.setBlockBounds(0.0F + var4, 0.0F + var3, 0.0F + var4, 1.0F + var4, 1.0F + var3, 1.0F + var4);
 		this.setTickOnLoad(true);
+		canBlockGrass[var1] = true;
 	}
 
 	public int func_35274_i() {
@@ -29,7 +30,7 @@
 	}
 
 	public int getBlockTextureFromSide(int var1) {
-		return var1 != 0 && var1 != 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
+		return var1 == 6 ? this.blockIndexInTexture + 16 : var1 != 0 && var1 != 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
 	}
 
 	protected int getFlowDecay(World var1, int var2, int var3, int var4) {
--- net/minecraft/src/GenLayerIsland.java
+++ net/minecraft/src/GenLayerIsland.java
@@ -8,32 +8,58 @@
 
 	public int[] func_35500_a(int var1, int var2, int var3, int var4) {
 		int var5 = var1 - 1;
-		int var6 = var2 - 1;
-		int var7 = var3 + 2;
-		int var8 = var4 + 2;
-		int[] var9 = this.field_35504_a.func_35500_a(var5, var6, var7, var8);
-		int[] var10 = IntCache.func_35267_a(var3 * var4);
-
-		for(int var11 = 0; var11 < var4; ++var11) {
-			for(int var12 = 0; var12 < var3; ++var12) {
-				int var13 = var9[var12 + 0 + (var11 + 0) * var7];
-				int var14 = var9[var12 + 2 + (var11 + 0) * var7];
-				int var15 = var9[var12 + 0 + (var11 + 2) * var7];
-				int var16 = var9[var12 + 2 + (var11 + 2) * var7];
-				int var17 = var9[var12 + 1 + (var11 + 1) * var7];
-				this.func_35499_a((long)(var12 + var1), (long)(var11 + var2));
-				if(var17 != 0 || var13 == 0 && var14 == 0 && var15 == 0 && var16 == 0) {
-					if(var17 != 1 || var13 == 1 && var14 == 1 && var15 == 1 && var16 == 1) {
-						var10[var12 + var11 * var3] = var17;
-					} else {
-						var10[var12 + var11 * var3] = 1 - this.func_35498_a(5) / 4;
-					}
-				} else {
-					var10[var12 + var11 * var3] = 0 + this.func_35498_a(3) / 2;
-				}
-			}
-		}
-
-		return var10;
+        int var6 = var2 - 1;
+        int var7 = var3 + 2;
+        int var8 = var4 + 2;
+        int[] var9 = this.field_35504_a.func_35500_a(var5, var6, var7, var8);
+        int[] var10 = IntCache.func_35267_a(var3 * var4);
+
+        for (int var11 = 0; var11 < var4; ++var11) {
+            for (int var12 = 0; var12 < var3; ++var12) {
+                int var13 = var9[var12 + 0 + (var11 + 0) * var7];
+                int var14 = var9[var12 + 2 + (var11 + 0) * var7];
+                int var15 = var9[var12 + 0 + (var11 + 2) * var7];
+                int var16 = var9[var12 + 2 + (var11 + 2) * var7];
+                int var17 = var9[var12 + 1 + (var11 + 1) * var7];
+                this.func_35499_a((long) (var12 + var1), (long) (var11 + var2));
+
+                if (var17 == 0 && (var13 != 0 || var14 != 0 || var15 != 0 || var16 != 0)) {
+                    int var18 = 1;
+                    int var19 = 1;
+
+                    if (var13 != 0 && this.func_35498_a(var18++) == 0) {
+                        var19 = var13;
+                    }
+
+                    if (var14 != 0 && this.func_35498_a(var18++) == 0) {
+                        var19 = var14;
+                    }
+
+                    if (var15 != 0 && this.func_35498_a(var18++) == 0) {
+                        var19 = var15;
+                    }
+
+                    if (var16 != 0 && this.func_35498_a(var18++) == 0) {
+                        var19 = var16;
+                    }
+
+                    if (this.func_35498_a(3) == 0) {
+                        var10[var12 + var11 * var3] = var19;
+                    } else {
+                        var10[var12 + var11 * var3] = 0;
+                    }
+                } else if (var17 > 0 && (var13 == 0 || var14 == 0 || var15 == 0 || var16 == 0)) {
+                    if (this.func_35498_a(5) == 0) {
+                        var10[var12 + var11 * var3] = 0;
+                    } else {
+                        var10[var12 + var11 * var3] = var17;
+                    }
+                } else {
+                    var10[var12 + var11 * var3] = var17;
+                }
+            }
+        }
+
+        return var10;
 	}
 }
--- net/minecraft/src/ChunkLoader.java
+++ net/minecraft/src/ChunkLoader.java
@@ -114,7 +114,7 @@
 		var2.setByteArray("Data", var0.data.data);
 		var2.setByteArray("SkyLight", var0.skylightMap.data);
 		var2.setByteArray("BlockLight", var0.blocklightMap.data);
-		var2.setByteArray("HeightMap", var0.heightMap);
+		var2.setIntArray("HeightMap", var0.heightMap);
 		var2.setBoolean("TerrainPopulated", var0.isTerrainPopulated);
 		var0.hasEntities = false;
 		NBTTagList var3 = new NBTTagList();
@@ -154,35 +154,29 @@
 		Chunk var4 = new Chunk(var0, var2, var3);
 		var4.blocks = var1.getByteArray("Blocks");
 		byte[] var10003 = var1.getByteArray("Data");
-		var0.getClass();
-		var4.data = new NibbleArray(var10003, 7);
+		var4.data = new NibbleArray(var10003, 8);
 		var10003 = var1.getByteArray("SkyLight");
-		var0.getClass();
-		var4.skylightMap = new NibbleArray(var10003, 7);
+		var4.skylightMap = new NibbleArray(var10003, 8);
 		var10003 = var1.getByteArray("BlockLight");
-		var0.getClass();
-		var4.blocklightMap = new NibbleArray(var10003, 7);
-		var4.heightMap = var1.getByteArray("HeightMap");
+		var4.blocklightMap = new NibbleArray(var10003, 8);
+		var4.heightMap = var1.getIntArray("HeightMap");
 		var4.isTerrainPopulated = var1.getBoolean("TerrainPopulated");
 		int var13;
 		if(!var4.data.isValid()) {
 			var13 = var4.blocks.length;
-			var0.getClass();
-			var4.data = new NibbleArray(var13, 7);
+			var4.data = new NibbleArray(var13, 8);
 		}
 
 		if(var4.heightMap == null || !var4.skylightMap.isValid()) {
-			var4.heightMap = new byte[256];
+			var4.heightMap = new int[256];
 			var13 = var4.blocks.length;
-			var0.getClass();
-			var4.skylightMap = new NibbleArray(var13, 7);
+			var4.skylightMap = new NibbleArray(var13, 8);
 			var4.generateSkylightMap();
 		}
 
 		if(!var4.blocklightMap.isValid()) {
 			var13 = var4.blocks.length;
-			var0.getClass();
-			var4.blocklightMap = new NibbleArray(var13, 7);
+			var4.blocklightMap = new NibbleArray(var13, 8);
 			var4.func_1014_a();
 		}
 
--- net/minecraft/src/WorldGenMinable.java
+++ net/minecraft/src/WorldGenMinable.java
@@ -5,12 +5,40 @@
 public class WorldGenMinable extends WorldGenerator {
 	private int minableBlockId;
 	private int numberOfBlocks;
+	private int minClayY;
+	private int maxClayY;
+	private boolean inClay;
+	private boolean inheritStoneType;
+	private boolean normalStoneOnly;
+	private boolean clayOnly;
 
 	public WorldGenMinable(int var1, int var2) {
 		this.minableBlockId = var1;
 		this.numberOfBlocks = var2;
 	}
 
+	public WorldGenMinable inClay(int min, int max) {
+		this.inClay = true;
+		this.minClayY = min;
+		this.maxClayY = max;
+		return this;
+	}
+
+	public WorldGenMinable inheritStoneType() {
+		this.inheritStoneType = true;
+		return this;
+	}
+
+	public WorldGenMinable normalStoneOnly() {
+		this.normalStoneOnly = true;
+		return this;
+	}
+
+	public WorldGenMinable clayOnly() {
+		this.clayOnly = true;
+		return this;
+	}
+
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		float var6 = var2.nextFloat() * (float)Math.PI;
 		double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
@@ -42,8 +70,20 @@
 						if(var39 * var39 + var42 * var42 < 1.0D) {
 							for(int var44 = var34; var44 <= var37; ++var44) {
 								double var45 = ((double)var44 + 0.5D - var24) / (var28 / 2.0D);
-								if(var39 * var39 + var42 * var42 + var45 * var45 < 1.0D && var1.getBlockId(var38, var41, var44) == Block.stone.blockID) {
-									var1.setBlock(var38, var41, var44, this.minableBlockId);
+								int b = var1.getBlockId(var38, var41, var44);
+								int m = var1.getBlockMetadata(var38, var41, var44);
+								if(var39 * var39 + var42 * var42 + var45 * var45 < 1.0D &&
+										((!this.clayOnly && b == Block.stone.blockID && (!this.normalStoneOnly || m == 0))
+												|| (this.inClay && (var41 < maxClayY && var41 > minClayY) && b == Block.hardenedClay.blockID))) {
+									int meta = 0;
+									if (this.inheritStoneType) {
+										if (b == Block.hardenedClay.blockID) {
+											meta = 2;
+										} else {
+											meta = m;
+										}
+									}
+									var1.setBlockAndMetadata(var38, var41, var44, this.minableBlockId, meta);
 								}
 							}
 						}
--- net/minecraft/src/ChestItemRenderHelper.java
+++ net/minecraft/src/ChestItemRenderHelper.java
@@ -5,6 +5,6 @@
 	private TileEntityChest field_35610_b = new TileEntityChest();
 
 	public void func_35609_a(Block var1, int var2, float var3) {
-		TileEntityRenderer.instance.renderTileEntityAt(this.field_35610_b, 0.0D, 0.0D, 0.0D, 0.0F);
+		TileEntityRenderer.instance.renderTileEntityAt(this.field_35610_b, -0.5D, -0.5D, -0.5D, 0.0F);
 	}
 }
--- net/minecraft/src/Entity.java
+++ net/minecraft/src/Entity.java
@@ -597,9 +597,7 @@
 	public int func_35115_a(float var1) {
 		int var2 = MathHelper.floor_double(this.posX);
 		int var3 = MathHelper.floor_double(this.posZ);
-		World var10000 = this.worldObj;
-		this.worldObj.getClass();
-		if(var10000.blockExists(var2, 128 / 2, var3)) {
+		if(this.worldObj.blockExists(var2, 128 / 2, var3)) {
 			double var4 = (this.boundingBox.maxY - this.boundingBox.minY) * 0.66D;
 			int var6 = MathHelper.floor_double(this.posY - (double)this.yOffset + var4);
 			return this.worldObj.func_35451_b(var2, var6, var3, 0);
@@ -611,9 +609,7 @@
 	public float getEntityBrightness(float var1) {
 		int var2 = MathHelper.floor_double(this.posX);
 		int var3 = MathHelper.floor_double(this.posZ);
-		World var10000 = this.worldObj;
-		this.worldObj.getClass();
-		if(var10000.blockExists(var2, 128 / 2, var3)) {
+		if(this.worldObj.blockExists(var2, 128 / 2, var3)) {
 			double var4 = (this.boundingBox.maxY - this.boundingBox.minY) * 0.66D;
 			int var6 = MathHelper.floor_double(this.posY - (double)this.yOffset + var4);
 			return this.worldObj.getLightBrightness(var2, var6, var3);
@@ -813,7 +809,7 @@
 		this.readEntityFromNBT(var1);
 	}
 
-	protected final String getEntityString() {
+	public final String getEntityString() {
 		return EntityList.getEntityString(this);
 	}
 
--- net/minecraft/src/NetClientHandler.java
+++ net/minecraft/src/NetClientHandler.java
@@ -122,6 +122,14 @@
 			var8 = new EntityFallingSand(this.worldClient, var2, var4, var6, Block.gravel.blockID);
 		}
 
+		if(var1.type == 72) {
+			var8 = new EntityFallingSand(this.worldClient, var2, var4, var6, Block.sand.blockID, 1);
+		}
+
+		if(var1.type == 73) {
+			var8 = new EntityFallingSand(this.worldClient, var2, var4, var6, Block.sand.blockID, 2);
+		}
+
 		if(var8 != null) {
 			((Entity)var8).serverPosX = var1.xPosition;
 			((Entity)var8).serverPosY = var1.yPosition;
--- /dev/null
+++ net/minecraft/src/WorldGenUndergroundLava.java
@@ -1,0 +1,33 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenUndergroundLava extends WorldGenerator {
+	private static final NoiseGeneratorOctaves noiseGenLava = new NoiseGeneratorOctaves(new Random("OOH, HAWT and SPICY!!!".hashCode()), 4);
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		for (int x = var3; x < var3 + 16; x++) {
+			for (int z = var5; z < var5 + 16; z++) {
+				for (int y = 0; y < var4; y++) {
+					if (var1.isAirBlock(x, y + 1, z)
+							&& var1.isBlockNormalCube(x, y, z)
+							&& var1.isBlockNormalCube(x, y - 1, z)
+							&& suitableLavaNeighbor(var1, x + 1, y, z)
+							&& suitableLavaNeighbor(var1, x - 1, y, z)
+							&& suitableLavaNeighbor(var1, x, y, z + 1)
+							&& suitableLavaNeighbor(var1, x, y, z - 1)
+							&& noiseGenLava.func_806_a(x, z) > 1.0D
+					) {
+						var1.setBlock(x, y, z, Block.lavaStill.blockID);
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+
+	private static boolean suitableLavaNeighbor(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y, z) || world.getBlockMaterial(x, y, z) == Material.lava;
+	}
+}
--- net/minecraft/src/BiomeGenOcean.java
+++ net/minecraft/src/BiomeGenOcean.java
@@ -1,8 +1,14 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class BiomeGenOcean extends BiomeGenBase {
 	public BiomeGenOcean(int var1) {
 		super(var1);
-		this.spawnableCreatureList.clear();
+		this.field_35488_u.field_35911_r = 1;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return this.field_35483_D;
 	}
 }
--- net/minecraft/src/ItemSlab.java
+++ net/minecraft/src/ItemSlab.java
@@ -1,14 +1,17 @@
 package net.minecraft.src;
 
 public class ItemSlab extends ItemBlock {
-	public ItemSlab(int var1) {
+	private final BlockStep modelSlab;
+
+	public ItemSlab(int var1, BlockStep var2) {
 		super(var1);
+		this.modelSlab = var2;
 		this.setMaxDamage(0);
 		this.setHasSubtypes(true);
 	}
 
 	public int getIconFromDamage(int var1) {
-		return Block.stairSingle.getBlockTextureFromSideAndMetadata(2, var1);
+		return this.modelSlab.getBlockTextureFromSideAndMetadata(2, var1);
 	}
 
 	public int getPlacedBlockMetadata(int var1) {
@@ -16,11 +19,15 @@
 	}
 
 	public String getItemNameIS(ItemStack var1) {
+		if (this.modelSlab.getTypeNames() == null) {
+			return super.getItemName();
+		}
+
 		int var2 = var1.getItemDamage();
-		if(var2 < 0 || var2 >= BlockStep.field_22037_a.length) {
+		if(var2 < 0 || var2 >= this.modelSlab.getTypeNames().length) {
 			var2 = 0;
 		}
 
-		return super.getItemName() + "." + BlockStep.field_22037_a[var2];
+		return super.getItemName() + "." + this.modelSlab.getTypeNames()[var2];
 	}
 }
--- /dev/null
+++ net/minecraft/src/GuiDebug.java
@@ -1,0 +1,66 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+public class GuiDebug extends Gui {
+    private final Minecraft mc;
+
+    public GuiDebug(Minecraft minecraft) {
+        this.mc = minecraft;
+    }
+
+    public void drawDebugScreen(int width, int height) {
+        FontRenderer fontRenderer = this.mc.fontRenderer;
+
+        this.renderStringWithBackground(fontRenderer, "Tropical Adventure 1.0.1 (" + this.mc.debug + ")", 2, 2, 0xFFFFFF, 0x77000000, false);
+        long maxRam = Runtime.getRuntime().maxMemory();
+        long totalRam = Runtime.getRuntime().totalMemory();
+        long freeRam = Runtime.getRuntime().freeMemory();
+        long usedRam = totalRam - freeRam;
+        this.renderStringWithBackground(fontRenderer, "Used memory: " + usedRam * 100L / maxRam + "% (" + usedRam / 1024L / 1024L + "MB) of " + maxRam / 1024L / 1024L + "MB", width - 2, 2, 14737632, 0x77000000, true);
+        this.renderStringWithBackground(fontRenderer, "Allocated memory: " + totalRam * 100L / maxRam + "% (" + totalRam / 1024L / 1024L + "MB)", width - 2, 14, 14737632, 0x77000000, true);
+        this.renderStringWithBackground(fontRenderer, this.mc.debugInfoRenders(), 2, 14, 0xFFFFFF, 0x77000000, false);
+        this.renderStringWithBackground(fontRenderer, this.mc.func_6262_n(), 2, 26, 0xFFFFFF, 0x77000000, false);
+        this.renderStringWithBackground(fontRenderer, this.mc.debugInfoEntities(), 2, 38, 0xFFFFFF, 0x77000000, false);
+        this.renderStringWithBackground(fontRenderer, this.mc.func_21002_o(), 2, 50, 0xFFFFFF, 0x77000000, false);
+        int x = MathHelper.floor_double(this.mc.thePlayer.posX);
+        int y = MathHelper.floor_double(this.mc.thePlayer.boundingBox.minY);
+        int z = MathHelper.floor_double(this.mc.thePlayer.posZ);
+        this.renderStringWithBackground(fontRenderer, String.format("x: %.5f (%d) // c: %d (%d)", this.mc.thePlayer.posX, x, x >> 4, x & 15), 2, 64, 14737632, 0x77000000, false);
+        this.renderStringWithBackground(fontRenderer, String.format("y: %.3f (feet pos, %.3f eyes pos)", this.mc.thePlayer.boundingBox.minY, this.mc.thePlayer.posY), 2, 76, 14737632, 0x77000000, false);
+        this.renderStringWithBackground(fontRenderer, String.format("z: %.5f (%d) // c: %d (%d)", this.mc.thePlayer.posZ, z, z >> 4, z & 15), 2, 88, 14737632, 0x77000000, false);
+        int direction = MathHelper.floor_double((double)(this.mc.thePlayer.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
+        float yaw = this.mc.thePlayer.rotationYaw;
+        yaw %= 360.0F;
+        if(yaw >= 180.0F) {
+            yaw -= 360.0F;
+        }
+
+        if(yaw < -180.0F) {
+            yaw += 360.0F;
+        }
+
+        this.renderStringWithBackground(fontRenderer, "f: " + direction + " (" + ModelBed.directions[direction] + ") / " + yaw, 2, 100, 14737632, 0x77000000, false);
+        this.renderStringWithBackground(fontRenderer, "s: " + this.mc.theWorld.getRandomSeed(), 2, 112, 14737632, 0x77000000, false);
+        if(this.mc.theWorld != null && this.mc.theWorld.blockExists(x, y, z)) {
+            BiomeGenBase biome = this.mc.theWorld.getWorldChunkManager().getBiomeGenAt(x, z);
+            Chunk chunk = this.mc.theWorld.getChunkFromBlockCoords(x, z);
+            this.renderStringWithBackground(fontRenderer, "b: " + biome.biomeName + " bl: " + chunk.getSavedLightValue(EnumSkyBlock.Block, x & 15, y, z & 15) + " sl: " + chunk.getSavedLightValue(EnumSkyBlock.Sky, x & 15, y, z & 15) + " rl: " + chunk.getBlockLightValue(x & 15, y, z & 15, 0), 2, 124, 14737632, 0x77000000, false);
+        }
+
+        this.renderStringWithBackground(fontRenderer, this.mc.getMousedOverBlock(), width - 2, 36, 0xFFFFFF, 0x77000000, true);
+        this.renderStringWithBackground(fontRenderer, this.mc.getMousedOverBlockName(), width - 2, 48, 0xFFFFFF, 0x77000000, true);
+        this.renderStringWithBackground(fontRenderer, this.mc.getMousedOverEntity(), width - 2, 60, 0xFFFFFF, 0x77000000, true);
+    }
+
+    private void renderStringWithBackground(FontRenderer renderer, String text, int x, int y, int color, int backgroundColor, boolean offsetLength) {
+        int textWidth = renderer.getStringWidth(text);
+        if (textWidth == 0) return;
+
+        if (offsetLength)
+            x -= textWidth;
+
+        this.drawRect(x - 2, y - 2, x + textWidth + 2, y + 10, backgroundColor);
+        renderer.drawString(text, x, y, color);
+    }
+}
--- net/minecraft/src/PlayerControllerMP.java
+++ net/minecraft/src/PlayerControllerMP.java
@@ -167,7 +167,7 @@
 		this.syncCurrentPlayItem();
 		this.netClientHandler.addToSendQueue(new Packet15Place(var4, var5, var6, var7, var1.inventory.getCurrentItem()));
 		int var8 = var2.getBlockId(var4, var5, var6);
-		if(var8 > 0 && Block.blocksList[var8].blockActivated(var2, var4, var5, var6, var1)) {
+		if(var8 > 0 && !var1.isSneaking() &&  Block.blocksList[var8].blockActivated(var2, var4, var5, var6, var1)) {
 			return true;
 		} else if(var3 == null) {
 			return false;
--- net/minecraft/src/EntityClientPlayerMP.java
+++ net/minecraft/src/EntityClientPlayerMP.java
@@ -30,10 +30,8 @@
 	}
 
 	public void onUpdate() {
-		World var10000 = this.worldObj;
 		int var10001 = MathHelper.floor_double(this.posX);
-		this.worldObj.getClass();
-		if(var10000.blockExists(var10001, 128 / 2, MathHelper.floor_double(this.posZ))) {
+		if(this.worldObj.blockExists(var10001, 128 / 2, MathHelper.floor_double(this.posZ))) {
 			super.onUpdate();
 			this.func_4056_N();
 		}
@@ -141,7 +139,6 @@
 		byte var10003 = (byte)this.dimension;
 		byte var10004 = (byte)this.worldObj.difficultySetting;
 		long var10005 = this.worldObj.getRandomSeed();
-		this.worldObj.getClass();
 		var10000.addToSendQueue(new Packet9Respawn(var10003, var10004, var10005, 128, 0));
 	}
 
--- net/minecraft/src/BlockSandStone.java
+++ net/minecraft/src/BlockSandStone.java
@@ -5,7 +5,16 @@
 		super(var1, 192, Material.rock);
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture - 16 : (var1 == 0 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture);
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return (var1 == 1 ? this.blockIndexInTexture - 16 : (var1 == 0 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture))
+				+ var2 * 256;
+	}
+
+	protected int damageDropped(int var1) {
+		return var1 & 3;
+	}
+
+	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
+		return Block.sand.colorMultiplier(var1, var2, var3, var4);
 	}
 }
--- net/minecraft/src/MapGenCavesHell.java
+++ net/minecraft/src/MapGenCavesHell.java
@@ -80,9 +80,7 @@
 						var53 = 1;
 					}
 
-					this.field_35625_d.getClass();
 					if(var36 > 128 - 8) {
-						this.field_35625_d.getClass();
 						var36 = 128 - 8;
 					}
 
@@ -96,18 +94,14 @@
 
 					boolean var55 = false;
 
-					int var10000;
 					int var40;
 					int var43;
 					for(var40 = var52; !var55 && var40 < var34; ++var40) {
 						for(int var41 = var54; !var55 && var41 < var38; ++var41) {
 							for(int var42 = var36 + 1; !var55 && var42 >= var53 - 1; --var42) {
-								var10000 = var40 * 16 + var41;
-								this.field_35625_d.getClass();
-								var43 = var10000 * 128 + var42;
+								var43 = var40 << 12 | var41 << 8 | var42;
 								if(var42 >= 0) {
-									this.field_35625_d.getClass();
-									if(var42 < 128) {
+									if(var42 < 256) {
 										if(var3[var43] == Block.lavaMoving.blockID || var3[var43] == Block.lavaStill.blockID) {
 											var55 = true;
 										}
@@ -127,9 +121,7 @@
 
 							for(var43 = var54; var43 < var38; ++var43) {
 								double var44 = ((double)(var43 + var2 * 16) + 0.5D - var8) / var27;
-								var10000 = var40 * 16 + var43;
-								this.field_35625_d.getClass();
-								int var46 = var10000 * 128 + var36;
+								int var46 = var40 << 12 | var43 << 8 | var36;
 
 								for(int var47 = var36 - 1; var47 >= var53; --var47) {
 									double var48 = ((double)var47 + 0.5D - var6) / var29;
@@ -155,7 +147,7 @@
 
 	}
 
-	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
+	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6, byte[] var6a) {
 		int var7 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(10) + 1) + 1);
 		if(this.rand.nextInt(5) != 0) {
 			var7 = 0;
@@ -163,9 +155,7 @@
 
 		for(int var8 = 0; var8 < var7; ++var8) {
 			double var9 = (double)(var2 * 16 + this.rand.nextInt(16));
-			Random var10000 = this.rand;
-			var1.getClass();
-			double var11 = (double)var10000.nextInt(128);
+			double var11 = (double)this.rand.nextInt(128);
 			double var13 = (double)(var3 * 16 + this.rand.nextInt(16));
 			int var15 = 1;
 			if(this.rand.nextInt(4) == 0) {
--- net/minecraft/src/ItemAxe.java
+++ net/minecraft/src/ItemAxe.java
@@ -1,9 +1,7 @@
 package net.minecraft.src;
 
 public class ItemAxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.planks, Block.bookShelf, Block.wood, Block.chest};
-
 	protected ItemAxe(int var1, EnumToolMaterial var2) {
-		super(var1, 3, var2, blocksEffectiveAgainst);
+		super(var1, 3, var2, EnumTool.AXE);
 	}
 }
--- net/minecraft/src/BlockGravel.java
+++ net/minecraft/src/BlockGravel.java
@@ -7,6 +7,14 @@
 		super(var1, var2);
 	}
 
+	protected int damageDropped(int var1) {
+		return 0;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.blockIndexInTexture;
+	}
+
 	public int idDropped(int var1, Random var2) {
 		return var2.nextInt(10) == 0 ? Item.flint.shiftedIndex : this.blockID;
 	}
--- net/minecraft/src/FoodStats.java
+++ net/minecraft/src/FoodStats.java
@@ -6,7 +6,6 @@
 	private float field_35775_c;
 	private int field_35772_d = 0;
 	private int field_35773_e = 20;
-
 	public void func_35771_a(int var1, float var2) {
 		this.field_35776_a = Math.min(var1 + this.field_35776_a, 20);
 		this.field_35774_b = Math.min(this.field_35774_b + (float)var1 * var2 * 2.0F, (float)this.field_35776_a);
@@ -18,6 +17,7 @@
 
 	public void func_35768_a(EntityPlayer var1) {
 		int var2 = var1.worldObj.difficultySetting;
+
 		this.field_35773_e = this.field_35776_a;
 		if(this.field_35775_c > 4.0F) {
 			this.field_35775_c -= 4.0F;
@@ -28,15 +28,9 @@
 			}
 		}
 
-		if(this.field_35776_a >= 18 && var1.func_35194_au()) {
-			++this.field_35772_d;
-			if(this.field_35772_d >= 80) {
-				var1.heal(1);
-				this.field_35772_d = 0;
-			}
-		} else if(this.field_35776_a <= 0) {
-			++this.field_35772_d;
-			if(this.field_35772_d >= 80) {
+		if(this.field_35776_a <= 0) {
+			++this.field_35772_d;
+			if(this.field_35772_d >= 40) {
 				if(var1.health > 10 || var2 >= 3 || var1.health > 1 && var2 >= 2) {
 					var1.attackEntityFrom(DamageSource.field_35536_f, 1);
 				}
--- net/minecraft/src/BiomeDecorator.java
+++ net/minecraft/src/BiomeDecorator.java
@@ -11,30 +11,30 @@
 	protected WorldGenerator field_35897_a = new WorldGenClay(4);
 	protected WorldGenerator field_35895_b = new WorldGenSand(7, Block.sand.blockID);
 	protected WorldGenerator field_35896_c = new WorldGenSand(6, Block.gravel.blockID);
-	protected WorldGenerator field_35893_d = new WorldGenMinable(Block.dirt.blockID, 32);
-	protected WorldGenerator field_35894_e = new WorldGenMinable(Block.gravel.blockID, 32);
-	protected WorldGenerator field_35891_f = new WorldGenMinable(Block.oreCoal.blockID, 16);
-	protected WorldGenerator field_35892_g = new WorldGenMinable(Block.oreIron.blockID, 8);
-	protected WorldGenerator field_35904_h = new WorldGenMinable(Block.oreGold.blockID, 8);
-	protected WorldGenerator field_35905_i = new WorldGenMinable(Block.oreRedstone.blockID, 7);
-	protected WorldGenerator field_35902_j = new WorldGenMinable(Block.oreDiamond.blockID, 7);
-	protected WorldGenerator field_35903_k = new WorldGenMinable(Block.oreLapis.blockID, 6);
+	protected WorldGenerator field_35893_d = new WorldGenMinable(Block.dirt.blockID, 32).normalStoneOnly();
+	protected WorldGenerator field_35894_e = new WorldGenMinable(Block.gravel.blockID, 32).normalStoneOnly();
+	protected WorldGenerator field_35891_f = new WorldGenMinable(Block.oreCoal.blockID, 16).inClay(0, 64).inheritStoneType();
+	protected WorldGenerator field_35892_g = new WorldGenMinable(Block.oreIron.blockID, 8).inClay(0, 64).inheritStoneType();
+	protected WorldGenerator field_35904_h = new WorldGenMinable(Block.oreGold.blockID, 8).inClay(0, 80).inheritStoneType();
+	protected WorldGenerator field_35905_i = new WorldGenMinable(Block.oreRedstone.blockID, 7).inClay(0, 64).inheritStoneType();
+	protected WorldGenerator field_35902_j = new WorldGenMinable(Block.oreDiamond.blockID, 7).inClay(0, 64).inheritStoneType();
+	protected WorldGenerator field_35903_k = new WorldGenMinable(Block.oreLapis.blockID, 6).inClay(0, 64).inheritStoneType();
 	protected WorldGenerator field_35900_l = new WorldGenFlowers(Block.plantYellow.blockID);
-	protected WorldGenerator field_35901_m = new WorldGenFlowers(Block.plantYellow.blockID);
+	protected WorldGenerator field_35901_m = new WorldGenFlowers(Block.plantRed.blockID);
 	protected WorldGenerator field_35898_n = new WorldGenFlowers(Block.mushroomBrown.blockID);
 	protected WorldGenerator field_35899_o = new WorldGenFlowers(Block.mushroomRed.blockID);
 	protected WorldGenerator field_35913_p = new WorldGenReed();
 	protected WorldGenerator field_35912_q = new WorldGenCactus();
-	protected int field_35911_r = 0;
-	protected int field_35910_s = 2;
-	protected int field_35909_t = 1;
-	protected int field_35908_u = 0;
-	protected int field_35907_v = 0;
-	protected int field_35906_w = 0;
-	protected int field_35916_x = 0;
-	protected int field_35915_y = 1;
-	protected int field_35914_z = 3;
-	protected int field_35888_A = 1;
+	protected int field_35911_r = 0; // Trees
+	protected int field_35910_s = 2; // Flowers
+	protected int field_35909_t = 1; // Grass
+	protected int field_35908_u = 0; // Dead bushes
+	protected int field_35907_v = 0; // Mushrooms
+	protected int field_35906_w = 0; // Reeds
+	protected int field_35916_x = 5; // Cacti
+	protected int field_35915_y = 1; // Sand 1
+	protected int field_35914_z = 3; // Sand 2
+	protected int field_35888_A = 1; // Clay
 
 	public BiomeDecorator(BiomeGenBase var1) {
 		this.field_35887_F = var1;
@@ -75,7 +75,7 @@
 		for(var1 = 0; var1 < this.field_35915_y; ++var1) {
 			var2 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 			var3 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
-			this.field_35895_b.generate(this.field_35889_B, this.field_35890_C, var2, this.field_35889_B.getTopSolidOrLiquidBlock(var2, var3), var3);
+			this.field_35896_c.generate(this.field_35889_B, this.field_35890_C, var2, this.field_35889_B.getTopSolidOrLiquidBlock(var2, var3), var3);
 		}
 
 		var1 = this.field_35911_r;
@@ -92,40 +92,30 @@
 			var5.generate(this.field_35889_B, this.field_35890_C, var3, this.field_35889_B.getHeightValue(var3, var4), var4);
 		}
 
-		Random var10000;
 		int var8;
-		for(var2 = 0; var2 < this.field_35910_s; ++var2) {
+		for(var2 = 0; var2 < this.field_35910_s * 2; ++var2) {
 			var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
-			var10000 = this.field_35890_C;
-			this.field_35889_B.getClass();
-			var4 = var10000.nextInt(128);
+			var4 = this.field_35890_C.nextInt(256);
 			var8 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			this.field_35900_l.generate(this.field_35889_B, this.field_35890_C, var3, var4, var8);
 			if(this.field_35890_C.nextInt(4) == 0) {
 				var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
-				var10000 = this.field_35890_C;
-				this.field_35889_B.getClass();
-				var4 = var10000.nextInt(128);
+				var4 = this.field_35890_C.nextInt(256);
 				var8 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 				this.field_35901_m.generate(this.field_35889_B, this.field_35890_C, var3, var4, var8);
 			}
 		}
 
-		for(var2 = 0; var2 < this.field_35909_t; ++var2) {
-			byte var7 = 1;
+		for(var2 = 0; var2 < this.field_35909_t * 2; ++var2) {
 			var4 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
-			var10000 = this.field_35890_C;
-			this.field_35889_B.getClass();
-			var8 = var10000.nextInt(128);
+			var8 = this.field_35890_C.nextInt(256);
 			int var6 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
-			(new WorldGenTallGrass(Block.tallGrass.blockID, var7)).generate(this.field_35889_B, this.field_35890_C, var4, var8, var6);
+			this.field_35887_F.getRandomWorldGenForGrass(this.field_35890_C).generate(this.field_35889_B, this.field_35890_C, var4, var8, var6);
 		}
 
-		for(var2 = 0; var2 < this.field_35908_u; ++var2) {
+		for(var2 = 0; var2 < this.field_35908_u * 2; ++var2) {
 			var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
-			var10000 = this.field_35890_C;
-			this.field_35889_B.getClass();
-			var4 = var10000.nextInt(128);
+			var4 = this.field_35890_C.nextInt(256);
 			var8 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			(new WorldGenDeadBush(Block.deadBush.blockID)).generate(this.field_35889_B, this.field_35890_C, var3, var4, var8);
 		}
@@ -138,88 +128,66 @@
 				this.field_35898_n.generate(this.field_35889_B, this.field_35890_C, var3, var8, var4);
 			}
 
-			if(this.field_35890_C.nextInt(8) == 0) {
+			if(this.field_35890_C.nextInt(4) == 0) {
 				var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 				var4 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
-				var10000 = this.field_35890_C;
-				this.field_35889_B.getClass();
-				var8 = var10000.nextInt(128);
+				var8 = this.field_35890_C.nextInt(256);
 				this.field_35899_o.generate(this.field_35889_B, this.field_35890_C, var3, var8, var4);
 			}
 		}
 
-		if(this.field_35890_C.nextInt(4) == 0) {
+		if(this.field_35890_C.nextInt(2) == 0) {
 			var2 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
-			var10000 = this.field_35890_C;
-			this.field_35889_B.getClass();
-			var3 = var10000.nextInt(128);
+			var3 = this.field_35890_C.nextInt(256);
 			var4 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			this.field_35898_n.generate(this.field_35889_B, this.field_35890_C, var2, var3, var4);
 		}
 
-		if(this.field_35890_C.nextInt(8) == 0) {
+		if(this.field_35890_C.nextInt(4) == 0) {
 			var2 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
-			var10000 = this.field_35890_C;
-			this.field_35889_B.getClass();
-			var3 = var10000.nextInt(128);
+			var3 = this.field_35890_C.nextInt(256);
 			var4 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			this.field_35899_o.generate(this.field_35889_B, this.field_35890_C, var2, var3, var4);
 		}
 
-		for(var2 = 0; var2 < this.field_35906_w; ++var2) {
+		for(var2 = 0; var2 < this.field_35906_w * 2; ++var2) {
 			var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 			var4 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
-			var10000 = this.field_35890_C;
-			this.field_35889_B.getClass();
-			var8 = var10000.nextInt(128);
+			var8 = this.field_35890_C.nextInt(256);
 			this.field_35913_p.generate(this.field_35889_B, this.field_35890_C, var3, var8, var4);
 		}
 
-		for(var2 = 0; var2 < 10; ++var2) {
+		for(var2 = 0; var2 < 20; ++var2) {
 			var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
-			var10000 = this.field_35890_C;
-			this.field_35889_B.getClass();
-			var4 = var10000.nextInt(128);
+			var4 = this.field_35890_C.nextInt(256);
 			var8 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			this.field_35913_p.generate(this.field_35889_B, this.field_35890_C, var3, var4, var8);
 		}
 
 		if(this.field_35890_C.nextInt(32) == 0) {
 			var2 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
-			var10000 = this.field_35890_C;
-			this.field_35889_B.getClass();
-			var3 = var10000.nextInt(128);
 			var4 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
+			var3 = this.field_35889_B.getHeightValue(var2, var4);
 			(new WorldGenPumpkin()).generate(this.field_35889_B, this.field_35890_C, var2, var3, var4);
 		}
 
-		for(var2 = 0; var2 < this.field_35916_x; ++var2) {
+		for(var2 = 0; var2 < this.field_35916_x * 2; ++var2) {
 			var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
-			var10000 = this.field_35890_C;
-			this.field_35889_B.getClass();
-			var4 = var10000.nextInt(128);
+			var4 = this.field_35890_C.nextInt(256);
 			var8 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			this.field_35912_q.generate(this.field_35889_B, this.field_35890_C, var3, var4, var8);
 		}
 
-		Random var10001;
-		for(var2 = 0; var2 < 50; ++var2) {
+		for(var2 = 0; var2 < 100; ++var2) {
 			var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
-			var10000 = this.field_35890_C;
-			var10001 = this.field_35890_C;
-			this.field_35889_B.getClass();
-			var4 = var10000.nextInt(var10001.nextInt(128 - 8) + 8);
+			var4 = this.field_35890_C.nextInt(this.field_35890_C.nextInt(256 - 8) + 8);
 			var8 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			(new WorldGenLiquids(Block.waterMoving.blockID)).generate(this.field_35889_B, this.field_35890_C, var3, var4, var8);
 		}
 
-		for(var2 = 0; var2 < 20; ++var2) {
+		for(var2 = 0; var2 < 40; ++var2) {
 			var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
-			var10000 = this.field_35890_C;
-			var10001 = this.field_35890_C;
-			Random var10002 = this.field_35890_C;
-			this.field_35889_B.getClass();
-			var4 = var10000.nextInt(var10001.nextInt(var10002.nextInt(128 - 16) + 8) + 8);
+			var4 = this.field_35890_C.nextInt(this.field_35890_C.nextInt(this.field_35890_C.nextInt(256 - 16) + 8) + 8);
 			var8 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			(new WorldGenLiquids(Block.lavaMoving.blockID)).generate(this.field_35889_B, this.field_35890_C, var3, var4, var8);
 		}
@@ -247,31 +215,13 @@
 	}
 
 	protected void func_35880_a() {
-		WorldGenerator var10002 = this.field_35893_d;
-		this.field_35889_B.getClass();
-		this.func_35884_a(20, var10002, 0, 128);
-		var10002 = this.field_35894_e;
-		this.field_35889_B.getClass();
-		this.func_35884_a(10, var10002, 0, 128);
-		var10002 = this.field_35891_f;
-		this.field_35889_B.getClass();
-		this.func_35884_a(20, var10002, 0, 128);
-		var10002 = this.field_35892_g;
-		this.field_35889_B.getClass();
-		this.func_35884_a(20, var10002, 0, 128 / 2);
-		var10002 = this.field_35904_h;
-		this.field_35889_B.getClass();
-		this.func_35884_a(2, var10002, 0, 128 / 4);
-		var10002 = this.field_35905_i;
-		this.field_35889_B.getClass();
-		this.func_35884_a(8, var10002, 0, 128 / 8);
-		var10002 = this.field_35902_j;
-		this.field_35889_B.getClass();
-		this.func_35884_a(1, var10002, 0, 128 / 8);
-		var10002 = this.field_35903_k;
-		this.field_35889_B.getClass();
-		int var10003 = 128 / 8;
-		this.field_35889_B.getClass();
-		this.func_35883_b(1, var10002, var10003, 128 / 8);
+		this.func_35884_a(40, this.field_35893_d, 0, 256);
+		this.func_35884_a(20, this.field_35894_e, 0, 256);
+		this.func_35884_a(40, this.field_35891_f, 0, 256);
+		this.func_35884_a(20, this.field_35892_g, 0, 128 / 2);
+		this.func_35884_a(2, this.field_35904_h, 0, 128 / 4);
+		this.func_35884_a(8, this.field_35905_i, 0, 128 / 8);
+		this.func_35884_a(1, this.field_35902_j, 0, 128 / 8);
+		this.func_35883_b(1, this.field_35903_k, 128 / 8, 128 / 8);
 	}
 }
--- net/minecraft/src/Block.java
+++ net/minecraft/src/Block.java
@@ -21,36 +21,36 @@
 	public static final boolean[] canBlockGrass = new boolean[256];
 	public static final int[] lightValue = new int[256];
 	public static final boolean[] requiresSelfNotify = new boolean[256];
-	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stone");
-	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("grass");
-	public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep).setBlockName("dirt");
-	public static final Block cobblestone = (new Block(4, 16, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stonebrick");
-	public static final Block planks = (new Block(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("wood").setRequiresSelfNotify();
+	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stone").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("grass").setEffectiveAgainst(EnumTool.SHOVEL);
+	public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep).setBlockName("dirt").setEffectiveAgainst(EnumTool.SHOVEL);
+	public static final Block cobblestone = (new BlockStone(4, 16)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stonebrick").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block planks = (new BlockMultitype(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("wood").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
 	public static final Block sapling = (new BlockSapling(6, 15)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("sapling").setRequiresSelfNotify();
 	public static final Block bedrock = (new Block(7, 17, Material.rock)).setBlockUnbreakable().setResistance(6000000.0F).setStepSound(soundStoneFootstep).setBlockName("bedrock").disableStats();
-	public static final Block waterMoving = (new BlockFlowing(8, Material.water)).setHardness(100.0F).setLightOpacity(3).setBlockName("water").disableStats().setRequiresSelfNotify();
-	public static final Block waterStill = (new BlockStationary(9, Material.water)).setHardness(100.0F).setLightOpacity(3).setBlockName("water").disableStats().setRequiresSelfNotify();
+	public static final Block waterMoving = (new BlockFlowing(8, Material.water)).setHardness(100.0F).setLightOpacity(1).setBlockName("water").disableStats().setRequiresSelfNotify();
+	public static final Block waterStill = (new BlockStationary(9, Material.water)).setHardness(100.0F).setLightOpacity(1).setBlockName("water").disableStats().setRequiresSelfNotify();
 	public static final Block lavaMoving = (new BlockFlowing(10, Material.lava)).setHardness(0.0F).setLightValue(1.0F).setLightOpacity(255).setBlockName("lava").disableStats().setRequiresSelfNotify();
 	public static final Block lavaStill = (new BlockStationary(11, Material.lava)).setHardness(100.0F).setLightValue(1.0F).setLightOpacity(255).setBlockName("lava").disableStats().setRequiresSelfNotify();
-	public static final Block sand = (new BlockSand(12, 18)).setHardness(0.5F).setStepSound(soundSandFootstep).setBlockName("sand");
-	public static final Block gravel = (new BlockGravel(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("gravel");
-	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreGold");
-	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreIron");
-	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreCoal");
-	public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep).setBlockName("log").setRequiresSelfNotify();
+	public static final Block sand = (new BlockSand(12, 18)).setHardness(0.5F).setStepSound(soundSandFootstep).setBlockName("sand").setEffectiveAgainst(EnumTool.SHOVEL);
+	public static final Block gravel = (new BlockGravel(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("gravel").setEffectiveAgainst(EnumTool.SHOVEL);
+	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreGold").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreIron").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreCoal").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep).setBlockName("log").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
 	public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep).setBlockName("leaves").setRequiresSelfNotify();
 	public static final Block sponge = (new BlockSponge(19)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("sponge");
 	public static final Block glass = (new BlockGlass(20, 49, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep).setBlockName("glass");
-	public static final Block oreLapis = (new BlockOre(21, 160)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreLapis");
-	public static final Block blockLapis = (new Block(22, 144, Material.rock)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("blockLapis");
+	public static final Block oreLapis = (new BlockOre(21, 160)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreLapis").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block blockLapis = (new Block(22, 144, Material.rock)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("blockLapis").setEffectiveAgainst(EnumTool.PICKAXE);
 	public static final Block dispenser = (new BlockDispenser(23)).setHardness(3.5F).setStepSound(soundStoneFootstep).setBlockName("dispenser").setRequiresSelfNotify();
-	public static final Block sandStone = (new BlockSandStone(24)).setStepSound(soundStoneFootstep).setHardness(0.8F).setBlockName("sandStone");
-	public static final Block music = (new BlockNote(25)).setHardness(0.8F).setBlockName("musicBlock").setRequiresSelfNotify();
+	public static final Block sandStone = (new BlockSandStone(24)).setStepSound(soundStoneFootstep).setHardness(0.8F).setBlockName("sandStone").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block music = (new BlockNote(25)).setHardness(0.8F).setBlockName("musicBlock").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
 	public static final Block bed = (new BlockBed(26)).setHardness(0.2F).setBlockName("bed").disableStats().setRequiresSelfNotify();
 	public static final Block railPowered = (new BlockRail(27, 179, true)).setHardness(0.7F).setStepSound(soundMetalFootstep).setBlockName("goldenRail").setRequiresSelfNotify();
 	public static final Block railDetector = (new BlockDetectorRail(28, 195)).setHardness(0.7F).setStepSound(soundMetalFootstep).setBlockName("detectorRail").setRequiresSelfNotify();
 	public static final Block pistonStickyBase = (new BlockPistonBase(29, 106, true)).setBlockName("pistonStickyBase").setRequiresSelfNotify();
-	public static final Block web = (new BlockWeb(30, 11)).setLightOpacity(1).setHardness(4.0F).setBlockName("web");
+	public static final Block web = (new BlockWeb(30, 11)).setLightOpacity(1).setHardness(4.0F).setBlockName("web").setEffectiveAgainst(EnumTool.SWORD);
 	public static final BlockTallGrass tallGrass = (BlockTallGrass)(new BlockTallGrass(31, 39)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("tallgrass");
 	public static final BlockDeadBush deadBush = (BlockDeadBush)(new BlockDeadBush(32, 55)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("deadbush");
 	public static final Block pistonBase = (new BlockPistonBase(33, 107, false)).setBlockName("pistonBase").setRequiresSelfNotify();
@@ -61,81 +61,99 @@
 	public static final BlockFlower plantRed = (BlockFlower)(new BlockFlower(38, 12)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("rose");
 	public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(2.0F / 16.0F).setBlockName("mushroom");
 	public static final BlockFlower mushroomRed = (BlockFlower)(new BlockMushroom(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("mushroom");
-	public static final Block blockGold = (new BlockOreStorage(41, 23)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockGold");
-	public static final Block blockSteel = (new BlockOreStorage(42, 22)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockIron");
-	public static final Block stairDouble = (new BlockStep(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab");
-	public static final Block stairSingle = (new BlockStep(44, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab");
-	public static final Block brick = (new Block(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("brick");
+	public static final Block blockGold = (new BlockOreStorage(41, 23)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockGold").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block blockSteel = (new BlockOreStorage(42, 22)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockIron").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairDouble = (new BlockStep(43, true, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairSingle = (new BlockStep(44, false, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block brick = (new Block(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("brick").setEffectiveAgainst(EnumTool.PICKAXE);
 	public static final Block tnt = (new BlockTNT(46, 8)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("tnt");
-	public static final Block bookShelf = (new BlockBookshelf(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep).setBlockName("bookshelf");
-	public static final Block cobblestoneMossy = (new Block(48, 36, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneMoss");
-	public static final Block obsidian = (new BlockObsidian(49, 37)).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep).setBlockName("obsidian");
+	public static final Block bookShelf = (new BlockBookshelf(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep).setBlockName("bookshelf").setEffectiveAgainst(EnumTool.AXE);
+	public static final Block cobblestoneMossy = (new Block(48, 36, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneMoss").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block obsidian = (new Block(49, 37, Material.rock)).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep).setBlockName("obsidian");
 	public static final Block torchWood = (new BlockTorch(50, 80)).setHardness(0.0F).setLightValue(15.0F / 16.0F).setStepSound(soundWoodFootstep).setBlockName("torch").setRequiresSelfNotify();
 	public static final BlockFire fire = (BlockFire)(new BlockFire(51, 31)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep).setBlockName("fire").disableStats();
-	public static final Block mobSpawner = (new BlockMobSpawner(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep).setBlockName("mobSpawner").disableStats();
-	public static final Block stairCompactPlanks = (new BlockStairs(53, planks)).setBlockName("stairsWood").setRequiresSelfNotify();
-	public static final Block chest = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep).setBlockName("chest").setRequiresSelfNotify();
+	public static final Block mobSpawner = (new BlockMobSpawner(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep).setBlockName("mobSpawner").disableStats().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairCompactPlanks = (new BlockStairs(53, planks)).setBlockName("stairsMahogany").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block chest = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep).setBlockName("chest").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
 	public static final Block redstoneWire = (new BlockRedstoneWire(55, 164)).setHardness(0.0F).setStepSound(soundPowderFootstep).setBlockName("redstoneDust").disableStats().setRequiresSelfNotify();
-	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreDiamond");
-	public static final Block blockDiamond = (new BlockOreStorage(57, 24)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockDiamond");
-	public static final Block workbench = (new BlockWorkbench(58)).setHardness(2.5F).setStepSound(soundWoodFootstep).setBlockName("workbench");
+	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreDiamond").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block blockDiamond = (new BlockOreStorage(57, 24)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockDiamond").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block workbench = (new BlockWorkbench(58)).setHardness(2.5F).setStepSound(soundWoodFootstep).setBlockName("workbench").setEffectiveAgainst(EnumTool.AXE);
 	public static final Block crops = (new BlockCrops(59, 88)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("crops").disableStats().setRequiresSelfNotify();
-	public static final Block tilledField = (new BlockFarmland(60)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("farmland").setRequiresSelfNotify();
-	public static final Block stoneOvenIdle = (new BlockFurnace(61, false)).setHardness(3.5F).setStepSound(soundStoneFootstep).setBlockName("furnace").setRequiresSelfNotify();
-	public static final Block stoneOvenActive = (new BlockFurnace(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(14.0F / 16.0F).setBlockName("furnace").setRequiresSelfNotify();
-	public static final Block signPost = (new BlockSign(63, TileEntitySign.class, true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("sign").disableStats().setRequiresSelfNotify();
-	public static final Block doorWood = (new BlockDoor(64, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setBlockName("doorWood").disableStats().setRequiresSelfNotify();
-	public static final Block ladder = (new BlockLadder(65, 83)).setHardness(0.4F).setStepSound(soundWoodFootstep).setBlockName("ladder").setRequiresSelfNotify();
-	public static final Block rail = (new BlockRail(66, 128, false)).setHardness(0.7F).setStepSound(soundMetalFootstep).setBlockName("rail").setRequiresSelfNotify();
-	public static final Block stairCompactCobblestone = (new BlockStairs(67, cobblestone)).setBlockName("stairsStone").setRequiresSelfNotify();
-	public static final Block signWall = (new BlockSign(68, TileEntitySign.class, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("sign").disableStats().setRequiresSelfNotify();
+	public static final Block tilledField = (new BlockFarmland(60)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("farmland").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.SHOVEL);
+	public static final Block stoneOvenIdle = (new BlockFurnace(61, false)).setHardness(3.5F).setStepSound(soundStoneFootstep).setBlockName("furnace").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stoneOvenActive = (new BlockFurnace(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(14.0F / 16.0F).setBlockName("furnace").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block signPost = (new BlockSign(63, TileEntitySign.class, true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("sign").disableStats().setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block doorWood = (new BlockDoor(64, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setBlockName("doorWood").disableStats().setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block ladder = (new BlockLadder(65, 83)).setHardness(0.4F).setStepSound(soundWoodFootstep).setBlockName("ladder").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block rail = (new BlockRail(66, 128, false)).setHardness(0.7F).setStepSound(soundMetalFootstep).setBlockName("rail").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairCompactCobblestone = (new BlockStairs(67, cobblestone)).setBlockName("stairsStone").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block signWall = (new BlockSign(68, TileEntitySign.class, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("sign").disableStats().setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
 	public static final Block lever = (new BlockLever(69, 96)).setHardness(0.5F).setStepSound(soundWoodFootstep).setBlockName("lever").setRequiresSelfNotify();
-	public static final Block pressurePlateStone = (new BlockPressurePlate(70, stone.blockIndexInTexture, EnumMobType.mobs, Material.rock)).setHardness(0.5F).setStepSound(soundStoneFootstep).setBlockName("pressurePlate").setRequiresSelfNotify();
-	public static final Block doorSteel = (new BlockDoor(71, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep).setBlockName("doorIron").disableStats().setRequiresSelfNotify();
-	public static final Block pressurePlatePlanks = (new BlockPressurePlate(72, planks.blockIndexInTexture, EnumMobType.everything, Material.wood)).setHardness(0.5F).setStepSound(soundWoodFootstep).setBlockName("pressurePlate").setRequiresSelfNotify();
-	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreRedstone").setRequiresSelfNotify();
-	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, true)).setLightValue(10.0F / 16.0F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreRedstone").setRequiresSelfNotify();
+	public static final Block pressurePlateStone = (new BlockPressurePlate(70, stone.blockIndexInTexture, EnumMobType.mobs, Material.rock)).setHardness(0.5F).setStepSound(soundStoneFootstep).setBlockName("pressurePlate").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block doorSteel = (new BlockDoor(71, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep).setBlockName("doorIron").disableStats().setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block pressurePlatePlanks = (new BlockPressurePlate(72, planks.blockIndexInTexture, EnumMobType.everything, Material.wood)).setHardness(0.5F).setStepSound(soundWoodFootstep).setBlockName("pressurePlate").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreRedstone").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, true)).setLightValue(10.0F / 16.0F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreRedstone").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
 	public static final Block torchRedstoneIdle = (new BlockRedstoneTorch(75, 115, false)).setHardness(0.0F).setStepSound(soundWoodFootstep).setBlockName("notGate").setRequiresSelfNotify();
 	public static final Block torchRedstoneActive = (new BlockRedstoneTorch(76, 99, true)).setHardness(0.0F).setLightValue(0.5F).setStepSound(soundWoodFootstep).setBlockName("notGate").setRequiresSelfNotify();
 	public static final Block button = (new BlockButton(77, stone.blockIndexInTexture)).setHardness(0.5F).setStepSound(soundStoneFootstep).setBlockName("button").setRequiresSelfNotify();
-	public static final Block snow = (new BlockSnow(78, 66)).setHardness(0.1F).setStepSound(soundClothFootstep).setBlockName("snow");
-	public static final Block ice = (new BlockIce(79, 67)).setHardness(0.5F).setLightOpacity(3).setStepSound(soundGlassFootstep).setBlockName("ice");
-	public static final Block blockSnow = (new BlockSnowBlock(80, 66)).setHardness(0.2F).setStepSound(soundClothFootstep).setBlockName("snow");
+	public static final Block snow = (new BlockSnow(78, 66)).setHardness(0.1F).setStepSound(soundClothFootstep).setBlockName("snow").setEffectiveAgainst(EnumTool.SHOVEL);
+	public static final Block ice = (new BlockIce(79, 67)).setHardness(0.5F).setLightOpacity(3).setStepSound(soundGlassFootstep).setBlockName("ice").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block blockSnow = (new BlockSnowBlock(80, 66)).setHardness(0.2F).setStepSound(soundClothFootstep).setBlockName("snow").setEffectiveAgainst(EnumTool.SHOVEL);
 	public static final Block cactus = (new BlockCactus(81, 70)).setHardness(0.4F).setStepSound(soundClothFootstep).setBlockName("cactus");
-	public static final Block blockClay = (new BlockClay(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("clay");
+	public static final Block blockClay = (new BlockClay(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("clay").setEffectiveAgainst(EnumTool.SHOVEL);
 	public static final Block reed = (new BlockReed(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("reeds").disableStats();
-	public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("jukebox").setRequiresSelfNotify();
-	public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("fence");
-	public static final Block pumpkin = (new BlockPumpkin(86, 102, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("pumpkin").setRequiresSelfNotify();
-	public static final Block netherrack = (new BlockNetherrack(87, 103)).setHardness(0.4F).setStepSound(soundStoneFootstep).setBlockName("hellrock");
-	public static final Block slowSand = (new BlockSoulSand(88, 104)).setHardness(0.5F).setStepSound(soundSandFootstep).setBlockName("hellsand");
+	public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("jukebox").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("fence").setEffectiveAgainst(EnumTool.AXE);
+	public static final Block pumpkin = (new BlockPumpkin(86, 102, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("pumpkin").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block netherrack = (new BlockNetherrack(87, 103)).setHardness(0.4F).setStepSound(soundStoneFootstep).setBlockName("hellrock").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block slowSand = (new BlockSoulSand(88, 104)).setHardness(0.5F).setStepSound(soundSandFootstep).setBlockName("hellsand").setEffectiveAgainst(EnumTool.SHOVEL);
 	public static final Block glowStone = (new BlockGlowStone(89, 105, Material.rock)).setHardness(0.3F).setStepSound(soundGlassFootstep).setLightValue(1.0F).setBlockName("lightgem");
 	public static final BlockPortal portal = (BlockPortal)(new BlockPortal(90, 14)).setHardness(-1.0F).setStepSound(soundGlassFootstep).setLightValue(12.0F / 16.0F).setBlockName("portal");
-	public static final Block pumpkinLantern = (new BlockPumpkin(91, 102, true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setLightValue(1.0F).setBlockName("litpumpkin").setRequiresSelfNotify();
+	public static final Block pumpkinLantern = (new BlockPumpkin(91, 102, true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setLightValue(1.0F).setBlockName("litpumpkin").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
 	public static final Block cake = (new BlockCake(92, 121)).setHardness(0.5F).setStepSound(soundClothFootstep).setBlockName("cake").disableStats().setRequiresSelfNotify();
 	public static final Block redstoneRepeaterIdle = (new BlockRedstoneRepeater(93, false)).setHardness(0.0F).setStepSound(soundWoodFootstep).setBlockName("diode").disableStats().setRequiresSelfNotify();
 	public static final Block redstoneRepeaterActive = (new BlockRedstoneRepeater(94, true)).setHardness(0.0F).setLightValue(10.0F / 16.0F).setStepSound(soundWoodFootstep).setBlockName("diode").disableStats().setRequiresSelfNotify();
 	public static final Block lockedChest = (new BlockLockedChest(95)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep).setBlockName("lockedchest").setTickOnLoad(true).setRequiresSelfNotify();
-	public static final Block trapdoor = (new BlockTrapDoor(96, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setBlockName("trapdoor").disableStats().setRequiresSelfNotify();
-	public static final Block field_35289_bm = (new BlockSilverfish(97)).setHardness(12.0F / 16.0F);
-	public static final Block field_35285_bn = (new BlockStoneBrick(98)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stonebricksmooth");
-	public static final Block field_35286_bo = (new BlockMushroomCap(99, Material.wood, 142, 0)).setHardness(0.2F).setStepSound(soundWoodFootstep).setBlockName("mushroom").setRequiresSelfNotify();
-	public static final Block field_35287_bp = (new BlockMushroomCap(100, Material.wood, 142, 1)).setHardness(0.2F).setStepSound(soundWoodFootstep).setBlockName("mushroom").setRequiresSelfNotify();
-	public static final Block field_35288_bq = (new BlockPane(101, 85, 85, Material.iron)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("fenceIron");
+	public static final Block trapdoor = (new BlockTrapDoor(96, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setBlockName("trapdoor").disableStats().setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block field_35289_bm = (new BlockSilverfish(97)).setHardness(2.0F).setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block field_35285_bn = (new BlockStoneBrick(98)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stonebricksmooth").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block field_35286_bo = (new BlockMushroomCap(99, Material.wood, 142, 0)).setHardness(0.2F).setStepSound(soundWoodFootstep).setBlockName("mushroom").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block field_35287_bp = (new BlockMushroomCap(100, Material.wood, 142, 1)).setHardness(0.2F).setStepSound(soundWoodFootstep).setBlockName("mushroom").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block field_35288_bq = (new BlockPane(101, 85, 85, Material.iron)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("fenceIron").setEffectiveAgainst(EnumTool.PICKAXE);
 	public static final Block field_35282_br = (new BlockPane(102, 49, 148, Material.glass)).setHardness(0.3F).setStepSound(soundGlassFootstep).setBlockName("thinGlass");
-	public static final Block field_35281_bs = (new BlockMelon(103)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("melon");
+	public static final Block field_35281_bs = (new BlockMelon(103)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("melon").setEffectiveAgainst(EnumTool.AXE);
 	public static final Block field_35284_bt = (new BlockStem(104, pumpkin)).setHardness(0.0F).setStepSound(soundWoodFootstep).setBlockName("pumpkinStem").setRequiresSelfNotify();
 	public static final Block field_35283_bu = (new BlockStem(105, field_35281_bs)).setHardness(0.0F).setStepSound(soundWoodFootstep).setBlockName("pumpkinStem").setRequiresSelfNotify();
 	public static final Block field_35278_bv = (new BlockVine(106)).setHardness(0.2F).setStepSound(soundGrassFootstep).setBlockName("vine").setRequiresSelfNotify();
-	public static final Block field_35277_bw = (new BlockFenceGate(107, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("fenceGate").setRequiresSelfNotify();
-	public static final Block field_35280_bx = (new BlockStairs(108, brick)).setBlockName("stairsBrick").setRequiresSelfNotify();
-	public static final Block field_35279_by = (new BlockStairs(109, field_35285_bn)).setBlockName("stairsStoneBrickSmooth").setRequiresSelfNotify();
+	public static final Block field_35277_bw = (new BlockFenceGate(107, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("fenceGate").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block field_35280_bx = (new BlockStairs(108, brick)).setBlockName("stairsBrick").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block field_35279_by = (new BlockStairs(109, field_35285_bn)).setBlockName("stairsStoneBrickSmooth").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block hardenedClay = (new BlockHardenedClay(110, 226, Material.rock)).setHardness(1.25F).setResistance(4.2F).setStepSound(soundStoneFootstep).setBlockName("hardenedClay").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairCompactPlanks1 = (new BlockStairs(111, planks, 1)).setBlockName("stairsPalm").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairCompactPlanks2 = (new BlockStairs(112, planks, 2)).setBlockName("stairsAcacia").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairDoubleWood = (new BlockStepWood(113, true, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("stoneSlab").setEffectiveAgainst(EnumTool.AXE);
+	public static final Block stairSingleWood = (new BlockStepWood(114, false, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("stoneSlab").setEffectiveAgainst(EnumTool.AXE);
+	public static final Block stairCompactPlanks3 = (new BlockStairs(115, planks, 3)).setBlockName("stairsWenge").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairCompactCobblestone1 = (new BlockStairs(116, cobblestone, 1)).setBlockName("stairsLimestone").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairCompactCobblestone2 = (new BlockStairs(117, cobblestone, 2)).setBlockName("stairsGranite").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block stairCompactCobblestone3 = (new BlockStairs(118, cobblestone, 3)).setBlockName("stairsBasalt").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block field_35279_by1 = (new BlockStairs(119, field_35285_bn, 4)).setBlockName("stairsLimestoneBrickSmooth").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block field_35279_by2 = (new BlockStairs(120, field_35285_bn, 8)).setBlockName("stairsGraniteBrickSmooth").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block field_35279_by3 = (new BlockStairs(121, field_35285_bn, 12)).setBlockName("stairsBasaltBrickSmooth").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block coral = (new BlockHardenedClay(122, 224, Material.rock)).setHardness(1.25F).setResistance(4.2F).setStepSound(soundStoneFootstep).setBlockName("coral").setEffectiveAgainst(EnumTool.PICKAXE);
+	public static final Block ash = (new BlockAsh(125, 227)).setHardness(0.5F).setStepSound(soundSandFootstep).setBlockName("ash").setEffectiveAgainst(EnumTool.SHOVEL);
+	public static final Block palmFenceGate = (new BlockFenceGate(126, 260)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("palmFenceGate").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block acaciaFenceGate = (new BlockFenceGate(127, 516)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("acaciaFenceGate").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
+	public static final Block wengeFenceGate = (new BlockFenceGate(128, 772)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("wengeFenceGate").setRequiresSelfNotify().setEffectiveAgainst(EnumTool.AXE);
 	public int blockIndexInTexture;
 	public final int blockID;
 	protected float blockHardness;
 	protected float blockResistance;
 	protected boolean blockConstructorCalled;
 	protected boolean enableStats;
+	private int effectiveAgainst;
 	public double minX;
 	public double minY;
 	public double minZ;
@@ -201,6 +219,17 @@
 		return this;
 	}
 
+	protected Block setEffectiveAgainst(EnumTool... tools) {
+		for (EnumTool tool : tools) {
+			effectiveAgainst |= tool.getToolBit();
+		}
+		return this;
+	}
+
+	public int getEffectiveAgainst() {
+		return effectiveAgainst;
+	}
+
 	public boolean renderAsNormalBlock() {
 		return true;
 	}
@@ -588,14 +617,23 @@
 	static {
 		Item.itemsList[cloth.blockID] = (new ItemCloth(cloth.blockID - 256)).setItemName("cloth");
 		Item.itemsList[wood.blockID] = (new ItemLog(wood.blockID - 256, wood)).setItemName("log");
+		Item.itemsList[planks.blockID] = (new ItemLog(planks.blockID - 256, planks)).setItemName("wood");
 		Item.itemsList[field_35285_bn.blockID] = (new ItemLog(field_35285_bn.blockID - 256, field_35285_bn)).setItemName("stonebricksmooth");
-		Item.itemsList[stairSingle.blockID] = (new ItemSlab(stairSingle.blockID - 256)).setItemName("stoneSlab");
+		Item.itemsList[stairSingle.blockID] = (new ItemSlab(stairSingle.blockID - 256, (BlockStep)stairSingle)).setItemName("stoneSlab");
 		Item.itemsList[sapling.blockID] = (new ItemSapling(sapling.blockID - 256)).setItemName("sapling");
 		Item.itemsList[leaves.blockID] = (new ItemLeaves(leaves.blockID - 256)).setItemName("leaves");
 		Item.itemsList[field_35278_bv.blockID] = new ItemVine(field_35278_bv.blockID - 256, false);
 		Item.itemsList[tallGrass.blockID] = new ItemVine(tallGrass.blockID - 256, true);
 		Item.itemsList[pistonBase.blockID] = new ItemPiston(pistonBase.blockID - 256);
 		Item.itemsList[pistonStickyBase.blockID] = new ItemPiston(pistonStickyBase.blockID - 256);
+		Item.itemsList[hardenedClay.blockID] = (new ItemCloth(hardenedClay.blockID - 256)).setItemName("hardenedClay");
+		Item.itemsList[sand.blockID] = (new ItemLog(sand.blockID - 256, sand)).setItemName("sand");
+		Item.itemsList[sandStone.blockID] = (new ItemLog(sandStone.blockID - 256, sandStone)).setItemName("sandStone");
+		Item.itemsList[stairSingleWood.blockID] = (new ItemSlab(stairSingleWood.blockID - 256, (BlockStep)stairSingleWood)).setItemName("stoneSlab.wood");
+		Item.itemsList[stone.blockID] = (new ItemLog(stone.blockID - 256, stone)).setItemName("stone");
+		Item.itemsList[cobblestone.blockID] = (new ItemLog(cobblestone.blockID - 256, cobblestone)).setItemName("stonebrick");
+		Item.itemsList[coral.blockID] = (new ItemCloth(coral.blockID - 256)).setItemName("coral");
+		Item.itemsList[fence.blockID] = (new ItemLog(fence.blockID - 256, fence)).setItemName("fence");
 
 		for(int var0 = 0; var0 < 256; ++var0) {
 			if(blocksList[var0] != null && Item.itemsList[var0] == null) {
--- net/minecraft/src/BlockLeaves.java
+++ net/minecraft/src/BlockLeaves.java
@@ -4,7 +4,6 @@
 
 public class BlockLeaves extends BlockLeavesBase {
 	private int baseIndexInPNG;
-	int[] adjacentTreeBlocks;
 
 	protected BlockLeaves(int var1, int var2) {
 		super(var1, var2, Material.leaves, false);
@@ -19,138 +18,38 @@
 	}
 
 	public int getRenderColor(int var1) {
-		return (var1 & 1) == 1 ? ColorizerFoliage.getFoliageColorPine() : ((var1 & 2) == 2 ? ColorizerFoliage.getFoliageColorBirch() : ColorizerFoliage.func_31073_c());
+		return ColorizerFoliage.func_31073_c();
 	}
 
 	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
 		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		if((var5 & 1) == 1) {
-			return ColorizerFoliage.getFoliageColorPine();
-		} else if((var5 & 2) == 2) {
-			return ColorizerFoliage.getFoliageColorBirch();
-		} else {
-			double var6 = (double)var1.getWorldChunkManager().func_35554_b(var2, var4);
-			double var8 = (double)var1.getWorldChunkManager().func_35558_c(var2, var4);
-			return ColorizerFoliage.getFoliageColor(var6, var8);
-		}
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		byte var5 = 1;
-		int var6 = var5 + 1;
-		if(var1.checkChunksExist(var2 - var6, var3 - var6, var4 - var6, var2 + var6, var3 + var6, var4 + var6)) {
-			for(int var7 = -var5; var7 <= var5; ++var7) {
-				for(int var8 = -var5; var8 <= var5; ++var8) {
-					for(int var9 = -var5; var9 <= var5; ++var9) {
-						int var10 = var1.getBlockId(var2 + var7, var3 + var8, var4 + var9);
-						if(var10 == Block.leaves.blockID) {
-							int var11 = var1.getBlockMetadata(var2 + var7, var3 + var8, var4 + var9);
-							var1.setBlockMetadata(var2 + var7, var3 + var8, var4 + var9, var11 | 8);
-						}
-					}
-				}
-			}
-		}
-
+		double var6 = (double)var1.getWorldChunkManager().func_35554_b(var2, var4);
+		double var8 = (double)var1.getWorldChunkManager().func_35558_c(var2, var4);
+		int color = ColorizerFoliage.getFoliageColor(var6, var8);
+		if ((var5 & 3) == 3) color = (int)((color & 0xFF) / 1.5F)
+				+ ((int)((color & 0xFF00) / 1.5F) & 0xFF00)
+				+ ((int)((color & 0xFF0000) / 1.5F) & 0xFF0000)
+				+ (color & 0xFF000000);
+		return color;
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
 		if(!var1.multiplayerWorld) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if((var6 & 8) != 0 && (var6 & 4) == 0) {
-				byte var7 = 4;
-				int var8 = var7 + 1;
-				byte var9 = 32;
-				int var10 = var9 * var9;
-				int var11 = var9 / 2;
-				if(this.adjacentTreeBlocks == null) {
-					this.adjacentTreeBlocks = new int[var9 * var9 * var9];
-				}
-
-				int var12;
-				if(var1.checkChunksExist(var2 - var8, var3 - var8, var4 - var8, var2 + var8, var3 + var8, var4 + var8)) {
-					var12 = -var7;
-
-					label112:
-					while(true) {
-						int var13;
-						int var14;
-						int var15;
-						if(var12 > var7) {
-							var12 = 1;
-
-							while(true) {
-								if(var12 > 4) {
-									break label112;
-								}
-
-								for(var13 = -var7; var13 <= var7; ++var13) {
-									for(var14 = -var7; var14 <= var7; ++var14) {
-										for(var15 = -var7; var15 <= var7; ++var15) {
-											if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11] == var12 - 1) {
-												if(this.adjacentTreeBlocks[(var13 + var11 - 1) * var10 + (var14 + var11) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11 - 1) * var10 + (var14 + var11) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11 + 1) * var10 + (var14 + var11) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11 + 1) * var10 + (var14 + var11) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 - 1) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 - 1) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 + 1) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 + 1) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + (var15 + var11 - 1)] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + (var15 + var11 - 1)] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11 + 1] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11 + 1] = var12;
-												}
-											}
-										}
-									}
-								}
-
-								++var12;
-							}
-						}
-
-						for(var13 = -var7; var13 <= var7; ++var13) {
-							for(var14 = -var7; var14 <= var7; ++var14) {
-								var15 = var1.getBlockId(var2 + var12, var3 + var13, var4 + var14);
-								if(var15 == Block.wood.blockID) {
-									this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = 0;
-								} else if(var15 == Block.leaves.blockID) {
-									this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = -2;
-								} else {
-									this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = -1;
-								}
-							}
-						}
-
-						++var12;
+			if(!var1.getBlockMaterial(var2, var3 - 1, var4).isSolid()) {
+				for (int i8 = var3 - 3; i8 <= var3 + 3; ++i8) {
+					for (int i7 = var2 - 5; i7 <= var2 + 5; ++i7) {
+						for (int i9 = var4 - 5; i9 <= var4 + 5; ++i9) {
+							if (var1.getBlockId(i7, i8, i9) == Block.wood.blockID) {
+								return;
+							}
+						}
 					}
 				}
 
-				var12 = this.adjacentTreeBlocks[var11 * var10 + var11 * var9 + var11];
-				if(var12 >= 0) {
-					var1.setBlockMetadata(var2, var3, var4, var6 & -9);
-				} else {
-					this.removeLeaves(var1, var2, var3, var4);
-				}
+				this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
+				var1.setBlockWithNotify(var2, var3, var4, 0);
 			}
-
 		}
-	}
-
-	private void removeLeaves(World var1, int var2, int var3, int var4) {
-		this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-		var1.setBlockWithNotify(var2, var3, var4, 0);
 	}
 
 	public int quantityDropped(Random var1) {
@@ -180,7 +79,7 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return (var2 & 3) == 1 ? this.blockIndexInTexture + 80 : this.blockIndexInTexture;
+		return (var2 & 3) == 2 || (var2 & 3) == 3 ? this.blockIndexInTexture : this.blockIndexInTexture + 80;
 	}
 
 	public void setGraphicsLevel(boolean var1) {
--- net/minecraft/src/MapGenCaves.java
+++ net/minecraft/src/MapGenCaves.java
@@ -3,11 +3,11 @@
 import java.util.Random;
 
 public class MapGenCaves extends MapGenBase {
-	protected void generateLargeCaveNode(long var1, int var3, int var4, byte[] var5, double var6, double var8, double var10) {
-		this.generateCaveNode(var1, var3, var4, var5, var6, var8, var10, 1.0F + this.rand.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
+	protected void generateLargeCaveNode(long var1, int var3, int var4, byte[] var5, byte[] var5a, double var6, double var8, double var10) {
+		this.generateCaveNode(var1, var3, var4, var5, var5a, var6, var8, var10, 1.0F + this.rand.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
 	}
 
-	protected void generateCaveNode(long var1, int var3, int var4, byte[] var5, double var6, double var8, double var10, float var12, float var13, float var14, int var15, int var16, double var17) {
+	protected void generateCaveNode(long var1, int var3, int var4, byte[] var5, byte[] var5a, double var6, double var8, double var10, float var12, float var13, float var14, int var15, int var16, double var17) {
 		double var19 = (double)(var3 * 16 + 8);
 		double var21 = (double)(var4 * 16 + 8);
 		float var23 = 0.0F;
@@ -47,8 +47,8 @@
 			var24 += (var25.nextFloat() - var25.nextFloat()) * var25.nextFloat() * 2.0F;
 			var23 += (var25.nextFloat() - var25.nextFloat()) * var25.nextFloat() * 4.0F;
 			if(!var54 && var15 == var27 && var12 > 1.0F && var16 > 0) {
-				this.generateCaveNode(var25.nextLong(), var3, var4, var5, var6, var8, var10, var25.nextFloat() * 0.5F + 0.5F, var13 - (float)Math.PI * 0.5F, var14 / 3.0F, var15, var16, 1.0D);
-				this.generateCaveNode(var25.nextLong(), var3, var4, var5, var6, var8, var10, var25.nextFloat() * 0.5F + 0.5F, var13 + (float)Math.PI * 0.5F, var14 / 3.0F, var15, var16, 1.0D);
+				this.generateCaveNode(var25.nextLong(), var3, var4, var5, var5a, var6, var8, var10, var25.nextFloat() * 0.5F + 0.5F, var13 - (float)Math.PI * 0.5F, var14 / 3.0F, var15, var16, 1.0D);
+				this.generateCaveNode(var25.nextLong(), var3, var4, var5, var5a, var6, var8, var10, var25.nextFloat() * 0.5F + 0.5F, var13 + (float)Math.PI * 0.5F, var14 / 3.0F, var15, var16, 1.0D);
 				return;
 			}
 
@@ -80,9 +80,7 @@
 						var56 = 1;
 					}
 
-					this.field_35625_d.getClass();
 					if(var38 > 128 - 8) {
-						this.field_35625_d.getClass();
 						var38 = 128 - 8;
 					}
 
@@ -96,18 +94,14 @@
 
 					boolean var58 = false;
 
-					int var10000;
 					int var42;
 					int var45;
 					for(var42 = var55; !var58 && var42 < var36; ++var42) {
 						for(int var43 = var57; !var58 && var43 < var40; ++var43) {
 							for(int var44 = var38 + 1; !var58 && var44 >= var56 - 1; --var44) {
-								var10000 = var42 * 16 + var43;
-								this.field_35625_d.getClass();
-								var45 = var10000 * 128 + var44;
+								var45 = var42 << 12 | var43 << 8 | var44;
 								if(var44 >= 0) {
-									this.field_35625_d.getClass();
-									if(var44 < 128) {
+									if(var44 < 256) {
 										if(var5[var45] == Block.waterMoving.blockID || var5[var45] == Block.waterStill.blockID) {
 											var58 = true;
 										}
@@ -127,9 +121,7 @@
 
 							for(var45 = var57; var45 < var40; ++var45) {
 								double var46 = ((double)(var45 + var4 * 16) + 0.5D - var10) / var29;
-								var10000 = var42 * 16 + var45;
-								this.field_35625_d.getClass();
-								int var48 = var10000 * 128 + var38;
+								int var48 = var42 << 12 | var45 << 8 | var38;
 								boolean var49 = false;
 								if(var59 * var59 + var46 * var46 < 1.0D) {
 									for(int var50 = var38 - 1; var50 >= var56; --var50) {
@@ -140,11 +132,13 @@
 												var49 = true;
 											}
 
-											if(var53 == Block.stone.blockID || var53 == Block.dirt.blockID || var53 == Block.grass.blockID) {
+											if(var53 == Block.stone.blockID || var53 == Block.dirt.blockID || var53 == Block.grass.blockID || var53 == Block.hardenedClay.blockID) {
 												if(var50 < 10) {
 													var5[var48] = (byte)Block.lavaMoving.blockID;
+													var5a[var48] = 0;
 												} else {
 													var5[var48] = 0;
+													var5a[var48] = 0;
 													if(var49 && var5[var48 - 1] == Block.dirt.blockID) {
 														var5[var48 - 1] = (byte)Block.grass.blockID;
 													}
@@ -168,7 +162,7 @@
 
 	}
 
-	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
+	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6, byte[] var6a) {
 		int var7 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(40) + 1) + 1);
 		if(this.rand.nextInt(15) != 0) {
 			var7 = 0;
@@ -176,14 +170,11 @@
 
 		for(int var8 = 0; var8 < var7; ++var8) {
 			double var9 = (double)(var2 * 16 + this.rand.nextInt(16));
-			Random var10000 = this.rand;
-			Random var10001 = this.rand;
-			var1.getClass();
-			double var11 = (double)var10000.nextInt(var10001.nextInt(128 - 8) + 8);
+			double var11 = (double)this.rand.nextInt(this.rand.nextInt(128 - 8) + 8);
 			double var13 = (double)(var3 * 16 + this.rand.nextInt(16));
 			int var15 = 1;
 			if(this.rand.nextInt(4) == 0) {
-				this.generateLargeCaveNode(this.rand.nextLong(), var4, var5, var6, var9, var11, var13);
+				this.generateLargeCaveNode(this.rand.nextLong(), var4, var5, var6, var6a, var9, var11, var13);
 				var15 += this.rand.nextInt(4);
 			}
 
@@ -195,7 +186,7 @@
 					var19 *= this.rand.nextFloat() * this.rand.nextFloat() * 3.0F + 1.0F;
 				}
 
-				this.generateCaveNode(this.rand.nextLong(), var4, var5, var6, var9, var11, var13, var19, var17, var18, 0, 0, 1.0D);
+				this.generateCaveNode(this.rand.nextLong(), var4, var5, var6, var6a, var9, var11, var13, var19, var17, var18, 0, 0, 1.0D);
 			}
 		}
 
--- net/minecraft/src/ItemLog.java
+++ net/minecraft/src/ItemLog.java
@@ -17,4 +17,8 @@
 	public int getPlacedBlockMetadata(int var1) {
 		return var1;
 	}
+
+	public String getItemNameIS(ItemStack var1) {
+		return super.getItemNameIS(var1) + "." + var1.getItemDamage();
+	}
 }
--- net/minecraft/src/TextureWaterFlowFX.java
+++ net/minecraft/src/TextureWaterFlowFX.java
@@ -64,7 +64,7 @@
 
 			float var13 = var3 * var3;
 			var5 = (int)(32.0F + var13 * 32.0F);
-			var6 = (int)(50.0F + var13 * 64.0F);
+			var6 = (int)(180.0F + var13 * 64.0F);
 			int var7 = 255;
 			int var8 = (int)(146.0F + var13 * 50.0F);
 			if(this.anaglyphEnabled) {
--- net/minecraft/src/ItemSword.java
+++ net/minecraft/src/ItemSword.java
@@ -1,17 +1,13 @@
 package net.minecraft.src;
 
-public class ItemSword extends Item {
-	private int weaponDamage;
-
+public class ItemSword extends ItemTool {
 	public ItemSword(int var1, EnumToolMaterial var2) {
-		super(var1);
-		this.maxStackSize = 1;
-		this.setMaxDamage(var2.getMaxUses());
-		this.weaponDamage = 4 + var2.getDamageVsEntity() * 2;
+		super(var1, 0, var2, EnumTool.SWORD);
+		this.damageVsEntity = 4 + var2.getDamageVsEntity() * 2;
 	}
 
 	public float getStrVsBlock(ItemStack var1, Block var2) {
-		return var2.blockID == Block.web.blockID ? 15.0F : 1.5F;
+		return var2.blockID == Block.web.blockID ? 15.0F : super.getStrVsBlock(var1, var2);
 	}
 
 	public boolean hitEntity(ItemStack var1, EntityLiving var2, EntityLiving var3) {
@@ -21,14 +17,6 @@
 
 	public boolean onBlockDestroyed(ItemStack var1, int var2, int var3, int var4, int var5, EntityLiving var6) {
 		var1.damageItem(2, var6);
-		return true;
-	}
-
-	public int getDamageVsEntity(Entity var1) {
-		return this.weaponDamage;
-	}
-
-	public boolean isFull3D() {
 		return true;
 	}
 
--- net/minecraft/src/TileEntityChest.java
+++ net/minecraft/src/TileEntityChest.java
@@ -2,11 +2,6 @@
 
 public class TileEntityChest extends TileEntity implements IInventory {
 	private ItemStack[] chestContents = new ItemStack[36];
-	public boolean field_35155_a = false;
-	public TileEntityChest field_35152_b;
-	public TileEntityChest field_35153_c;
-	public TileEntityChest field_35150_d;
-	public TileEntityChest field_35151_e;
 	public float field_35148_f;
 	public float field_35149_g;
 	public int field_35156_h;
@@ -96,70 +91,29 @@
 
 	public void func_35144_b() {
 		super.func_35144_b();
-		this.field_35155_a = false;
-	}
-
-	public void func_35147_g() {
-		if(!this.field_35155_a) {
-			this.field_35155_a = true;
-			this.field_35152_b = null;
-			this.field_35153_c = null;
-			this.field_35150_d = null;
-			this.field_35151_e = null;
-			if(this.worldObj.getBlockId(this.xCoord - 1, this.yCoord, this.zCoord) == Block.chest.blockID) {
-				this.field_35150_d = (TileEntityChest)this.worldObj.getBlockTileEntity(this.xCoord - 1, this.yCoord, this.zCoord);
-			}
-
-			if(this.worldObj.getBlockId(this.xCoord + 1, this.yCoord, this.zCoord) == Block.chest.blockID) {
-				this.field_35153_c = (TileEntityChest)this.worldObj.getBlockTileEntity(this.xCoord + 1, this.yCoord, this.zCoord);
-			}
-
-			if(this.worldObj.getBlockId(this.xCoord, this.yCoord, this.zCoord - 1) == Block.chest.blockID) {
-				this.field_35152_b = (TileEntityChest)this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord - 1);
-			}
-
-			if(this.worldObj.getBlockId(this.xCoord, this.yCoord, this.zCoord + 1) == Block.chest.blockID) {
-				this.field_35151_e = (TileEntityChest)this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord + 1);
-			}
-
-			if(this.field_35152_b != null) {
-				this.field_35152_b.func_35144_b();
-			}
-
-			if(this.field_35151_e != null) {
-				this.field_35151_e.func_35144_b();
-			}
-
-			if(this.field_35153_c != null) {
-				this.field_35153_c.func_35144_b();
-			}
-
-			if(this.field_35150_d != null) {
-				this.field_35150_d.func_35144_b();
-			}
-
-		}
 	}
 
 	public void updateEntity() {
 		super.updateEntity();
-		this.func_35147_g();
 		if(++this.field_35154_q % 20 * 4 == 0) {
 			this.worldObj.playNoteAt(this.xCoord, this.yCoord, this.zCoord, 1, this.field_35156_h);
 		}
 
+		int metadata = this.getBlockMetadata();
+		int direction = metadata & 3;
+
 		this.field_35149_g = this.field_35148_f;
 		float var1 = 0.1F;
 		double var2;
 		double var4;
-		if(this.field_35156_h > 0 && this.field_35148_f == 0.0F && this.field_35152_b == null && this.field_35150_d == null) {
+		if(this.field_35156_h > 0 && this.field_35148_f == 0.0F && (metadata >> 2 & 1) == 0) {
 			var2 = (double)this.xCoord + 0.5D;
 			var4 = (double)this.zCoord + 0.5D;
-			if(this.field_35151_e != null) {
+			if(direction == 0 || direction == 2) {
 				var4 += 0.5D;
 			}
 
-			if(this.field_35153_c != null) {
+			if(direction == 1 || direction == 3) {
 				var2 += 0.5D;
 			}
 
@@ -177,21 +131,19 @@
 				this.field_35148_f = 1.0F;
 			}
 
-			if(this.field_35148_f < 0.0F) {
+			if(this.field_35148_f < 0.0F && (metadata >> 2 & 1) == 0) {
 				this.field_35148_f = 0.0F;
-				if(this.field_35152_b == null && this.field_35150_d == null) {
-					var2 = (double)this.xCoord + 0.5D;
-					var4 = (double)this.zCoord + 0.5D;
-					if(this.field_35151_e != null) {
-						var4 += 0.5D;
-					}
-
-					if(this.field_35153_c != null) {
-						var2 += 0.5D;
-					}
-
-					this.worldObj.playSoundEffect(var2, (double)this.yCoord + 0.5D, var4, "random.door_close", 1.0F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
-				}
+				var2 = (double)this.xCoord + 0.5D;
+				var4 = (double)this.zCoord + 0.5D;
+				if(direction == 0 || direction == 2) {
+					var4 += 0.5D;
+				}
+
+				if(direction == 1 || direction == 3) {
+					var2 += 0.5D;
+				}
+
+				this.worldObj.playSoundEffect(var2, (double)this.yCoord + 0.5D, var4, "random.door_close", 1.0F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
 			}
 		}
 
@@ -216,7 +168,6 @@
 
 	public void invalidate() {
 		this.func_35144_b();
-		this.func_35147_g();
 		super.invalidate();
 	}
 }
--- net/minecraft/src/TileEntityChestRenderer.java
+++ net/minecraft/src/TileEntityChestRenderer.java
@@ -9,86 +9,66 @@
 
 	public void func_35376_a(TileEntityChest var1, double var2, double var4, double var6, float var8) {
 		int var9;
+		int direction = 2;
 		if(var1.worldObj == null) {
-			var9 = 0;
+			var9 = 2 | 8;
 		} else {
 			Block var10 = var1.getBlockType();
 			var9 = var1.getBlockMetadata();
+			direction = var9 & 3;
 			if(var10 != null && var9 == 0) {
-				((BlockChest)var10).func_35306_h(var1.worldObj, var1.xCoord, var1.yCoord, var1.zCoord);
+				((BlockChest)var10).validateChest(var1.worldObj, var1.xCoord, var1.yCoord, var1.zCoord);
 				var9 = var1.getBlockMetadata();
-			}
-
-			var1.func_35147_g();
-		}
-
-		if(var1.field_35152_b == null && var1.field_35150_d == null) {
-			ModelChest var14;
-			if(var1.field_35153_c == null && var1.field_35151_e == null) {
-				var14 = this.field_35377_b;
-				this.bindTextureByName("/item/chest.png");
-			} else {
-				var14 = this.field_35378_c;
-				this.bindTextureByName("/item/largechest.png");
-			}
-
-			GL11.glPushMatrix();
-			GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-			GL11.glTranslatef((float)var2, (float)var4 + 1.0F, (float)var6 + 1.0F);
-			GL11.glScalef(1.0F, -1.0F, -1.0F);
-			GL11.glTranslatef(0.5F, 0.5F, 0.5F);
-			short var11 = 0;
-			if(var9 == 2) {
-				var11 = 180;
-			}
-
-			if(var9 == 3) {
-				var11 = 0;
-			}
-
-			if(var9 == 4) {
-				var11 = 90;
-			}
-
-			if(var9 == 5) {
-				var11 = -90;
-			}
-
-			if(var9 == 2 && var1.field_35153_c != null) {
-				GL11.glTranslatef(1.0F, 0.0F, 0.0F);
-			}
-
-			if(var9 == 5 && var1.field_35151_e != null) {
-				GL11.glTranslatef(0.0F, 0.0F, -1.0F);
-			}
-
-			GL11.glRotatef((float)var11, 0.0F, 1.0F, 0.0F);
-			GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
-			float var12 = var1.field_35149_g + (var1.field_35148_f - var1.field_35149_g) * var8;
-			float var13;
-			if(var1.field_35152_b != null) {
-				var13 = var1.field_35152_b.field_35149_g + (var1.field_35152_b.field_35148_f - var1.field_35152_b.field_35149_g) * var8;
-				if(var13 > var12) {
-					var12 = var13;
-				}
-			}
-
-			if(var1.field_35150_d != null) {
-				var13 = var1.field_35150_d.field_35149_g + (var1.field_35150_d.field_35148_f - var1.field_35150_d.field_35149_g) * var8;
-				if(var13 > var12) {
-					var12 = var13;
-				}
-			}
-
-			var12 = 1.0F - var12;
-			var12 = 1.0F - var12 * var12 * var12;
-			var14.field_35405_a.rotateAngleX = -(var12 * (float)Math.PI / 2.0F);
-			var14.func_35402_a();
-			GL11.glDisable(GL12.GL_RESCALE_NORMAL);
-			GL11.glPopMatrix();
-			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		}
+				direction = var9 & 3;
+			}
+		}
+
+		ModelChest var14;
+		if((var9 >> 3 & 1) == 1) {
+			var14 = this.field_35377_b;
+			this.bindTextureByName("/item/chest.png");
+		} else if (((var9 >> 2 & 1) == 0 && (direction == 0 || direction == 1))
+				|| ((var9 >> 2 & 1) == 1 && (direction == 2 || direction == 3))) {
+			var14 = this.field_35378_c;
+			this.bindTextureByName("/item/largechest.png");
+		} else {
+			return;
+		}
+
+		GL11.glPushMatrix();
+		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		GL11.glTranslatef((float)var2, (float)var4 + 1.0F, (float)var6 + 1.0F);
+		GL11.glScalef(1.0F, -1.0F, -1.0F);
+		GL11.glTranslatef(0.5F, 0.5F, 0.5F);
+		short var11 = 0;
+		if(direction == 0) {
+			var11 = 180;
+		}
+
+		if(direction == 1) {
+			var11 = -90;
+		}
+
+		if(direction == 2) {
+			var11 = 0;
+		}
+
+		if(direction == 3) {
+			var11 = 90;
+		}
+
+		GL11.glRotatef(var11, 0.0F, 1.0F, 0.0F);
+		GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
+		float var12 = var1.field_35149_g + (var1.field_35148_f - var1.field_35149_g) * var8;
+
+		var12 = 1.0F - var12;
+		var12 = 1.0F - var12 * var12 * var12;
+		var14.field_35405_a.rotateAngleX = Math.min(-(var12 * (float)Math.PI / 2.0F), 0.0F);
+		var14.func_35402_a();
+		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
+		GL11.glPopMatrix();
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 	}
 
 	public void renderTileEntityAt(TileEntity var1, double var2, double var4, double var6, float var8) {
--- net/minecraft/src/RenderFallingSand.java
+++ net/minecraft/src/RenderFallingSand.java
@@ -16,7 +16,7 @@
 		Block var10 = Block.blocksList[var1.blockID];
 		World var11 = var1.getWorld();
 		GL11.glDisable(GL11.GL_LIGHTING);
-		this.field_197_d.renderBlockFallingSand(var10, var11, MathHelper.floor_double(var1.posX), MathHelper.floor_double(var1.posY), MathHelper.floor_double(var1.posZ));
+		this.field_197_d.renderBlockFallingSand(var10, var1.blockMetadata, var11, MathHelper.floor_double(var1.posX), MathHelper.floor_double(var1.posY), MathHelper.floor_double(var1.posZ));
 		GL11.glEnable(GL11.GL_LIGHTING);
 		GL11.glPopMatrix();
 	}
--- net/minecraft/src/ComponentMineshaftCross.java
+++ net/minecraft/src/ComponentMineshaftCross.java
@@ -6,6 +6,7 @@
 public class ComponentMineshaftCross extends StructureComponent {
 	private final int field_35073_a;
 	private final boolean field_35072_b;
+	private int woodType;
 
 	public ComponentMineshaftCross(int var1, Random var2, StructureBoundingBox var3, int var4) {
 		super(var1);
@@ -93,6 +94,14 @@
 		if(this.func_35013_a(var1, var3)) {
 			return false;
 		} else {
+			if (!this.isNotFloatingOrHasBlockAbove(var1, var3) ||
+					var1.getWorldChunkManager().getBiomeGenAt(var3.field_35753_a, var3.field_35752_c).field_35494_y == BiomeGenBase.volcanicIsland.field_35494_y) {
+				return false;
+			}
+
+			if (var1.getWorldChunkManager().getBiomeGenAt(var3.field_35753_a, var3.field_35752_c) instanceof BiomeGenBadlands)
+				this.woodType = 3;
+
 			if(this.field_35072_b) {
 				this.func_35011_a(var1, var3, this.field_35024_g.field_35753_a + 1, this.field_35024_g.field_35751_b, this.field_35024_g.field_35752_c, this.field_35024_g.field_35749_d - 1, this.field_35024_g.field_35751_b + 3 - 1, this.field_35024_g.field_35748_f, 0, 0, false);
 				this.func_35011_a(var1, var3, this.field_35024_g.field_35753_a, this.field_35024_g.field_35751_b, this.field_35024_g.field_35752_c + 1, this.field_35024_g.field_35749_d, this.field_35024_g.field_35751_b + 3 - 1, this.field_35024_g.field_35748_f - 1, 0, 0, false);
@@ -104,10 +113,10 @@
 				this.func_35011_a(var1, var3, this.field_35024_g.field_35753_a, this.field_35024_g.field_35751_b, this.field_35024_g.field_35752_c + 1, this.field_35024_g.field_35749_d, this.field_35024_g.field_35750_e, this.field_35024_g.field_35748_f - 1, 0, 0, false);
 			}
 
-			this.func_35011_a(var1, var3, this.field_35024_g.field_35753_a + 1, this.field_35024_g.field_35751_b, this.field_35024_g.field_35752_c + 1, this.field_35024_g.field_35753_a + 1, this.field_35024_g.field_35750_e, this.field_35024_g.field_35752_c + 1, Block.planks.blockID, 0, false);
-			this.func_35011_a(var1, var3, this.field_35024_g.field_35753_a + 1, this.field_35024_g.field_35751_b, this.field_35024_g.field_35748_f - 1, this.field_35024_g.field_35753_a + 1, this.field_35024_g.field_35750_e, this.field_35024_g.field_35748_f - 1, Block.planks.blockID, 0, false);
-			this.func_35011_a(var1, var3, this.field_35024_g.field_35749_d - 1, this.field_35024_g.field_35751_b, this.field_35024_g.field_35752_c + 1, this.field_35024_g.field_35749_d - 1, this.field_35024_g.field_35750_e, this.field_35024_g.field_35752_c + 1, Block.planks.blockID, 0, false);
-			this.func_35011_a(var1, var3, this.field_35024_g.field_35749_d - 1, this.field_35024_g.field_35751_b, this.field_35024_g.field_35748_f - 1, this.field_35024_g.field_35749_d - 1, this.field_35024_g.field_35750_e, this.field_35024_g.field_35748_f - 1, Block.planks.blockID, 0, false);
+			this.func_35011_ametadata(var1, var3, this.field_35024_g.field_35753_a + 1, this.field_35024_g.field_35751_b, this.field_35024_g.field_35752_c + 1, this.field_35024_g.field_35753_a + 1, this.field_35024_g.field_35750_e, this.field_35024_g.field_35752_c + 1, Block.planks.blockID, 0, false, this.woodType);
+			this.func_35011_ametadata(var1, var3, this.field_35024_g.field_35753_a + 1, this.field_35024_g.field_35751_b, this.field_35024_g.field_35748_f - 1, this.field_35024_g.field_35753_a + 1, this.field_35024_g.field_35750_e, this.field_35024_g.field_35748_f - 1, Block.planks.blockID, 0, false, this.woodType);
+			this.func_35011_ametadata(var1, var3, this.field_35024_g.field_35749_d - 1, this.field_35024_g.field_35751_b, this.field_35024_g.field_35752_c + 1, this.field_35024_g.field_35749_d - 1, this.field_35024_g.field_35750_e, this.field_35024_g.field_35752_c + 1, Block.planks.blockID, 0, false, this.woodType);
+			this.func_35011_ametadata(var1, var3, this.field_35024_g.field_35749_d - 1, this.field_35024_g.field_35751_b, this.field_35024_g.field_35748_f - 1, this.field_35024_g.field_35749_d - 1, this.field_35024_g.field_35750_e, this.field_35024_g.field_35748_f - 1, Block.planks.blockID, 0, false, this.woodType);
 			return true;
 		}
 	}
--- net/minecraft/src/EntityWolf.java
+++ net/minecraft/src/EntityWolf.java
@@ -79,6 +79,10 @@
 		return 0.4F;
 	}
 
+	protected float getSoundPitch() {
+		return 1.5F;
+	}
+
 	protected int getDropItemId() {
 		return -1;
 	}
--- /dev/null
+++ net/minecraft/src/BlockStepWood.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+public class BlockStepWood extends BlockStep {
+	public static final String[] field_22037_b = new String[]{"mahogany", "palm", "acacia", "wenge"};
+	public BlockStepWood(int var1, boolean var2, Material var3) {
+		super(var1, var2, var3);
+	}
+
+	public BlockStep getSingleForm() {
+		return (BlockStep)Block.stairSingleWood;
+	}
+
+	public BlockStep getDoubleForm() {
+		return (BlockStep)Block.stairDoubleWood;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return Block.planks.getBlockTextureFromSideAndMetadata(var1, var2);
+	}
+
+	public String[] getTypeNames() {
+		return field_22037_b;
+	}
+}
--- net/minecraft/src/EntityLiving.java
+++ net/minecraft/src/EntityLiving.java
@@ -107,7 +107,7 @@
 	public void playLivingSound() {
 		String var1 = this.getLivingSound();
 		if(var1 != null) {
-			this.worldObj.playSoundAtEntity(this, var1, this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+			this.worldObj.playSoundAtEntity(this, var1, this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + this.getSoundPitch());
 		}
 
 	}
@@ -411,12 +411,12 @@
 
 				if(this.health <= 0) {
 					if(var3) {
-						this.worldObj.playSoundAtEntity(this, this.getDeathSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+						this.worldObj.playSoundAtEntity(this, this.getDeathSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + this.getSoundPitch());
 					}
 
 					this.onDeath(var1);
 				} else if(var3) {
-					this.worldObj.playSoundAtEntity(this, this.getHurtSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+					this.worldObj.playSoundAtEntity(this, this.getHurtSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + this.getSoundPitch());
 				}
 
 				return true;
@@ -437,6 +437,10 @@
 		return 1.0F;
 	}
 
+	protected float getSoundPitch() {
+		return 1.0F;
+	}
+
 	protected String getLivingSound() {
 		return null;
 	}
@@ -519,9 +523,10 @@
 			var3 = this.posY;
 			this.moveFlying(var1, var2, 0.02F);
 			this.moveEntity(this.motionX, this.motionY, this.motionZ);
-			this.motionX *= (double)0.8F;
-			this.motionY *= (double)0.8F;
-			this.motionZ *= (double)0.8F;
+			double resistance = this.fastSwim() ? 0.9D : 0.8D;
+			this.motionX *= resistance;
+			this.motionY *= resistance;
+			this.motionZ *= resistance;
 			this.motionY -= 0.02D;
 			if(this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + (double)0.6F - this.posY + var3, this.motionZ)) {
 				this.motionY = (double)0.3F;
@@ -588,7 +593,7 @@
 			}
 
 			this.moveEntity(this.motionX, this.motionY, this.motionZ);
-			if(this.isCollidedHorizontally && this.isOnLadder()) {
+			if((this.isCollidedHorizontally || this.isJumping) && this.isOnLadder()) {
 				this.motionY = 0.2D;
 			}
 
@@ -614,7 +619,7 @@
 		int var1 = MathHelper.floor_double(this.posX);
 		int var2 = MathHelper.floor_double(this.boundingBox.minY);
 		int var3 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.getBlockId(var1, var2, var3) == Block.ladder.blockID;
+		return this.worldObj.getBlockId(var1, var2, var3) == Block.ladder.blockID || this.worldObj.getBlockId(var1, var2, var3) == Block.field_35278_bv.blockID;
 	}
 
 	public void writeEntityToNBT(NBTTagCompound var1) {
@@ -962,10 +967,10 @@
 			this.heartsLife = this.heartsHalvesLife;
 			this.hurtTime = this.maxHurtTime = 10;
 			this.attackedAtYaw = 0.0F;
-			this.worldObj.playSoundAtEntity(this, this.getHurtSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+			this.worldObj.playSoundAtEntity(this, this.getHurtSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + this.getSoundPitch());
 			this.attackEntityFrom(DamageSource.field_35547_j, 0);
 		} else if(var1 == 3) {
-			this.worldObj.playSoundAtEntity(this, this.getDeathSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+			this.worldObj.playSoundAtEntity(this, this.getDeathSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + this.getSoundPitch());
 			this.health = 0;
 			this.onDeath(DamageSource.field_35547_j);
 		} else {
@@ -1039,5 +1044,9 @@
 		}
 
 		return var1;
+	}
+
+	public boolean fastSwim() {
+		return false;
 	}
 }
--- net/minecraft/src/MapGenRavine.java
+++ net/minecraft/src/MapGenRavine.java
@@ -5,7 +5,7 @@
 public class MapGenRavine extends MapGenBase {
 	private float[] field_35627_a = new float[1024];
 
-	protected void func_35626_a(long var1, int var3, int var4, byte[] var5, double var6, double var8, double var10, float var12, float var13, float var14, int var15, int var16, double var17) {
+	protected void func_35626_a(long var1, int var3, int var4, byte[] var5, byte[] var5a, double var6, double var8, double var10, float var12, float var13, float var14, int var15, int var16, double var17) {
 		Random var19 = new Random(var1);
 		double var20 = (double)(var3 * 16 + 8);
 		double var22 = (double)(var4 * 16 + 8);
@@ -25,9 +25,16 @@
 		float var27 = 1.0F;
 		int var28 = 0;
 
+		for (int i280 = 0; i280 < 128; i280++) {
+			if(i280 == 0 || var19.nextInt(3) == 0) {
+				var27 = 1.0F + var19.nextFloat() * var19.nextFloat() * 1.0F;
+			}
+
+			this.field_35627_a[i280] = var27 * var27;
+		}
+
 		while(true) {
-			this.field_35625_d.getClass();
-			if(var28 >= 128) {
+			if(var28 >= 256) {
 				for(; var15 < var16; ++var15) {
 					double var54 = 1.5D + (double)(MathHelper.sin((float)var15 * (float)Math.PI / (float)var16) * var12 * 1.0F);
 					double var30 = var54 * var17;
@@ -73,10 +80,8 @@
 								var56 = 1;
 							}
 
-							this.field_35625_d.getClass();
-							if(var37 > 128 - 8) {
-								this.field_35625_d.getClass();
-								var37 = 128 - 8;
+							if(var37 > 256 - 8) {
+								var37 = 256 - 8;
 							}
 
 							if(var57 < 0) {
@@ -89,18 +94,14 @@
 
 							boolean var58 = false;
 
-							int var10000;
 							int var41;
 							int var44;
 							for(var41 = var55; !var58 && var41 < var35; ++var41) {
 								for(int var42 = var57; !var58 && var42 < var39; ++var42) {
 									for(int var43 = var37 + 1; !var58 && var43 >= var56 - 1; --var43) {
-										var10000 = var41 * 16 + var42;
-										this.field_35625_d.getClass();
-										var44 = var10000 * 128 + var43;
+										var44 = var41 << 12 | var42 << 8 | var43;
 										if(var43 >= 0) {
-											this.field_35625_d.getClass();
-											if(var43 < 128) {
+											if(var43 < 256) {
 												if(var5[var44] == Block.waterMoving.blockID || var5[var44] == Block.waterStill.blockID) {
 													var58 = true;
 												}
@@ -120,9 +121,7 @@
 
 									for(var44 = var57; var44 < var39; ++var44) {
 										double var45 = ((double)(var44 + var4 * 16) + 0.5D - var10) / var54;
-										var10000 = var41 * 16 + var44;
-										this.field_35625_d.getClass();
-										int var47 = var10000 * 128 + var37;
+										int var47 = var41 << 12 | var44 << 8 | var37;
 										boolean var48 = false;
 										if(var59 * var59 + var45 * var45 < 1.0D) {
 											for(int var49 = var37 - 1; var49 >= var56; --var49) {
@@ -133,11 +132,13 @@
 														var48 = true;
 													}
 
-													if(var52 == Block.stone.blockID || var52 == Block.dirt.blockID || var52 == Block.grass.blockID) {
+													if(var52 == Block.stone.blockID || var52 == Block.dirt.blockID || var52 == Block.grass.blockID || var52 == Block.hardenedClay.blockID) {
 														if(var49 < 10) {
 															var5[var47] = (byte)Block.lavaMoving.blockID;
+															var5a[var47] = 0;
 														} else {
 															var5[var47] = 0;
+															var5a[var47] = 0;
 															if(var48 && var5[var47 - 1] == Block.dirt.blockID) {
 																var5[var47 - 1] = (byte)Block.grass.blockID;
 															}
@@ -161,17 +162,11 @@
 
 				return;
 			}
-
-			if(var28 == 0 || var19.nextInt(3) == 0) {
-				var27 = 1.0F + var19.nextFloat() * var19.nextFloat() * 1.0F;
-			}
-
-			this.field_35627_a[var28] = var27 * var27;
 			++var28;
 		}
 	}
 
-	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
+	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6, byte[] var6a) {
 		if(this.rand.nextInt(50) == 0) {
 			double var7 = (double)(var2 * 16 + this.rand.nextInt(16));
 			double var9 = (double)(this.rand.nextInt(this.rand.nextInt(40) + 8) + 20);
@@ -182,7 +177,7 @@
 				float var15 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
 				float var16 = (this.rand.nextFloat() - 0.5F) * 2.0F / 8.0F;
 				float var17 = (this.rand.nextFloat() * 2.0F + this.rand.nextFloat()) * 2.0F;
-				this.func_35626_a(this.rand.nextLong(), var4, var5, var6, var7, var9, var11, var17, var15, var16, 0, 0, 3.0D);
+				this.func_35626_a(this.rand.nextLong(), var4, var5, var6, var6a, var7, var9, var11, var17, var15, var16, 0, 0, 3.0D);
 			}
 
 		}
--- net/minecraft/src/BlockDoor.java
+++ net/minecraft/src/BlockDoor.java
@@ -183,7 +183,7 @@
 
 	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
 		var1.getClass();
-		return var3 >= 128 - 1 ? false : var1.isBlockNormalCube(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
+		return var3 >= 256 - 1 ? false : var1.isBlockNormalCube(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
 	}
 
 	public static boolean isOpen(int var0) {
--- net/minecraft/src/BlockVine.java
+++ net/minecraft/src/BlockVine.java
@@ -190,8 +190,7 @@
 			int var12;
 			int var13;
 			if(var10 == 1) {
-				var1.getClass();
-				if(var3 < 128 - 1 && var1.isAirBlock(var2, var3 + 1, var4)) {
+				if(var3 < 256 - 1 && var1.isAirBlock(var2, var3 + 1, var4)) {
 					if(var8) {
 						return;
 					}
--- net/minecraft/src/BlockStone.java
+++ net/minecraft/src/BlockStone.java
@@ -10,4 +10,12 @@
 	public int idDropped(int var1, Random var2) {
 		return Block.cobblestone.blockID;
 	}
+
+	protected int damageDropped(int var1) {
+		return var1;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.blockIndexInTexture + var2 * 256;
+	}
 }
--- net/minecraft/src/RenderItem.java
+++ net/minecraft/src/RenderItem.java
@@ -65,6 +65,7 @@
 		} else {
 			GL11.glScalef(0.5F, 0.5F, 0.5F);
 			int var14 = var10.getIconIndex();
+			int var14a = var14 & 255;
 			if(var10.itemID < 256) {
 				this.loadTexture("/terrain.png");
 			} else {
@@ -72,10 +73,19 @@
 			}
 
 			Tessellator var15 = Tessellator.instance;
-			float var16 = (float)(var14 % 16 * 16 + 0) / 256.0F;
-			var17 = (float)(var14 % 16 * 16 + 16) / 256.0F;
-			var18 = (float)(var14 / 16 * 16 + 0) / 256.0F;
-			var19 = (float)(var14 / 16 * 16 + 16) / 256.0F;
+			float var16 = (float)(var14a % 16 * 16 + 0) / (var10.itemID < 256 ? 512.0F : 256.0F);
+			var17 = (float)(var14a % 16 * 16 + 16) / (var10.itemID < 256 ? 512.0F : 256.0F);
+			var18 = (float)(var14a / 16 * 16 + 0) / (var10.itemID < 256 ? 512.0F : 256.0F);
+			var19 = (float)(var14a / 16 * 16 + 16) / (var10.itemID < 256 ? 512.0F : 256.0F);
+			int var14b = (var14 >> 8) & 3;
+			if (var14b % 2 == 1) {
+				var16 += 0.5F;
+				var17 += 0.5F;
+			}
+			if (var14b / 2 == 1) {
+				var18 += 0.5F;
+				var19 += 0.5F;
+			}
 			float var20 = 1.0F;
 			float var21 = 0.5F;
 			float var22 = 0.25F;
@@ -158,7 +168,14 @@
 				GL11.glColor4f(var9, var10, var11, 1.0F);
 			}
 
-			this.renderTexturedQuad(var6, var7, var5 % 16 * 16, var5 / 16 * 16, 16, 16);
+			int var5a = var5 & 255;
+			int var5b = var5a % 16 * 16;
+			int var5c = var5a / 16 * 16;
+			int var5d = (var5 >> 8) & 3;
+			if (var5d % 2 == 1) var5b += 256;
+			if (var5d / 2 == 1) var5c += 256;
+
+			this.renderTexturedQuad(var6, var7, var5b, var5c, 16, 16, var3 < 256 ? 512 : 256);
 			GL11.glEnable(GL11.GL_LIGHTING);
 		}
 
@@ -213,16 +230,15 @@
 		var1.draw();
 	}
 
-	public void renderTexturedQuad(int var1, int var2, int var3, int var4, int var5, int var6) {
-		float var7 = 0.0F;
-		float var8 = 0.00390625F;
-		float var9 = 0.00390625F;
+	public void renderTexturedQuad(int var1, int var2, int var3, int var4, int var5, int var6, int var7) {
+		float var8 = 1.0F / var7;
+		float var9 = 1.0F / var7;
 		Tessellator var10 = Tessellator.instance;
 		var10.startDrawingQuads();
-		var10.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), (double)var7, (double)((float)(var3 + 0) * var8), (double)((float)(var4 + var6) * var9));
-		var10.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), (double)var7, (double)((float)(var3 + var5) * var8), (double)((float)(var4 + var6) * var9));
-		var10.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), (double)var7, (double)((float)(var3 + var5) * var8), (double)((float)(var4 + 0) * var9));
-		var10.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), (double)var7, (double)((float)(var3 + 0) * var8), (double)((float)(var4 + 0) * var9));
+		var10.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), (double)0.0D, (double)((float)(var3 + 0) * var8), (double)((float)(var4 + var6) * var9));
+		var10.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), (double)0.0D, (double)((float)(var3 + var5) * var8), (double)((float)(var4 + var6) * var9));
+		var10.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), (double)0.0D, (double)((float)(var3 + var5) * var8), (double)((float)(var4 + 0) * var9));
+		var10.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), (double)0.0D, (double)((float)(var3 + 0) * var8), (double)((float)(var4 + 0) * var9));
 		var10.draw();
 	}
 
--- net/minecraft/src/ModelBed.java
+++ net/minecraft/src/ModelBed.java
@@ -3,6 +3,7 @@
 public class ModelBed {
 	public static final int[] field_35871_a = new int[]{0, -1, 0, 1};
 	public static final int[] field_35870_b = new int[]{1, 0, -1, 0};
+	public static final String[] directions = new String[]{"SOUTH", "WEST", "NORTH", "EAST"};
 	public static final int[] headInvisibleFace = new int[]{3, 4, 2, 5};
 	public static final int[] field_35869_d = new int[]{-1, -1, 2, 0, 1, 3};
 	public static final int[] footInvisibleFaceRemap = new int[]{2, 3, 0, 1};
--- net/minecraft/src/ComponentMineshaftCorridor.java
+++ net/minecraft/src/ComponentMineshaftCorridor.java
@@ -8,6 +8,7 @@
 	private final boolean field_35068_b;
 	private boolean field_35069_c;
 	private int field_35067_d;
+	private int woodType;
 
 	public ComponentMineshaftCorridor(int var1, Random var2, StructureBoundingBox var3, int var4) {
 		super(var1);
@@ -126,9 +127,17 @@
 		if(this.func_35013_a(var1, var3)) {
 			return false;
 		} else {
+			if (!this.isNotFloatingOrHasBlockAbove(var1, var3) ||
+					var1.getWorldChunkManager().getBiomeGenAt(var3.field_35753_a, var3.field_35752_c).field_35494_y == BiomeGenBase.volcanicIsland.field_35494_y) {
+				return false;
+			}
+
+			if (var1.getWorldChunkManager().getBiomeGenAt(var3.field_35753_a, var3.field_35752_c) instanceof BiomeGenBadlands)
+				this.woodType = 3;
 			int var8 = this.field_35067_d * 5 - 1;
 			this.func_35011_a(var1, var3, 0, 0, 0, 2, 1, var8, 0, 0, false);
 			this.func_35010_a(var1, var3, var2, 0.8F, 0, 2, 0, 2, 2, var8, 0, 0, false);
+			this.func_35011_air(var1, var3, 0, -1, 0, 2, -1, var8, Block.planks.blockID, Block.planks.blockID, this.woodType);
 			if(this.field_35068_b) {
 				this.func_35010_a(var1, var3, var2, 0.6F, 0, 0, 0, 2, 1, var8, Block.web.blockID, 0, false);
 			}
@@ -137,13 +146,19 @@
 			int var10;
 			for(var9 = 0; var9 < this.field_35067_d; ++var9) {
 				var10 = 2 + var9 * 5;
-				this.func_35011_a(var1, var3, 0, 0, var10, 0, 1, var10, Block.fence.blockID, 0, false);
-				this.func_35011_a(var1, var3, 2, 0, var10, 2, 1, var10, Block.fence.blockID, 0, false);
+				this.func_35011_ametadata(var1, var3, 0, 0, var10, 0, 1, var10, Block.fence.blockID, 0, false, this.woodType);
+				this.func_35011_ametadata(var1, var3, 2, 0, var10, 2, 1, var10, Block.fence.blockID, 0, false, this.woodType);
+				if (this.beamNoBurn(var1, 0, -2, var10, var3)) {
+					this.func_35005_b(var1, Block.wood.blockID, this.woodType, 0, -2, var10, var3);
+				}
+				if (this.beamNoBurn(var1, 2, -2, var10, var3)) {
+					this.func_35005_b(var1, Block.wood.blockID, this.woodType, 2, -2, var10, var3);
+				}
 				if(var2.nextInt(4) != 0) {
-					this.func_35011_a(var1, var3, 0, 2, var10, 2, 2, var10, Block.planks.blockID, 0, false);
+					this.func_35011_ametadata(var1, var3, 0, 2, var10, 2, 2, var10, Block.planks.blockID, 0, false, this.woodType);
 				} else {
-					this.func_35011_a(var1, var3, 0, 2, var10, 0, 2, var10, Block.planks.blockID, 0, false);
-					this.func_35011_a(var1, var3, 2, 2, var10, 2, 2, var10, Block.planks.blockID, 0, false);
+					this.func_35011_ametadata(var1, var3, 0, 2, var10, 0, 2, var10, Block.planks.blockID, 0, false, this.woodType);
+					this.func_35011_ametadata(var1, var3, 2, 2, var10, 2, 2, var10, Block.planks.blockID, 0, false, this.woodType);
 				}
 
 				this.func_35014_a(var1, var3, var2, 0.1F, 0, 2, var10 - 1, Block.web.blockID, 0);
--- net/minecraft/src/WorldGenTaiga1.java
+++ net/minecraft/src/WorldGenTaiga1.java
@@ -10,9 +10,7 @@
 		int var9 = 1 + var2.nextInt(var8 + 1);
 		boolean var10 = true;
 		if(var4 >= 1) {
-			int var10000 = var4 + var6 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
+			if(var4 + var6 + 1 <= 256) {
 				int var11;
 				int var13;
 				int var14;
@@ -29,8 +27,7 @@
 					for(var13 = var3 - var18; var13 <= var3 + var18 && var10; ++var13) {
 						for(var14 = var5 - var18; var14 <= var5 + var18 && var10; ++var14) {
 							if(var11 >= 0) {
-								var1.getClass();
-								if(var11 < 128) {
+								if(var11 < 256) {
 									var15 = var1.getBlockId(var13, var11, var14);
 									if(var15 != 0 && var15 != Block.leaves.blockID) {
 										var10 = false;
@@ -50,8 +47,7 @@
 
 				var11 = var1.getBlockId(var3, var4 - 1, var5);
 				if(var11 == Block.grass.blockID || var11 == Block.dirt.blockID) {
-					var1.getClass();
-					if(var4 < 128 - var6 - 1) {
+					if(var4 < 256 - var6 - 1) {
 						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
 						var18 = 0;
 
@@ -62,7 +58,7 @@
 								for(int var16 = var5 - var18; var16 <= var5 + var18; ++var16) {
 									int var17 = var16 - var5;
 									if((Math.abs(var15) != var18 || Math.abs(var17) != var18 || var18 <= 0) && !Block.opaqueCubeLookup[var1.getBlockId(var14, var13, var16)]) {
-										var1.setBlockAndMetadata(var14, var13, var16, Block.leaves.blockID, 1);
+										var1.setBlockAndMetadata(var14, var13, var16, Block.leaves.blockID, 3);
 									}
 								}
 							}
@@ -77,7 +73,7 @@
 						for(var13 = 0; var13 < var6 - 1; ++var13) {
 							var14 = var1.getBlockId(var3, var4 + var13, var5);
 							if(var14 == 0 || var14 == Block.leaves.blockID) {
-								var1.setBlockAndMetadata(var3, var4 + var13, var5, Block.wood.blockID, 1);
+								var1.setBlockAndMetadata(var3, var4 + var13, var5, Block.wood.blockID, 3);
 							}
 						}
 
--- net/minecraft/src/MapGenBase.java
+++ net/minecraft/src/MapGenBase.java
@@ -7,7 +7,7 @@
 	protected Random rand = new Random();
 	protected World field_35625_d;
 
-	public void generate(IChunkProvider var1, World var2, int var3, int var4, byte[] var5) {
+	public void generate(IChunkProvider var1, World var2, int var3, int var4, byte[] var5, byte[] var5a) {
 		int var6 = this.field_1306_a;
 		this.field_35625_d = var2;
 		this.rand.setSeed(var2.getRandomSeed());
@@ -19,12 +19,12 @@
 				long var13 = (long)var11 * var7;
 				long var15 = (long)var12 * var9;
 				this.rand.setSeed(var13 ^ var15 ^ var2.getRandomSeed());
-				this.recursiveGenerate(var2, var11, var12, var3, var4, var5);
+				this.recursiveGenerate(var2, var11, var12, var3, var4, var5, var5a);
 			}
 		}
 
 	}
 
-	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
+	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6, byte[] var6a) {
 	}
 }
--- net/minecraft/src/BlockTallGrass.java
+++ net/minecraft/src/BlockTallGrass.java
@@ -28,11 +28,6 @@
 		if(var5 == 0) {
 			return 16777215;
 		} else {
-			long var6 = (long)(var2 * 3129871 + var4 * 6129781 + var3);
-			var6 = var6 * var6 * 42317861L + var6 * 11L;
-			var2 = (int)((long)var2 + ((var6 >> 14 & 31L) - 16L));
-			var3 = (int)((long)var3 + ((var6 >> 19 & 31L) - 16L));
-			var4 = (int)((long)var4 + ((var6 >> 24 & 31L) - 16L));
 			double var8 = (double)var1.getWorldChunkManager().func_35554_b(var2, var4);
 			double var10 = (double)var1.getWorldChunkManager().func_35558_c(var2, var4);
 			return ColorizerGrass.getGrassColor(var8, var10);
--- net/minecraft/src/NBTTagCompound.java
+++ net/minecraft/src/NBTTagCompound.java
@@ -79,6 +79,10 @@
 		this.tagMap.put(var1, (new NBTTagByteArray(var2)).setKey(var1));
 	}
 
+	public void setIntArray(String par1Str, int par2ArrayOfInteger[]) {
+		tagMap.put(par1Str, new NBTTagIntArray(par2ArrayOfInteger).setKey(par1Str));
+	}
+
 	public void setCompoundTag(String var1, NBTTagCompound var2) {
 		this.tagMap.put(var1, var2.setKey(var1));
 	}
@@ -121,6 +125,10 @@
 
 	public byte[] getByteArray(String var1) {
 		return !this.tagMap.containsKey(var1) ? new byte[0] : ((NBTTagByteArray)this.tagMap.get(var1)).byteArray;
+	}
+
+	public int[] getIntArray(String var1) {
+		return !this.tagMap.containsKey(var1) ? new int[0] : ((NBTTagIntArray)this.tagMap.get(var1)).intArray;
 	}
 
 	public NBTTagCompound getCompoundTag(String var1) {
--- net/minecraft/src/BlockLog.java
+++ net/minecraft/src/BlockLog.java
@@ -20,29 +20,8 @@
 		super.harvestBlock(var1, var2, var3, var4, var5, var6);
 	}
 
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		byte var5 = 4;
-		int var6 = var5 + 1;
-		if(var1.checkChunksExist(var2 - var6, var3 - var6, var4 - var6, var2 + var6, var3 + var6, var4 + var6)) {
-			for(int var7 = -var5; var7 <= var5; ++var7) {
-				for(int var8 = -var5; var8 <= var5; ++var8) {
-					for(int var9 = -var5; var9 <= var5; ++var9) {
-						int var10 = var1.getBlockId(var2 + var7, var3 + var8, var4 + var9);
-						if(var10 == Block.leaves.blockID) {
-							int var11 = var1.getBlockMetadata(var2 + var7, var3 + var8, var4 + var9);
-							if((var11 & 8) == 0) {
-								var1.setBlockMetadata(var2 + var7, var3 + var8, var4 + var9, var11 | 8);
-							}
-						}
-					}
-				}
-			}
-		}
-
-	}
-
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var1 == 1 ? 21 : (var1 == 0 ? 21 : (var2 == 1 ? 116 : (var2 == 2 ? 117 : 20)));
+		return (var1 < 2 ? 21 : 20) + var2 * 256;
 	}
 
 	protected int damageDropped(int var1) {
--- net/minecraft/src/EntityItem.java
+++ net/minecraft/src/EntityItem.java
@@ -81,7 +81,15 @@
 	}
 
 	protected void dealFireDamage(int var1) {
-		this.attackEntityFrom(DamageSource.field_35542_a, var1);
+		if (this.item != null && this.item.itemID == Item.impureWaterBottle.shiftedIndex) {
+			this.item.itemID = Item.waterBottle.shiftedIndex;
+			this.isImmuneToFire = true;
+		} else if (this.item != null && this.item.itemID == Item.impureWaterBowl.shiftedIndex) {
+			this.item.itemID = Item.waterBowl.shiftedIndex;
+			this.isImmuneToFire = true;
+		} else if (!this.isImmuneToFire) {
+			this.attackEntityFrom(DamageSource.field_35542_a, var1);
+		}
 	}
 
 	public boolean attackEntityFrom(DamageSource var1, int var2) {
--- /dev/null
+++ net/minecraft/src/NBTTagIntArray.java
@@ -1,0 +1,59 @@
+package net.minecraft.src;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.util.Arrays;
+
+public class NBTTagIntArray extends NBTBase {
+    public int[] intArray;
+
+    public NBTTagIntArray() {
+    }
+
+    public NBTTagIntArray(int[] par2ArrayOfInteger) {
+        intArray = par2ArrayOfInteger;
+    }
+
+    void writeTagContents(DataOutput var1) throws IOException {
+		var1.writeInt(this.intArray.length);
+		ByteBuffer buffer = ByteBuffer.allocate(this.intArray.length * 4);
+		buffer.order(ByteOrder.BIG_ENDIAN);
+		buffer.asIntBuffer().put(this.intArray);
+		byte[] bytes = buffer.array();
+		var1.write(bytes);
+	}
+
+    void readTagContents(DataInput var1) throws IOException {
+		int var2 = var1.readInt();
+		this.intArray = new int[var2];
+		byte[] byteArray = new byte[var2 * 4];
+		var1.readFully(byteArray);
+		ByteBuffer buffer = ByteBuffer.wrap(byteArray);
+		buffer.order(ByteOrder.BIG_ENDIAN);
+		buffer.asIntBuffer().get(this.intArray);
+	}
+
+    public byte getType() {
+        return 11;
+    }
+
+    public String toString() {
+        return "[" + intArray.length + " ints]";
+    }
+
+    public boolean equals(Object par1Obj) {
+        if (super.equals(par1Obj)) {
+            NBTTagIntArray nbttagintarray = (NBTTagIntArray) par1Obj;
+            return intArray == null && nbttagintarray.intArray == null || intArray != null && intArray.equals(nbttagintarray.intArray);
+        } else {
+            return false;
+        }
+    }
+
+    public int hashCode() {
+        return super.hashCode() ^ Arrays.hashCode(intArray);
+    }
+}
--- net/minecraft/src/ItemSpade.java
+++ net/minecraft/src/ItemSpade.java
@@ -1,10 +1,8 @@
 package net.minecraft.src;
 
 public class ItemSpade extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.grass, Block.dirt, Block.sand, Block.gravel, Block.snow, Block.blockSnow, Block.blockClay, Block.tilledField};
-
 	public ItemSpade(int var1, EnumToolMaterial var2) {
-		super(var1, 1, var2, blocksEffectiveAgainst);
+		super(var1, 1, var2, EnumTool.SHOVEL);
 	}
 
 	public boolean canHarvestBlock(Block var1) {
--- net/minecraft/src/ItemFood.java
+++ net/minecraft/src/ItemFood.java
@@ -6,10 +6,10 @@
 	private final float field_35428_c;
 	private final boolean isWolfsFavoriteMeat;
 	private boolean field_35431_bw;
-	private int field_35433_bx;
-	private int field_35432_by;
-	private int field_35427_bz;
-	private float field_35429_bA;
+	protected int field_35433_bx;
+	protected int field_35432_by;
+	protected int field_35427_bz;
+	protected float field_35429_bA;
 
 	public ItemFood(int var1, int var2, float var3, boolean var4) {
 		super(var1);
@@ -25,7 +25,7 @@
 
 	public ItemStack func_35413_b(ItemStack var1, World var2, EntityPlayer var3) {
 		--var1.stackSize;
-		var3.func_35191_at().func_35761_a(this);
+		var3.heal(this.healAmount);
 		if(!var2.multiplayerWorld && this.field_35433_bx > 0 && var2.rand.nextFloat() < this.field_35429_bA) {
 			var3.func_35165_a(new PotionEffect(this.field_35433_bx, this.field_35432_by * 20, this.field_35427_bz));
 		}
@@ -42,7 +42,7 @@
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		if(var3.func_35197_b(this.field_35431_bw)) {
+		if(this.field_35431_bw || var3.health < 20) {
 			var3.func_35199_b(var1, this.func_35411_c(var1));
 		}
 
--- net/minecraft/src/BiomeGenHills.java
+++ net/minecraft/src/BiomeGenHills.java
@@ -1,7 +1,28 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class BiomeGenHills extends BiomeGenBase {
 	protected BiomeGenHills(int var1) {
 		super(var1);
+		this.field_35488_u.field_35911_r = 1;
+		this.field_35488_u.field_35909_t = 2;
+		this.stoneBlockMetadata = 1;
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+		super.buildBiomeSurface(world, random, blocks, metadata, x, z, heightValue, desertValue);
+
+		int chunkX = x & 15;
+		int chunkZ = z & 15;
+		int snowHeight = random.nextInt(4) + 144;
+
+		for (int y = 255; y > 255 - snowHeight; --y) {
+			int index = chunkX << 12 | chunkZ << 8 | y;
+			if (blocks[index] == 0 && blocks[index - 1] > 0) {
+				blocks[index] = (byte)Block.snow.blockID;
+				break;
+			}
+		}
 	}
 }
--- net/minecraft/src/RenderBlocks.java
+++ net/minecraft/src/RenderBlocks.java
@@ -185,10 +185,10 @@
 		int var27 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0);
 		int var28 = (var27 & 15) << 4;
 		int var29 = var27 & 240;
-		double var30 = (double)((float)var28 / 256.0F);
-		double var32 = ((double)(var28 + 16) - 0.01D) / 256.0D;
-		double var34 = (double)((float)var29 / 256.0F);
-		double var36 = ((double)(var29 + 16) - 0.01D) / 256.0D;
+		double var30 = (double)((float)var28 / 512.0F);
+		double var32 = ((double)(var28 + 16) - 0.01D) / 512.0D;
+		double var34 = (double)((float)var29 / 512.0F);
+		double var36 = ((double)(var29 + 16) - 0.01D) / 512.0D;
 		double var38 = (double)var2 + var1.minX;
 		double var40 = (double)var2 + var1.maxX;
 		double var42 = (double)var3 + var1.minY + 0.1875D;
@@ -203,10 +203,10 @@
 		var27 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 1);
 		var28 = (var27 & 15) << 4;
 		var29 = var27 & 240;
-		var30 = (double)((float)var28 / 256.0F);
-		var32 = ((double)(var28 + 16) - 0.01D) / 256.0D;
-		var34 = (double)((float)var29 / 256.0F);
-		var36 = ((double)(var29 + 16) - 0.01D) / 256.0D;
+		var30 = (double)((float)var28 / 512.0F);
+		var32 = ((double)(var28 + 16) - 0.01D) / 512.0D;
+		var34 = (double)((float)var29 / 512.0F);
+		var36 = ((double)(var29 + 16) - 0.01D) / 512.0D;
 		var38 = var30;
 		var40 = var32;
 		var42 = var34;
@@ -359,10 +359,10 @@
 		int var20 = var1.getBlockTextureFromSide(1);
 		int var21 = (var20 & 15) << 4;
 		int var22 = var20 & 240;
-		double var23 = (double)((float)var21 / 256.0F);
-		double var25 = (double)(((float)var21 + 15.99F) / 256.0F);
-		double var27 = (double)((float)var22 / 256.0F);
-		double var29 = (double)(((float)var22 + 15.99F) / 256.0F);
+		double var23 = (double)((float)var21 / 512.0F);
+		double var25 = (double)(((float)var21 + 15.99F) / 512.0F);
+		double var27 = (double)((float)var22 / 512.0F);
+		double var29 = (double)(((float)var22 + 15.99F) / 512.0F);
 		double var31 = 0.125D;
 		double var33 = (double)(var2 + 1);
 		double var35 = (double)(var2 + 1);
@@ -520,10 +520,10 @@
 		int var17 = (var16 & 15) << 4;
 		int var18 = var16 & 240;
 		Tessellator var19 = Tessellator.instance;
-		double var20 = (double)((float)(var17 + 0) / 256.0F);
-		double var22 = (double)((float)(var18 + 0) / 256.0F);
-		double var24 = ((double)var17 + var14 - 0.01D) / 256.0D;
-		double var26 = ((double)((float)var18 + 4.0F) - 0.01D) / 256.0D;
+		double var20 = (double)((float)(var17 + 0) / 512.0F);
+		double var22 = (double)((float)(var18 + 0) / 512.0F);
+		double var24 = ((double)var17 + var14 - 0.01D) / 512.0D;
+		double var26 = ((double)((float)var18 + 4.0F) - 0.01D) / 512.0D;
 		var19.setColorOpaque_F(var13, var13, var13);
 		var19.addVertexWithUV(var1, var7, var9, var24, var22);
 		var19.addVertexWithUV(var1, var5, var9, var20, var22);
@@ -540,10 +540,10 @@
 		int var17 = (var16 & 15) << 4;
 		int var18 = var16 & 240;
 		Tessellator var19 = Tessellator.instance;
-		double var20 = (double)((float)(var17 + 0) / 256.0F);
-		double var22 = (double)((float)(var18 + 0) / 256.0F);
-		double var24 = ((double)var17 + var14 - 0.01D) / 256.0D;
-		double var26 = ((double)((float)var18 + 4.0F) - 0.01D) / 256.0D;
+		double var20 = (double)((float)(var17 + 0) / 512.0F);
+		double var22 = (double)((float)(var18 + 0) / 512.0F);
+		double var24 = ((double)var17 + var14 - 0.01D) / 512.0D;
+		double var26 = ((double)((float)var18 + 4.0F) - 0.01D) / 512.0D;
 		var19.setColorOpaque_F(var13, var13, var13);
 		var19.addVertexWithUV(var1, var5, var11, var24, var22);
 		var19.addVertexWithUV(var1, var5, var9, var20, var22);
@@ -560,10 +560,10 @@
 		int var17 = (var16 & 15) << 4;
 		int var18 = var16 & 240;
 		Tessellator var19 = Tessellator.instance;
-		double var20 = (double)((float)(var17 + 0) / 256.0F);
-		double var22 = (double)((float)(var18 + 0) / 256.0F);
-		double var24 = ((double)var17 + var14 - 0.01D) / 256.0D;
-		double var26 = ((double)((float)var18 + 4.0F) - 0.01D) / 256.0D;
+		double var20 = (double)((float)(var17 + 0) / 512.0F);
+		double var22 = (double)((float)(var18 + 0) / 512.0F);
+		double var24 = ((double)var17 + var14 - 0.01D) / 512.0D;
+		double var26 = ((double)((float)var18 + 4.0F) - 0.01D) / 512.0D;
 		var19.setColorOpaque_F(var13, var13, var13);
 		var19.addVertexWithUV(var3, var5, var9, var24, var22);
 		var19.addVertexWithUV(var1, var5, var9, var20, var22);
@@ -707,10 +707,10 @@
 
 		int var15 = (var14 & 15) << 4;
 		int var16 = var14 & 240;
-		float var17 = (float)var15 / 256.0F;
-		float var18 = ((float)var15 + 15.99F) / 256.0F;
-		float var19 = (float)var16 / 256.0F;
-		float var20 = ((float)var16 + 15.99F) / 256.0F;
+		float var17 = (float)var15 / 512.0F;
+		float var18 = ((float)var15 + 15.99F) / 512.0F;
+		float var19 = (float)var16 / 512.0F;
+		float var20 = ((float)var16 + 15.99F) / 512.0F;
 		Vec3D[] var21 = new Vec3D[8];
 		float var22 = 1.0F / 16.0F;
 		float var23 = 1.0F / 16.0F;
@@ -773,15 +773,15 @@
 
 		for(int var29 = 0; var29 < 6; ++var29) {
 			if(var29 == 0) {
-				var17 = (float)(var15 + 7) / 256.0F;
-				var18 = ((float)(var15 + 9) - 0.01F) / 256.0F;
-				var19 = (float)(var16 + 6) / 256.0F;
-				var20 = ((float)(var16 + 8) - 0.01F) / 256.0F;
+				var17 = (float)(var15 + 7) / 512.0F;
+				var18 = ((float)(var15 + 9) - 0.01F) / 512.0F;
+				var19 = (float)(var16 + 6) / 512.0F;
+				var20 = ((float)(var16 + 8) - 0.01F) / 512.0F;
 			} else if(var29 == 2) {
-				var17 = (float)(var15 + 7) / 256.0F;
-				var18 = ((float)(var15 + 9) - 0.01F) / 256.0F;
-				var19 = (float)(var16 + 6) / 256.0F;
-				var20 = ((float)(var16 + 16) - 0.01F) / 256.0F;
+				var17 = (float)(var15 + 7) / 512.0F;
+				var18 = ((float)(var15 + 9) - 0.01F) / 512.0F;
+				var19 = (float)(var16 + 6) / 512.0F;
+				var20 = ((float)(var16 + 16) - 0.01F) / 512.0F;
 			}
 
 			if(var29 == 0) {
@@ -941,10 +941,10 @@
 					var5.func_35835_b(this.blockAccess.func_35451_b(var7, var8, var9, 2));
 					int var13 = (var10 & 15) << 4;
 					int var14 = var10 & 240;
-					double var15 = ((double)var13 + 0.0D) / 256.0D;
-					double var17 = ((double)var13 + 15.99D) / 256.0D;
-					double var19 = (double)((float)var14 / 256.0F);
-					double var21 = (double)(((float)var14 + 15.99F) / 256.0F);
+					double var15 = ((double)var13 + 0.0D) / 512.0D;
+					double var17 = ((double)var13 + 15.99D) / 512.0D;
+					double var19 = (double)((float)var14 / 512.0F);
+					double var21 = (double)(((float)var14 + 15.99F) / 512.0F);
 					double var23 = var15;
 					double var25 = var17;
 					double var27 = var17;
@@ -1036,10 +1036,10 @@
 		var5.func_35835_b(var1.func_35275_c(this.blockAccess, var2, var3, var4));
 		int var7 = (var6 & 15) << 4;
 		int var8 = var6 & 240;
-		double var9 = (double)((float)var7 / 256.0F);
-		double var11 = (double)(((float)var7 + 15.99F) / 256.0F);
-		double var13 = (double)((float)var8 / 256.0F);
-		double var15 = (double)(((float)var8 + 15.99F) / 256.0F);
+		double var9 = (double)((float)var7 / 512.0F);
+		double var11 = (double)(((float)var7 + 15.99F) / 512.0F);
+		double var13 = (double)((float)var8 / 512.0F);
+		double var15 = (double)(((float)var8 + 15.99F) / 512.0F);
 		float var17 = 1.4F;
 		double var20;
 		double var22;
@@ -1052,10 +1052,10 @@
 			float var36 = 0.2F;
 			float var19 = 1.0F / 16.0F;
 			if((var2 + var3 + var4 & 1) == 1) {
-				var9 = (double)((float)var7 / 256.0F);
-				var11 = (double)(((float)var7 + 15.99F) / 256.0F);
-				var13 = (double)((float)(var8 + 16) / 256.0F);
-				var15 = (double)(((float)var8 + 15.99F + 16.0F) / 256.0F);
+				var9 = (double)((float)var7 / 512.0F);
+				var11 = (double)(((float)var7 + 15.99F) / 512.0F);
+				var13 = (double)((float)(var8 + 16) / 512.0F);
+				var15 = (double)(((float)var8 + 15.99F + 16.0F) / 512.0F);
 			}
 
 			if((var2 / 2 + var3 / 2 + var4 / 2 & 1) == 1) {
@@ -1117,10 +1117,10 @@
 				var30 = (double)var2 + 0.5D + 0.5D;
 				var32 = (double)var4 + 0.5D - 0.5D;
 				double var34 = (double)var4 + 0.5D + 0.5D;
-				var9 = (double)((float)var7 / 256.0F);
-				var11 = (double)(((float)var7 + 15.99F) / 256.0F);
-				var13 = (double)((float)var8 / 256.0F);
-				var15 = (double)(((float)var8 + 15.99F) / 256.0F);
+				var9 = (double)((float)var7 / 512.0F);
+				var11 = (double)(((float)var7 + 15.99F) / 512.0F);
+				var13 = (double)((float)var8 / 512.0F);
+				var15 = (double)(((float)var8 + 15.99F) / 512.0F);
 				++var3;
 				var17 = -0.2F;
 				if((var2 + var3 + var4 & 1) == 0) {
@@ -1128,10 +1128,10 @@
 					var5.addVertexWithUV(var20, (double)(var3 + 0), (double)(var4 + 0), var11, var15);
 					var5.addVertexWithUV(var20, (double)(var3 + 0), (double)(var4 + 1), var9, var15);
 					var5.addVertexWithUV(var28, (double)((float)var3 + var17), (double)(var4 + 1), var9, var13);
-					var9 = (double)((float)var7 / 256.0F);
-					var11 = (double)(((float)var7 + 15.99F) / 256.0F);
-					var13 = (double)((float)(var8 + 16) / 256.0F);
-					var15 = (double)(((float)var8 + 15.99F + 16.0F) / 256.0F);
+					var9 = (double)((float)var7 / 512.0F);
+					var11 = (double)(((float)var7 + 15.99F) / 512.0F);
+					var13 = (double)((float)(var8 + 16) / 512.0F);
+					var15 = (double)(((float)var8 + 15.99F + 16.0F) / 512.0F);
 					var5.addVertexWithUV(var30, (double)((float)var3 + var17), (double)(var4 + 1), var11, var13);
 					var5.addVertexWithUV(var22, (double)(var3 + 0), (double)(var4 + 1), var11, var15);
 					var5.addVertexWithUV(var22, (double)(var3 + 0), (double)(var4 + 0), var9, var15);
@@ -1141,10 +1141,10 @@
 					var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var26, var11, var15);
 					var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var26, var9, var15);
 					var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var17), var34, var9, var13);
-					var9 = (double)((float)var7 / 256.0F);
-					var11 = (double)(((float)var7 + 15.99F) / 256.0F);
-					var13 = (double)((float)(var8 + 16) / 256.0F);
-					var15 = (double)(((float)var8 + 15.99F + 16.0F) / 256.0F);
+					var9 = (double)((float)var7 / 512.0F);
+					var11 = (double)(((float)var7 + 15.99F) / 512.0F);
+					var13 = (double)((float)(var8 + 16) / 512.0F);
+					var15 = (double)(((float)var8 + 15.99F + 16.0F) / 512.0F);
 					var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var17), var32, var11, var13);
 					var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var24, var11, var15);
 					var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var24, var9, var15);
@@ -1168,10 +1168,10 @@
 			var5.addVertexWithUV(var20, (double)(var3 + 0), (double)(var4 + 0), var11, var15);
 			var5.addVertexWithUV(var20, (double)(var3 + 0), (double)(var4 + 1), var9, var15);
 			var5.addVertexWithUV(var28, (double)((float)var3 + var17), (double)(var4 + 1), var9, var13);
-			var9 = (double)((float)var7 / 256.0F);
-			var11 = (double)(((float)var7 + 15.99F) / 256.0F);
-			var13 = (double)((float)(var8 + 16) / 256.0F);
-			var15 = (double)(((float)var8 + 15.99F + 16.0F) / 256.0F);
+			var9 = (double)((float)var7 / 512.0F);
+			var11 = (double)(((float)var7 + 15.99F) / 512.0F);
+			var13 = (double)((float)(var8 + 16) / 512.0F);
+			var15 = (double)(((float)var8 + 15.99F + 16.0F) / 512.0F);
 			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var17), var32, var11, var13);
 			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var24, var11, var15);
 			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var24, var9, var15);
@@ -1196,10 +1196,10 @@
 			var5.addVertexWithUV(var20, (double)(var3 + 0), (double)(var4 + 1), var9, var15);
 			var5.addVertexWithUV(var20, (double)(var3 + 0), (double)(var4 + 0), var11, var15);
 			var5.addVertexWithUV(var28, (double)((float)var3 + var17), (double)(var4 + 0), var11, var13);
-			var9 = (double)((float)var7 / 256.0F);
-			var11 = (double)(((float)var7 + 15.99F) / 256.0F);
-			var13 = (double)((float)var8 / 256.0F);
-			var15 = (double)(((float)var8 + 15.99F) / 256.0F);
+			var9 = (double)((float)var7 / 512.0F);
+			var11 = (double)(((float)var7 + 15.99F) / 512.0F);
+			var13 = (double)((float)var8 / 512.0F);
+			var15 = (double)(((float)var8 + 15.99F) / 512.0F);
 			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var17), var32, var9, var13);
 			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var24, var9, var15);
 			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var24, var11, var15);
@@ -1242,10 +1242,10 @@
 		var5.setColorOpaque_F(var10, var11, var12);
 		int var13 = (var7 & 15) << 4;
 		int var14 = var7 & 240;
-		double var15 = (double)((float)var13 / 256.0F);
-		double var17 = (double)(((float)var13 + 15.99F) / 256.0F);
-		double var19 = (double)((float)var14 / 256.0F);
-		double var21 = (double)(((float)var14 + 15.99F) / 256.0F);
+		double var15 = (double)((float)var13 / 512.0F);
+		double var17 = (double)(((float)var13 + 15.99F) / 512.0F);
+		double var19 = (double)((float)var14 / 512.0F);
+		double var21 = (double)(((float)var14 + 15.99F) / 512.0F);
 		boolean var29 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3, var4, 1) || !this.blockAccess.isBlockNormalCube(var2 - 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3 - 1, var4, -1);
 		boolean var30 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3, var4, 3) || !this.blockAccess.isBlockNormalCube(var2 + 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3 - 1, var4, -1);
 		boolean var31 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3, var4 - 1, 2) || !this.blockAccess.isBlockNormalCube(var2, var3, var4 - 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 - 1, var4 - 1, -1);
@@ -1282,10 +1282,10 @@
 		}
 
 		if(var38 != 0) {
-			var15 = (double)((float)(var13 + 16) / 256.0F);
-			var17 = (double)(((float)(var13 + 16) + 15.99F) / 256.0F);
-			var19 = (double)((float)var14 / 256.0F);
-			var21 = (double)(((float)var14 + 15.99F) / 256.0F);
+			var15 = (double)((float)(var13 + 16) / 512.0F);
+			var17 = (double)(((float)(var13 + 16) + 15.99F) / 512.0F);
+			var19 = (double)((float)var14 / 512.0F);
+			var21 = (double)(((float)var14 + 15.99F) / 512.0F);
 		}
 
 		if(var38 == 0) {
@@ -1355,10 +1355,10 @@
 		}
 
 		if(!this.blockAccess.isBlockNormalCube(var2, var3 + 1, var4)) {
-			var15 = (double)((float)(var13 + 16) / 256.0F);
-			var17 = (double)(((float)(var13 + 16) + 15.99F) / 256.0F);
-			var19 = (double)((float)var14 / 256.0F);
-			var21 = (double)(((float)var14 + 15.99F) / 256.0F);
+			var15 = (double)((float)(var13 + 16) / 512.0F);
+			var17 = (double)(((float)(var13 + 16) + 15.99F) / 512.0F);
+			var19 = (double)((float)var14 / 512.0F);
+			var21 = (double)(((float)var14 + 15.99F) / 512.0F);
 			if(this.blockAccess.isBlockNormalCube(var2 - 1, var3, var4) && this.blockAccess.getBlockId(var2 - 1, var3 + 1, var4) == Block.redstoneWire.blockID) {
 				var5.setColorOpaque_F(var8 * var10, var8 * var11, var8 * var12);
 				var5.addVertexWithUV((double)var2 + 1.0D / 64.0D, (double)((float)(var3 + 1) + 7.0F / 320.0F), (double)(var4 + 1), var17, var19);
@@ -1431,10 +1431,10 @@
 		var5.setColorOpaque_F(1.0F, 1.0F, 1.0F);
 		int var8 = (var7 & 15) << 4;
 		int var9 = var7 & 240;
-		double var10 = (double)((float)var8 / 256.0F);
-		double var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-		double var14 = (double)((float)var9 / 256.0F);
-		double var16 = (double)(((float)var9 + 15.99F) / 256.0F);
+		double var10 = (double)((float)var8 / 512.0F);
+		double var12 = (double)(((float)var8 + 15.99F) / 512.0F);
+		double var14 = (double)((float)var9 / 512.0F);
+		double var16 = (double)(((float)var9 + 15.99F) / 512.0F);
 		double var18 = 1.0D / 16.0D;
 		double var20 = (double)(var2 + 1);
 		double var22 = (double)(var2 + 1);
@@ -1512,10 +1512,10 @@
 		var5.setColorOpaque_F(var7, var7, var7);
 		int var22 = (var6 & 15) << 4;
 		int var8 = var6 & 240;
-		double var9 = (double)((float)var22 / 256.0F);
-		double var11 = (double)(((float)var22 + 15.99F) / 256.0F);
-		double var13 = (double)((float)var8 / 256.0F);
-		double var15 = (double)(((float)var8 + 15.99F) / 256.0F);
+		double var9 = (double)((float)var22 / 512.0F);
+		double var11 = (double)(((float)var22 + 15.99F) / 512.0F);
+		double var13 = (double)((float)var8 / 512.0F);
+		double var15 = (double)(((float)var8 + 15.99F) / 512.0F);
 		int var17 = this.blockAccess.getBlockMetadata(var2, var3, var4);
 		double var18 = 0.0D;
 		double var20 = (double)0.05F;
@@ -1566,10 +1566,10 @@
 		var5.setColorOpaque_F(var7 * var9, var7 * var10, var7 * var11);
 		var8 = (var6 & 15) << 4;
 		int var21 = var6 & 240;
-		double var22 = (double)((float)var8 / 256.0F);
-		double var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-		double var14 = (double)((float)var21 / 256.0F);
-		double var16 = (double)(((float)var21 + 15.99F) / 256.0F);
+		double var22 = (double)((float)var8 / 512.0F);
+		double var12 = (double)(((float)var8 + 15.99F) / 512.0F);
+		double var14 = (double)((float)var21 / 512.0F);
+		double var16 = (double)(((float)var21 + 15.99F) / 512.0F);
 		double var18 = (double)0.05F;
 		int var20 = this.blockAccess.getBlockMetadata(var2, var3, var4);
 		if((var20 & 2) != 0) {
@@ -1661,18 +1661,18 @@
 
 		var68 = (var65 & 15) << 4;
 		int var15 = var65 & 240;
-		double var16 = (double)((float)var68 / 256.0F);
-		double var18 = (double)(((float)var68 + 7.99F) / 256.0F);
-		double var20 = (double)(((float)var68 + 15.99F) / 256.0F);
-		double var22 = (double)((float)var15 / 256.0F);
-		double var24 = (double)(((float)var15 + 15.99F) / 256.0F);
+		double var16 = (double)((float)var68 / 512.0F);
+		double var18 = (double)(((float)var68 + 7.99F) / 512.0F);
+		double var20 = (double)(((float)var68 + 15.99F) / 512.0F);
+		double var22 = (double)((float)var15 / 512.0F);
+		double var24 = (double)(((float)var15 + 15.99F) / 512.0F);
 		int var26 = (var67 & 15) << 4;
 		int var27 = var67 & 240;
-		double var28 = (double)((float)(var26 + 7) / 256.0F);
-		double var30 = (double)(((float)var26 + 8.99F) / 256.0F);
-		double var32 = (double)((float)var27 / 256.0F);
-		double var34 = (double)((float)(var27 + 8) / 256.0F);
-		double var36 = (double)(((float)var27 + 15.99F) / 256.0F);
+		double var28 = (double)((float)(var26 + 7) / 512.0F);
+		double var30 = (double)(((float)var26 + 8.99F) / 512.0F);
+		double var32 = (double)((float)var27 / 512.0F);
+		double var34 = (double)((float)(var27 + 8) / 512.0F);
+		double var36 = (double)(((float)var27 + 15.99F) / 512.0F);
 		double var38 = (double)var2;
 		double var40 = (double)var2 + 0.5D;
 		double var42 = (double)(var2 + 1);
@@ -2093,13 +2093,13 @@
 
 		int var14 = (var13 & 15) << 4;
 		int var15 = var13 & 240;
-		float var16 = (float)var14 / 256.0F;
-		float var17 = ((float)var14 + 15.99F) / 256.0F;
-		float var18 = (float)var15 / 256.0F;
-		float var19 = ((float)var15 + 15.99F) / 256.0F;
+		float var16 = (float)var14 / 512.0F;
+		float var17 = ((float)var14 + 15.99F) / 512.0F;
+		float var18 = (float)var15 / 512.0F;
+		float var19 = ((float)var15 + 15.99F) / 512.0F;
 		double var20 = (double)var16 + 1.75D / 64.0D;
-		double var22 = (double)var18 + 6.0D / 256.0D;
-		double var24 = (double)var16 + 9.0D / 256.0D;
+		double var22 = (double)var18 + 6.0D / 512.0D;
+		double var24 = (double)var16 + 9.0D / 512.0D;
 		double var26 = (double)var18 + 1.0D / 32.0D;
 		var2 += 0.5D;
 		var6 += 0.5D;
@@ -2140,10 +2140,13 @@
 
 		int var11 = (var10 & 15) << 4;
 		int var12 = var10 & 240;
-		double var13 = (double)((float)var11 / 256.0F);
-		double var15 = (double)(((float)var11 + 15.99F) / 256.0F);
-		double var17 = (double)((float)var12 / 256.0F);
-		double var19 = (double)(((float)var12 + 15.99F) / 256.0F);
+		int var10a = (var10 >> 8) & 3;
+		if (var10a % 2 == 1) var11 += 256;
+		if (var10a / 2 == 1) var12 += 256;
+		double var13 = (double)((float)var11 / 512.0F);
+		double var15 = (double)(((float)var11 + 15.99F) / 512.0F);
+		double var17 = (double)((float)var12 / 512.0F);
+		double var19 = (double)(((float)var12 + 15.99F) / 512.0F);
 		double var21 = var3 + 0.5D - 0.45D;
 		double var23 = var3 + 0.5D + 0.45D;
 		double var25 = var7 + 0.5D - 0.45D;
@@ -2175,10 +2178,10 @@
 
 		int var13 = (var12 & 15) << 4;
 		int var14 = var12 & 240;
-		double var15 = (double)((float)var13 / 256.0F);
-		double var17 = (double)(((float)var13 + 15.99F) / 256.0F);
-		double var19 = (double)((float)var14 / 256.0F);
-		double var21 = ((double)var14 + (double)15.99F * var3) / 256.0D;
+		double var15 = (double)((float)var13 / 512.0F);
+		double var17 = (double)(((float)var13 + 15.99F) / 512.0F);
+		double var19 = (double)((float)var14 / 512.0F);
+		double var21 = ((double)var14 + (double)15.99F * var3) / 512.0D;
 		double var23 = var5 + 0.5D - (double)0.45F;
 		double var25 = var5 + 0.5D + (double)0.45F;
 		double var27 = var9 + 0.5D - (double)0.45F;
@@ -2210,10 +2213,10 @@
 
 		int var14 = (var13 & 15) << 4;
 		int var15 = var13 & 240;
-		double var16 = (double)((float)var14 / 256.0F);
-		double var18 = (double)(((float)var14 + 15.99F) / 256.0F);
-		double var20 = (double)((float)var15 / 256.0F);
-		double var22 = ((double)var15 + (double)15.99F * var4) / 256.0D;
+		double var16 = (double)((float)var14 / 512.0F);
+		double var18 = (double)(((float)var14 + 15.99F) / 512.0F);
+		double var20 = (double)((float)var15 / 512.0F);
+		double var22 = ((double)var15 + (double)15.99F * var4) / 512.0D;
 		double var24 = var6 + 0.5D - 0.5D;
 		double var26 = var6 + 0.5D + 0.5D;
 		double var28 = var10 + 0.5D - 0.5D;
@@ -2257,10 +2260,10 @@
 
 		int var11 = (var10 & 15) << 4;
 		int var12 = var10 & 240;
-		double var13 = (double)((float)var11 / 256.0F);
-		double var15 = (double)(((float)var11 + 15.99F) / 256.0F);
-		double var17 = (double)((float)var12 / 256.0F);
-		double var19 = (double)(((float)var12 + 15.99F) / 256.0F);
+		double var13 = (double)((float)var11 / 512.0F);
+		double var15 = (double)(((float)var11 + 15.99F) / 512.0F);
+		double var17 = (double)((float)var12 / 512.0F);
+		double var19 = (double)(((float)var12 + 15.99F) / 512.0F);
 		double var21 = var3 + 0.5D - 0.25D;
 		double var23 = var3 + 0.5D + 0.25D;
 		double var25 = var7 + 0.5D - 0.5D;
@@ -2312,6 +2315,12 @@
 		boolean var10 = var1.shouldSideBeRendered(this.blockAccess, var2, var3 + 1, var4, 1);
 		boolean var11 = var1.shouldSideBeRendered(this.blockAccess, var2, var3 - 1, var4, 0);
 		boolean[] var12 = new boolean[]{var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2), var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 + 1, 3), var1.shouldSideBeRendered(this.blockAccess, var2 - 1, var3, var4, 4), var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5)};
+
+		if(Minecraft.isFancyGraphicsEnabled() && var1.blockMaterial == Material.water && this.blockAccess.isBlockOpaqueCube(var2, var3 - 1, var4)) {
+			var5.func_35835_b(var1.func_35275_c(this.blockAccess, var2, var3 - 1, var4));
+			this.renderTopFace(var1, (double)var2, (double)var3 - 0.99D, (double)var4, var1.getBlockTextureFromSide(6));
+		}
+
 		if(!var10 && !var11 && !var12[0] && !var12[1] && !var12[2] && !var12[3]) {
 			return false;
 		} else {
@@ -2340,17 +2349,17 @@
 
 				int var34 = (var32 & 15) << 4;
 				var35 = var32 & 240;
-				double var36 = ((double)var34 + 8.0D) / 256.0D;
-				double var38 = ((double)var35 + 8.0D) / 256.0D;
+				double var36 = ((double)var34 + 8.0D) / 512.0D;
+				double var38 = ((double)var35 + 8.0D) / 512.0D;
 				if(var33 < -999.0F) {
 					var33 = 0.0F;
 				} else {
-					var36 = (double)((float)(var34 + 16) / 256.0F);
-					var38 = (double)((float)(var35 + 16) / 256.0F);
+					var36 = (double)((float)(var34 + 16) / 512.0F);
+					var38 = (double)((float)(var35 + 16) / 512.0F);
 				}
 
-				double var40 = (double)(MathHelper.sin(var33) * 8.0F) / 256.0D;
-				double var42 = (double)(MathHelper.cos(var33) * 8.0F) / 256.0D;
+				double var40 = (double)(MathHelper.sin(var33) * 8.0F) / 512.0D;
+				double var42 = (double)(MathHelper.cos(var33) * 8.0F) / 512.0D;
 				var5.func_35835_b(var1.func_35275_c(this.blockAccess, var2, var3, var4));
 				float var44 = 1.0F;
 				var5.setColorOpaque_F(var15 * var44 * var7, var15 * var44 * var8, var15 * var44 * var9);
@@ -2428,11 +2437,11 @@
 					}
 
 					var13 = true;
-					double var51 = (double)((float)(var37 + 0) / 256.0F);
-					double var53 = ((double)(var37 + 16) - 0.01D) / 256.0D;
-					double var55 = ((double)var65 + (1.0D - var39) * 16.0D) / 256.0D;
-					double var57 = ((double)var65 + (1.0D - var41) * 16.0D) / 256.0D;
-					double var59 = ((double)(var65 + 16) - 0.01D) / 256.0D;
+					double var51 = (double)((float)(var37 + 0) / 512.0F);
+					double var53 = ((double)(var37 + 16) - 0.01D) / 512.0D;
+					double var55 = ((double)var65 + (1.0D - var39) * 16.0D) / 512.0D;
+					double var57 = ((double)var65 + (1.0D - var41) * 16.0D) / 512.0D;
+					double var59 = ((double)(var65 + 16) - 0.01D) / 512.0D;
 					var5.func_35835_b(var1.func_35275_c(this.blockAccess, var63, var3, var35));
 					float var61 = 1.0F;
 					if(var32 < 2) {
@@ -2487,7 +2496,7 @@
 		return 1.0F - var6 / (float)var5;
 	}
 
-	public void renderBlockFallingSand(Block var1, World var2, int var3, int var4, int var5) {
+	public void renderBlockFallingSand(Block var1, int var1a, World var2, int var3, int var4, int var5) {
 		float var6 = 0.5F;
 		float var7 = 1.0F;
 		float var8 = 0.8F;
@@ -2502,42 +2511,42 @@
 		}
 
 		var10.setColorOpaque_F(var6 * var12, var6 * var12, var6 * var12);
-		this.renderBottomFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(0));
+		this.renderBottomFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSideAndMetadata(0, var1a));
 		var12 = 1.0F;
 		if(var12 < var11) {
 			var12 = var11;
 		}
 
 		var10.setColorOpaque_F(var7 * var12, var7 * var12, var7 * var12);
-		this.renderTopFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(1));
-		var12 = 1.0F;
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
-		this.renderEastFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(2));
-		var12 = 1.0F;
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
-		this.renderWestFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(3));
-		var12 = 1.0F;
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
-		this.renderNorthFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(4));
-		var12 = 1.0F;
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
-		this.renderSouthFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(5));
+		this.renderTopFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSideAndMetadata(1, var1a));
+		var12 = 1.0F;
+		if(var12 < var11) {
+			var12 = var11;
+		}
+
+		var10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
+		this.renderEastFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSideAndMetadata(2, var1a));
+		var12 = 1.0F;
+		if(var12 < var11) {
+			var12 = var11;
+		}
+
+		var10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
+		this.renderWestFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSideAndMetadata(3, var1a));
+		var12 = 1.0F;
+		if(var12 < var11) {
+			var12 = var11;
+		}
+
+		var10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
+		this.renderNorthFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSideAndMetadata(4, var1a));
+		var12 = 1.0F;
+		if(var12 < var11) {
+			var12 = var11;
+		}
+
+		var10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
+		this.renderSouthFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSideAndMetadata(5, var1a));
 		var10.draw();
 	}
 
@@ -3678,18 +3687,21 @@
 
 		int var10 = (var8 & 15) << 4;
 		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minZ * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
+		int var8a = (var8 >> 8) & 3;
+		if (var8a % 2 == 1) var10 += 256;
+		if (var8a / 2 == 1) var11 += 256;
+		double var12 = ((double)var10 + var1.minX * 16.0D) / 512.0D;
+		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 512.0D;
+		double var16 = ((double)var11 + var1.minZ * 16.0D) / 512.0D;
+		double var18 = ((double)var11 + var1.maxZ * 16.0D - 0.01D) / 512.0D;
 		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+			var12 = (double)(((float)var10 + 0.0F) / 512.0F);
+			var14 = (double)(((float)var10 + 15.99F) / 512.0F);
 		}
 
 		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+			var16 = (double)(((float)var11 + 0.0F) / 512.0F);
+			var18 = (double)(((float)var11 + 15.99F) / 512.0F);
 		}
 
 		double var20 = var14;
@@ -3697,10 +3709,10 @@
 		double var24 = var16;
 		double var26 = var18;
 		if(this.uvRotateBottom == 2) {
-			var12 = ((double)var10 + var1.minZ * 16.0D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.maxX * 16.0D) / 256.0D;
-			var14 = ((double)var10 + var1.maxZ * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.minX * 16.0D) / 256.0D;
+			var12 = ((double)var10 + var1.minZ * 16.0D) / 512.0D;
+			var16 = ((double)(var11 + 16) - var1.maxX * 16.0D) / 512.0D;
+			var14 = ((double)var10 + var1.maxZ * 16.0D) / 512.0D;
+			var18 = ((double)(var11 + 16) - var1.minX * 16.0D) / 512.0D;
 			var24 = var16;
 			var26 = var18;
 			var20 = var12;
@@ -3708,10 +3720,10 @@
 			var16 = var18;
 			var18 = var24;
 		} else if(this.uvRotateBottom == 1) {
-			var12 = ((double)(var10 + 16) - var1.maxZ * 16.0D) / 256.0D;
-			var16 = ((double)var11 + var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.minZ * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.maxX * 16.0D) / 256.0D;
+			var12 = ((double)(var10 + 16) - var1.maxZ * 16.0D) / 512.0D;
+			var16 = ((double)var11 + var1.minX * 16.0D) / 512.0D;
+			var14 = ((double)(var10 + 16) - var1.minZ * 16.0D) / 512.0D;
+			var18 = ((double)var11 + var1.maxX * 16.0D) / 512.0D;
 			var20 = var14;
 			var22 = var12;
 			var12 = var14;
@@ -3719,10 +3731,10 @@
 			var24 = var18;
 			var26 = var16;
 		} else if(this.uvRotateBottom == 3) {
-			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.minZ * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.maxZ * 16.0D - 0.01D) / 256.0D;
+			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / 512.0D;
+			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / 512.0D;
+			var16 = ((double)(var11 + 16) - var1.minZ * 16.0D) / 512.0D;
+			var18 = ((double)(var11 + 16) - var1.maxZ * 16.0D - 0.01D) / 512.0D;
 			var20 = var14;
 			var22 = var12;
 			var24 = var16;
@@ -3764,18 +3776,21 @@
 
 		int var10 = (var8 & 15) << 4;
 		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minZ * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
+		int var8a = (var8 >> 8) & 3;
+		if (var8a % 2 == 1) var10 += 256;
+		if (var8a / 2 == 1) var11 += 256;
+		double var12 = ((double)var10 + var1.minX * 16.0D) / 512.0D;
+		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 512.0D;
+		double var16 = ((double)var11 + var1.minZ * 16.0D) / 512.0D;
+		double var18 = ((double)var11 + var1.maxZ * 16.0D - 0.01D) / 512.0D;
 		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+			var12 = (double)(((float)var10 + 0.0F) / 512.0F);
+			var14 = (double)(((float)var10 + 15.99F) / 512.0F);
 		}
 
 		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+			var16 = (double)(((float)var11 + 0.0F) / 512.0F);
+			var18 = (double)(((float)var11 + 15.99F) / 512.0F);
 		}
 
 		double var20 = var14;
@@ -3783,10 +3798,10 @@
 		double var24 = var16;
 		double var26 = var18;
 		if(this.uvRotateTop == 1) {
-			var12 = ((double)var10 + var1.minZ * 16.0D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.maxX * 16.0D) / 256.0D;
-			var14 = ((double)var10 + var1.maxZ * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.minX * 16.0D) / 256.0D;
+			var12 = ((double)var10 + var1.minZ * 16.0D) / 512.0D;
+			var16 = ((double)(var11 + 16) - var1.maxX * 16.0D) / 512.0D;
+			var14 = ((double)var10 + var1.maxZ * 16.0D) / 512.0D;
+			var18 = ((double)(var11 + 16) - var1.minX * 16.0D) / 512.0D;
 			var24 = var16;
 			var26 = var18;
 			var20 = var12;
@@ -3794,10 +3809,10 @@
 			var16 = var18;
 			var18 = var24;
 		} else if(this.uvRotateTop == 2) {
-			var12 = ((double)(var10 + 16) - var1.maxZ * 16.0D) / 256.0D;
-			var16 = ((double)var11 + var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.minZ * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.maxX * 16.0D) / 256.0D;
+			var12 = ((double)(var10 + 16) - var1.maxZ * 16.0D) / 512.0D;
+			var16 = ((double)var11 + var1.minX * 16.0D) / 512.0D;
+			var14 = ((double)(var10 + 16) - var1.minZ * 16.0D) / 512.0D;
+			var18 = ((double)var11 + var1.maxX * 16.0D) / 512.0D;
 			var20 = var14;
 			var22 = var12;
 			var12 = var14;
@@ -3805,10 +3820,10 @@
 			var24 = var18;
 			var26 = var16;
 		} else if(this.uvRotateTop == 3) {
-			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.minZ * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.maxZ * 16.0D - 0.01D) / 256.0D;
+			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / 512.0D;
+			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / 512.0D;
+			var16 = ((double)(var11 + 16) - var1.minZ * 16.0D) / 512.0D;
+			var18 = ((double)(var11 + 16) - var1.maxZ * 16.0D - 0.01D) / 512.0D;
 			var20 = var14;
 			var22 = var12;
 			var24 = var16;
@@ -3850,10 +3865,13 @@
 
 		int var10 = (var8 & 15) << 4;
 		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / 256.0D;
-		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / 256.0D;
+		int var8a = (var8 >> 8) & 3;
+		if (var8a % 2 == 1) var10 += 256;
+		if (var8a / 2 == 1) var11 += 256;
+		double var12 = ((double)var10 + var1.minX * 16.0D) / 512.0D;
+		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 512.0D;
+		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / 512.0D;
+		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / 512.0D;
 		double var20;
 		if(this.flipTexture) {
 			var20 = var12;
@@ -3862,13 +3880,13 @@
 		}
 
 		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+			var12 = (double)(((float)var10 + 0.0F) / 512.0F);
+			var14 = (double)(((float)var10 + 15.99F) / 512.0F);
 		}
 
 		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+			var16 = (double)(((float)var11 + 0.0F) / 512.0F);
+			var18 = (double)(((float)var11 + 15.99F) / 512.0F);
 		}
 
 		var20 = var14;
@@ -3876,10 +3894,10 @@
 		double var24 = var16;
 		double var26 = var18;
 		if(this.uvRotateEast == 2) {
-			var12 = ((double)var10 + var1.minY * 16.0D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)var10 + var1.maxY * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.maxX * 16.0D) / 256.0D;
+			var12 = ((double)var10 + var1.minY * 16.0D) / 512.0D;
+			var16 = ((double)(var11 + 16) - var1.minX * 16.0D) / 512.0D;
+			var14 = ((double)var10 + var1.maxY * 16.0D) / 512.0D;
+			var18 = ((double)(var11 + 16) - var1.maxX * 16.0D) / 512.0D;
 			var24 = var16;
 			var26 = var18;
 			var20 = var12;
@@ -3887,10 +3905,10 @@
 			var16 = var18;
 			var18 = var24;
 		} else if(this.uvRotateEast == 1) {
-			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / 256.0D;
-			var16 = ((double)var11 + var1.maxX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.minX * 16.0D) / 256.0D;
+			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / 512.0D;
+			var16 = ((double)var11 + var1.maxX * 16.0D) / 512.0D;
+			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / 512.0D;
+			var18 = ((double)var11 + var1.minX * 16.0D) / 512.0D;
 			var20 = var14;
 			var22 = var12;
 			var12 = var14;
@@ -3898,10 +3916,10 @@
 			var24 = var18;
 			var26 = var16;
 		} else if(this.uvRotateEast == 3) {
-			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / 256.0D;
-			var16 = ((double)var11 + var1.maxY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / 256.0D;
+			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / 512.0D;
+			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / 512.0D;
+			var16 = ((double)var11 + var1.maxY * 16.0D) / 512.0D;
+			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / 512.0D;
 			var20 = var14;
 			var22 = var12;
 			var24 = var16;
@@ -3943,10 +3961,13 @@
 
 		int var10 = (var8 & 15) << 4;
 		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / 256.0D;
-		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / 256.0D;
+		int var8a = (var8 >> 8) & 3;
+		if (var8a % 2 == 1) var10 += 256;
+		if (var8a / 2 == 1) var11 += 256;
+		double var12 = ((double)var10 + var1.minX * 16.0D) / 512.0D;
+		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 512.0D;
+		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / 512.0D;
+		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / 512.0D;
 		double var20;
 		if(this.flipTexture) {
 			var20 = var12;
@@ -3955,13 +3976,13 @@
 		}
 
 		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+			var12 = (double)(((float)var10 + 0.0F) / 512.0F);
+			var14 = (double)(((float)var10 + 15.99F) / 512.0F);
 		}
 
 		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+			var16 = (double)(((float)var11 + 0.0F) / 512.0F);
+			var18 = (double)(((float)var11 + 15.99F) / 512.0F);
 		}
 
 		var20 = var14;
@@ -3969,10 +3990,10 @@
 		double var24 = var16;
 		double var26 = var18;
 		if(this.uvRotateWest == 1) {
-			var12 = ((double)var10 + var1.minY * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)var10 + var1.maxY * 16.0D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.maxX * 16.0D) / 256.0D;
+			var12 = ((double)var10 + var1.minY * 16.0D) / 512.0D;
+			var18 = ((double)(var11 + 16) - var1.minX * 16.0D) / 512.0D;
+			var14 = ((double)var10 + var1.maxY * 16.0D) / 512.0D;
+			var16 = ((double)(var11 + 16) - var1.maxX * 16.0D) / 512.0D;
 			var24 = var16;
 			var26 = var18;
 			var20 = var12;
@@ -3980,10 +4001,10 @@
 			var16 = var18;
 			var18 = var24;
 		} else if(this.uvRotateWest == 2) {
-			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / 256.0D;
-			var16 = ((double)var11 + var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.maxX * 16.0D) / 256.0D;
+			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / 512.0D;
+			var16 = ((double)var11 + var1.minX * 16.0D) / 512.0D;
+			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / 512.0D;
+			var18 = ((double)var11 + var1.maxX * 16.0D) / 512.0D;
 			var20 = var14;
 			var22 = var12;
 			var12 = var14;
@@ -3991,10 +4012,10 @@
 			var24 = var18;
 			var26 = var16;
 		} else if(this.uvRotateWest == 3) {
-			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / 256.0D;
-			var16 = ((double)var11 + var1.maxY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / 256.0D;
+			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / 512.0D;
+			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / 512.0D;
+			var16 = ((double)var11 + var1.maxY * 16.0D) / 512.0D;
+			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / 512.0D;
 			var20 = var14;
 			var22 = var12;
 			var24 = var16;
@@ -4036,10 +4057,13 @@
 
 		int var10 = (var8 & 15) << 4;
 		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minZ * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / 256.0D;
-		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / 256.0D;
+		int var8a = (var8 >> 8) & 3;
+		if (var8a % 2 == 1) var10 += 256;
+		if (var8a / 2 == 1) var11 += 256;
+		double var12 = ((double)var10 + var1.minZ * 16.0D) / 512.0D;
+		double var14 = ((double)var10 + var1.maxZ * 16.0D - 0.01D) / 512.0D;
+		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / 512.0D;
+		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / 512.0D;
 		double var20;
 		if(this.flipTexture) {
 			var20 = var12;
@@ -4048,13 +4072,13 @@
 		}
 
 		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+			var12 = (double)(((float)var10 + 0.0F) / 512.0F);
+			var14 = (double)(((float)var10 + 15.99F) / 512.0F);
 		}
 
 		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+			var16 = (double)(((float)var11 + 0.0F) / 512.0F);
+			var18 = (double)(((float)var11 + 15.99F) / 512.0F);
 		}
 
 		var20 = var14;
@@ -4062,10 +4086,10 @@
 		double var24 = var16;
 		double var26 = var18;
 		if(this.uvRotateNorth == 1) {
-			var12 = ((double)var10 + var1.minY * 16.0D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.maxZ * 16.0D) / 256.0D;
-			var14 = ((double)var10 + var1.maxY * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.minZ * 16.0D) / 256.0D;
+			var12 = ((double)var10 + var1.minY * 16.0D) / 512.0D;
+			var16 = ((double)(var11 + 16) - var1.maxZ * 16.0D) / 512.0D;
+			var14 = ((double)var10 + var1.maxY * 16.0D) / 512.0D;
+			var18 = ((double)(var11 + 16) - var1.minZ * 16.0D) / 512.0D;
 			var24 = var16;
 			var26 = var18;
 			var20 = var12;
@@ -4073,10 +4097,10 @@
 			var16 = var18;
 			var18 = var24;
 		} else if(this.uvRotateNorth == 2) {
-			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / 256.0D;
-			var16 = ((double)var11 + var1.minZ * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.maxZ * 16.0D) / 256.0D;
+			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / 512.0D;
+			var16 = ((double)var11 + var1.minZ * 16.0D) / 512.0D;
+			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / 512.0D;
+			var18 = ((double)var11 + var1.maxZ * 16.0D) / 512.0D;
 			var20 = var14;
 			var22 = var12;
 			var12 = var14;
@@ -4084,10 +4108,10 @@
 			var24 = var18;
 			var26 = var16;
 		} else if(this.uvRotateNorth == 3) {
-			var12 = ((double)(var10 + 16) - var1.minZ * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.maxZ * 16.0D - 0.01D) / 256.0D;
-			var16 = ((double)var11 + var1.maxY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / 256.0D;
+			var12 = ((double)(var10 + 16) - var1.minZ * 16.0D) / 512.0D;
+			var14 = ((double)(var10 + 16) - var1.maxZ * 16.0D - 0.01D) / 512.0D;
+			var16 = ((double)var11 + var1.maxY * 16.0D) / 512.0D;
+			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / 512.0D;
 			var20 = var14;
 			var22 = var12;
 			var24 = var16;
@@ -4129,10 +4153,13 @@
 
 		int var10 = (var8 & 15) << 4;
 		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minZ * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / 256.0D;
-		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / 256.0D;
+		int var8a = (var8 >> 8) & 3;
+		if (var8a % 2 == 1) var10 += 256;
+		if (var8a / 2 == 1) var11 += 256;
+		double var12 = ((double)var10 + var1.minZ * 16.0D) / 512.0D;
+		double var14 = ((double)var10 + var1.maxZ * 16.0D - 0.01D) / 512.0D;
+		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / 512.0D;
+		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / 512.0D;
 		double var20;
 		if(this.flipTexture) {
 			var20 = var12;
@@ -4141,13 +4168,13 @@
 		}
 
 		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+			var12 = (double)(((float)var10 + 0.0F) / 512.0F);
+			var14 = (double)(((float)var10 + 15.99F) / 512.0F);
 		}
 
 		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+			var16 = (double)(((float)var11 + 0.0F) / 512.0F);
+			var18 = (double)(((float)var11 + 15.99F) / 512.0F);
 		}
 
 		var20 = var14;
@@ -4155,10 +4182,10 @@
 		double var24 = var16;
 		double var26 = var18;
 		if(this.uvRotateSouth == 2) {
-			var12 = ((double)var10 + var1.minY * 16.0D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.minZ * 16.0D) / 256.0D;
-			var14 = ((double)var10 + var1.maxY * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.maxZ * 16.0D) / 256.0D;
+			var12 = ((double)var10 + var1.minY * 16.0D) / 512.0D;
+			var16 = ((double)(var11 + 16) - var1.minZ * 16.0D) / 512.0D;
+			var14 = ((double)var10 + var1.maxY * 16.0D) / 512.0D;
+			var18 = ((double)(var11 + 16) - var1.maxZ * 16.0D) / 512.0D;
 			var24 = var16;
 			var26 = var18;
 			var20 = var12;
@@ -4166,10 +4193,10 @@
 			var16 = var18;
 			var18 = var24;
 		} else if(this.uvRotateSouth == 1) {
-			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / 256.0D;
-			var16 = ((double)var11 + var1.maxZ * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.minZ * 16.0D) / 256.0D;
+			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / 512.0D;
+			var16 = ((double)var11 + var1.maxZ * 16.0D) / 512.0D;
+			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / 512.0D;
+			var18 = ((double)var11 + var1.minZ * 16.0D) / 512.0D;
 			var20 = var14;
 			var22 = var12;
 			var12 = var14;
@@ -4177,10 +4204,10 @@
 			var24 = var18;
 			var26 = var16;
 		} else if(this.uvRotateSouth == 3) {
-			var12 = ((double)(var10 + 16) - var1.minZ * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.maxZ * 16.0D - 0.01D) / 256.0D;
-			var16 = ((double)var11 + var1.maxY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / 256.0D;
+			var12 = ((double)(var10 + 16) - var1.minZ * 16.0D) / 512.0D;
+			var14 = ((double)(var10 + 16) - var1.maxZ * 16.0D - 0.01D) / 512.0D;
+			var16 = ((double)var11 + var1.maxY * 16.0D) / 512.0D;
+			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / 512.0D;
 			var20 = var14;
 			var22 = var12;
 			var24 = var16;
@@ -4357,27 +4384,27 @@
 					GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
 					var4.startDrawingQuads();
 					var4.setNormal(0.0F, -1.0F, 0.0F);
-					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
+					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(0, var2));
 					var4.draw();
 					var4.startDrawingQuads();
 					var4.setNormal(0.0F, 1.0F, 0.0F);
-					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
+					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(1, var2));
 					var4.draw();
 					var4.startDrawingQuads();
 					var4.setNormal(0.0F, 0.0F, -1.0F);
-					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
+					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(2, var2));
 					var4.draw();
 					var4.startDrawingQuads();
 					var4.setNormal(0.0F, 0.0F, 1.0F);
-					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
+					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(3, var2));
 					var4.draw();
 					var4.startDrawingQuads();
 					var4.setNormal(-1.0F, 0.0F, 0.0F);
-					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
+					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(4, var2));
 					var4.draw();
 					var4.startDrawingQuads();
 					var4.setNormal(1.0F, 0.0F, 0.0F);
-					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
+					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(5, var2));
 					var4.draw();
 					GL11.glTranslatef(0.5F, 0.5F, 0.5F);
 				}
@@ -4402,27 +4429,27 @@
 					GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
 					var4.startDrawingQuads();
 					var4.setNormal(0.0F, -1.0F, 0.0F);
-					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
+					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(0, var2));
 					var4.draw();
 					var4.startDrawingQuads();
 					var4.setNormal(0.0F, 1.0F, 0.0F);
-					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
+					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(1, var2));
 					var4.draw();
 					var4.startDrawingQuads();
 					var4.setNormal(0.0F, 0.0F, -1.0F);
-					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
+					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(2, var2));
 					var4.draw();
 					var4.startDrawingQuads();
 					var4.setNormal(0.0F, 0.0F, 1.0F);
-					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
+					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(3, var2));
 					var4.draw();
 					var4.startDrawingQuads();
 					var4.setNormal(-1.0F, 0.0F, 0.0F);
-					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
+					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(4, var2));
 					var4.draw();
 					var4.startDrawingQuads();
 					var4.setNormal(1.0F, 0.0F, 0.0F);
-					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
+					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(5, var2));
 					var4.draw();
 					GL11.glTranslatef(0.5F, 0.5F, 0.5F);
 				}
--- net/minecraft/src/BlockFlowing.java
+++ net/minecraft/src/BlockFlowing.java
@@ -78,6 +78,12 @@
 		}
 
 		if(this.liquidCanDisplaceBlock(var1, var2, var3 - 1, var4)) {
+			if(this.blockMaterial == Material.lava && var1.getBlockMaterial(var2, var3 - 1, var4) == Material.water) {
+				var1.setBlockWithNotify(var2, var3 - 1, var4, Block.stone.blockID);
+				this.triggerLavaMixEffects(var1, var2, var3 - 1, var4);
+				return;
+			}
+
 			if(var6 >= 8) {
 				var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, this.blockID, var6);
 			} else {
--- net/minecraft/src/World.java
+++ net/minecraft/src/World.java
@@ -67,10 +67,10 @@
 	}
 
 	public World(ISaveHandler var1, String var2, WorldProvider var3, WorldSettings var4) {
-		this.field_35473_a = 7;
-		this.field_35471_b = 11;
-		this.field_35472_c = 128;
-		this.field_35469_d = 127;
+		this.field_35473_a = 8;
+		this.field_35471_b = 12;
+		this.field_35472_c = 256;
+		this.field_35469_d = 255;
 		this.field_35470_e = 63;
 		this.scheduledUpdatesAreImmediate = false;
 		this.loadedEntityList = new ArrayList();
@@ -113,10 +113,10 @@
 	}
 
 	public World(World var1, WorldProvider var2) {
-		this.field_35473_a = 7;
-		this.field_35471_b = 11;
-		this.field_35472_c = 128;
-		this.field_35469_d = 127;
+		this.field_35473_a = 8;
+		this.field_35471_b = 12;
+		this.field_35472_c = 256;
+		this.field_35469_d = 255;
 		this.field_35470_e = 63;
 		this.scheduledUpdatesAreImmediate = false;
 		this.loadedEntityList = new ArrayList();
@@ -164,10 +164,10 @@
 	}
 
 	public World(ISaveHandler var1, String var2, WorldSettings var3, WorldProvider var4) {
-		this.field_35473_a = 7;
-		this.field_35471_b = 11;
-		this.field_35472_c = 128;
-		this.field_35469_d = 127;
+		this.field_35473_a = 8;
+		this.field_35471_b = 12;
+		this.field_35472_c = 256;
+		this.field_35469_d = 255;
 		this.field_35470_e = 63;
 		this.scheduledUpdatesAreImmediate = false;
 		this.loadedEntityList = new ArrayList();
@@ -354,7 +354,7 @@
 	}
 
 	public int getBlockId(int var1, int var2, int var3) {
-		return var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000 ? (var2 < 0 ? 0 : (var2 >= 128 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15))) : 0;
+		return var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000 ? (var2 < 0 ? 0 : (var2 >= 256 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15))) : 0;
 	}
 
 	public boolean isAirBlock(int var1, int var2, int var3) {
@@ -362,7 +362,7 @@
 	}
 
 	public boolean blockExists(int var1, int var2, int var3) {
-		return var2 >= 0 && var2 < 128 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
+		return var2 >= 0 && var2 < 256 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
 	}
 
 	public boolean doChunksNearChunkExist(int var1, int var2, int var3, int var4) {
@@ -370,7 +370,7 @@
 	}
 
 	public boolean checkChunksExist(int var1, int var2, int var3, int var4, int var5, int var6) {
-		if(var5 >= 0 && var2 < 128) {
+		if(var5 >= 0 && var2 < 256) {
 			var1 >>= 4;
 			var2 >>= 4;
 			var3 >>= 4;
@@ -408,7 +408,7 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(var2 >= 256) {
 				return false;
 			} else {
 				Chunk var6 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -425,7 +425,7 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(var2 >= 256) {
 				return false;
 			} else {
 				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -447,7 +447,7 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return 0;
-			} else if(var2 >= 128) {
+			} else if(var2 >= 256) {
 				return 0;
 			} else {
 				Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -476,7 +476,7 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(var2 >= 256) {
 				return false;
 			} else {
 				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -576,8 +576,8 @@
 		if(var2 < 0) {
 			return 0;
 		} else {
-			if(var2 >= 128) {
-				var2 = 127;
+			if(var2 >= 256) {
+				var2 = 255;
 			}
 
 			return this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockLightValue(var1 & 15, var2, var3 & 15, 0);
@@ -592,7 +592,7 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var4) {
 				int var5 = this.getBlockId(var1, var2, var3);
-				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID || var5 == Block.stairCompactCobblestone.blockID || var5 == Block.stairCompactPlanks.blockID) {
+				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID || var5 == Block.stairCompactCobblestone.blockID || var5 == Block.stairCompactPlanks.blockID || var5 == Block.stairSingleWood.blockID) {
 					int var6 = this.getBlockLightValue_do(var1, var2 + 1, var3, false);
 					int var7 = this.getBlockLightValue_do(var1 + 1, var2, var3, false);
 					int var8 = this.getBlockLightValue_do(var1 - 1, var2, var3, false);
@@ -621,8 +621,8 @@
 			if(var2 < 0) {
 				return 0;
 			} else {
-				if(var2 >= 128) {
-					var2 = 127;
+				if(var2 >= 256) {
+					var2 = 255;
 				}
 
 				Chunk var11 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -653,16 +653,16 @@
 			var3 = 0;
 		}
 
-		if(var3 >= 128 && var1 == EnumSkyBlock.Sky) {
+		if(var3 >= 256 && var1 == EnumSkyBlock.Sky) {
 			return 15;
-		} else if(var3 >= 0 && var3 < 128 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
+		} else if(var3 >= 0 && var3 < 256 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
 			int var5 = var2 >> 4;
 			int var6 = var4 >> 4;
 			if(!this.chunkExists(var5, var6)) {
 				return 0;
 			} else {
 				int var7 = this.getBlockId(var2, var3, var4);
-				if(var7 != Block.stairSingle.blockID && var7 != Block.tilledField.blockID && var7 != Block.stairCompactCobblestone.blockID && var7 != Block.stairCompactPlanks.blockID) {
+				if(var7 != Block.stairSingle.blockID && var7 != Block.tilledField.blockID && var7 != Block.stairCompactCobblestone.blockID && var7 != Block.stairCompactPlanks.blockID && var7 != Block.stairSingleWood.blockID) {
 					Chunk var13 = this.getChunkFromChunkCoords(var5, var6);
 					return var13.getSavedLightValue(var1, var2 & 15, var3, var4 & 15);
 				} else {
@@ -700,11 +700,11 @@
 			var3 = 0;
 		}
 
-		if(var3 >= 128) {
-			var3 = 127;
+		if(var3 >= 256) {
+			var3 = 255;
 		}
 
-		if(var3 >= 0 && var3 < 128 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
+		if(var3 >= 0 && var3 < 256 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
 			int var5 = var2 >> 4;
 			int var6 = var4 >> 4;
 			if(!this.chunkExists(var5, var6)) {
@@ -721,7 +721,7 @@
 	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
 		if(var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
 			if(var3 >= 0) {
-				if(var3 < 128) {
+				if(var3 < 256) {
 					if(this.chunkExists(var2 >> 4, var4 >> 4)) {
 						Chunk var6 = this.getChunkFromChunkCoords(var2 >> 4, var4 >> 4);
 						var6.setLightValue(var1, var2 & 15, var3, var4 & 15, var5);
@@ -1209,7 +1209,7 @@
 
 	public int getTopSolidOrLiquidBlock(int var1, int var2) {
 		Chunk var3 = this.getChunkFromBlockCoords(var1, var2);
-		int var4 = 127;
+		int var4 = 255;
 		var1 &= 15;
 
 		for(var2 &= 15; var4 > 0; --var4) {
@@ -1388,7 +1388,7 @@
 		int var3 = MathHelper.floor_double(var1.posX);
 		int var4 = MathHelper.floor_double(var1.posZ);
 		byte var5 = 32;
-		if(!var2 || this.checkChunksExist(var3 - var5, 0, var4 - var5, var3 + var5, 128, var4 + var5)) {
+		if(!var2 || this.checkChunksExist(var3 - var5, 0, var4 - var5, var3 + var5, 256, var4 + var5)) {
 			var1.lastTickPosX = var1.posX;
 			var1.lastTickPosY = var1.posY;
 			var1.lastTickPosZ = var1.posZ;
@@ -1926,7 +1926,7 @@
 				var6 = this.updateLCG >> 2;
 				var7 = var6 & 15;
 				var8 = var6 >> 8 & 15;
-				var9 = var6 >> 16 & 127;
+				var9 = var6 >> 16 & 255;
 				var10 = var15.getBlockID(var7, var9, var8);
 				var7 += var3;
 				var8 += var4;
@@ -1958,7 +1958,7 @@
 				var7 = var6 & 15;
 				var8 = var6 >> 8 & 15;
 				var9 = this.func_35461_e(var7 + var3, var8 + var4);
-				if(this.getWorldChunkManager().getBiomeGenAt(var7 + var3, var8 + var4).getEnableSnow() && var9 >= 0 && var9 < 128 && var15.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
+				if(this.getWorldChunkManager().getBiomeGenAt(var7 + var3, var8 + var4).getEnableSnow() && var9 >= 0 && var9 < 256 && var15.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
 					var10 = var15.getBlockID(var7, var9 - 1, var8);
 					var16 = var15.getBlockID(var7, var9, var8);
 					if(this.isRaining() && var16 == 0 && Block.snow.canPlaceBlockAt(this, var7 + var3, var9, var8 + var4) && var10 != 0 && var10 != Block.ice.blockID && Block.blocksList[var10].blockMaterial.getIsSolid()) {
@@ -1990,15 +1990,15 @@
 				}
 			}
 
-			this.func_35463_p(var3 + this.rand.nextInt(16), this.rand.nextInt(128), var4 + this.rand.nextInt(16));
+			this.func_35463_p(var3 + this.rand.nextInt(16), this.rand.nextInt(256), var4 + this.rand.nextInt(16));
 
 			for(var6 = 0; var6 < 80; ++var6) {
 				this.updateLCG = this.updateLCG * 3 + 1013904223;
 				var7 = this.updateLCG >> 2;
 				var8 = var7 & 15;
 				var9 = var7 >> 8 & 15;
-				var10 = var7 >> 16 & 127;
-				var16 = var15.blocks[var8 << 11 | var9 << 7 | var10] & 255;
+				var10 = var7 >> 16 & 255; //TODO: figure out if this causes random ticks to break
+				var16 = var15.blocks[var8 << 12 | var9 << 8 | var10] & 255;
 				if(Block.tickOnLoad[var16]) {
 					Block.blocksList[var16].updateTick(this, var8 + var3, var10, var9 + var4, this.rand);
 				}
@@ -2472,8 +2472,8 @@
 			var13 = 0;
 		}
 
-		if(var14 > 128) {
-			var14 = 128;
+		if(var14 > 256) {
+			var14 = 256;
 		}
 
 		for(int var15 = var8; var15 <= var10; ++var15) {
@@ -2724,7 +2724,7 @@
 	}
 
 	public int func_35452_b() {
-		return 128;
+		return 256;
 	}
 
 	public Random func_35462_u(int var1, int var2, int var3) {
--- net/minecraft/src/ItemCloth.java
+++ net/minecraft/src/ItemCloth.java
@@ -8,7 +8,7 @@
 	}
 
 	public int getIconFromDamage(int var1) {
-		return Block.cloth.getBlockTextureFromSideAndMetadata(2, BlockCloth.getBlockFromDye(var1));
+		return Block.blocksList[this.shiftedIndex].getBlockTextureFromSideAndMetadata(2, BlockCloth.getBlockFromDye(var1));
 	}
 
 	public int getPlacedBlockMetadata(int var1) {
--- net/minecraft/src/GenLayerVillageLandscape.java
+++ net/minecraft/src/GenLayerVillageLandscape.java
@@ -1,7 +1,21 @@
 package net.minecraft.src;
 
 public class GenLayerVillageLandscape extends GenLayer {
-	private BiomeGenBase[] field_35509_b = new BiomeGenBase[]{BiomeGenBase.desert, BiomeGenBase.forest, BiomeGenBase.field_35483_e, BiomeGenBase.swampland, BiomeGenBase.field_35485_c, BiomeGenBase.taiga};
+	private static final BiomeGenBase[] biomes = {
+			BiomeGenBase.desert,
+			BiomeGenBase.forest,
+			BiomeGenBase.field_35483_e,
+			BiomeGenBase.swampland,
+			BiomeGenBase.field_35485_c,
+			BiomeGenBase.taiga,
+			BiomeGenBase.badlands
+	};
+	private static final BiomeGenBase[] oceanBiomes = {
+			BiomeGenBase.field_35484_b,
+			BiomeGenBase.field_35484_b,
+			BiomeGenBase.coralReef,
+			BiomeGenBase.volcanicIsland
+	};
 
 	public GenLayerVillageLandscape(long var1, GenLayer var3) {
 		super(var1);
@@ -15,7 +29,11 @@
 		for(int var7 = 0; var7 < var4; ++var7) {
 			for(int var8 = 0; var8 < var3; ++var8) {
 				this.func_35499_a((long)(var8 + var1), (long)(var7 + var2));
-				var6[var8 + var7 * var3] = var5[var8 + var7 * var3] > 0 ? this.field_35509_b[this.func_35498_a(this.field_35509_b.length)].field_35494_y : 0;
+				if (var5[var8 + var7 * var3] > 0) {
+					var6[var8 + var7 * var3] = biomes[this.func_35498_a(biomes.length)].field_35494_y;
+				} else {
+					var6[var8 + var7 * var3] = oceanBiomes[this.func_35498_a(oceanBiomes.length)].field_35494_y;
+				}
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/BiomeGenCoralReef.java
@@ -1,0 +1,32 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenCoralReef extends BiomeGenBase {
+	public BiomeGenCoralReef(int var1) {
+		super(var1);
+		this.field_35488_u.field_35911_r = 1;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return this.field_35483_D;
+	}
+
+	public void func_35477_a(World var1, Random var2, int var3, int var4) {
+		super.func_35477_a(var1, var2, var3, var4);
+
+		WorldGenerator coral = new WorldGenCoral();
+
+		for (int i = 0; i < 5; i++) {
+			int x = var3 + var2.nextInt(16) + 8;
+			int z = var4 + var2.nextInt(16) + 8;
+			int y = 64;
+			while (y > 0 && (var1.getBlockMaterial(x, y - 1, z) == Material.water || var1.isAirBlock(x, y - 1, z))) {
+				y--;
+			}
+			if (y > 0) {
+				coral.generate(var1, var2, x, y, z);
+			}
+		}
+	}
+}
--- net/minecraft/src/EntityRenderer.java
+++ net/minecraft/src/EntityRenderer.java
@@ -610,6 +610,10 @@
 				}
 
 				this.renderEndNanoTime = System.nanoTime();
+
+				if(this.mc.gameSettings.colorCorrection) {
+					this.mc.ingameGUI.drawHeat(var1);
+				}
 				if(!this.mc.gameSettings.hideGUI || this.mc.currentScreen != null) {
 					this.mc.ingameGUI.renderGameOverlay(var1, this.mc.currentScreen != null, var16, var17);
 				}
@@ -1078,8 +1082,8 @@
 			this.fogColorGreen = (float)var20.yCoord;
 			this.fogColorBlue = (float)var20.zCoord;
 		} else if(var3.isInsideOfMaterial(Material.water)) {
-			this.fogColorRed = 0.02F;
-			this.fogColorGreen = 0.02F;
+			this.fogColorRed = 0.0F;
+			this.fogColorGreen = 0.15F;
 			this.fogColorBlue = 0.2F;
 		} else if(var3.isInsideOfMaterial(Material.lava)) {
 			this.fogColorRed = 0.6F;
@@ -1091,7 +1095,7 @@
 		this.fogColorRed *= var19;
 		this.fogColorGreen *= var19;
 		this.fogColorBlue *= var19;
-		double var13 = (var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * (double)var1) / 32.0D;
+		double var13 = (var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * (double)var1) / 64.0D;
 		if(var13 < 1.0D) {
 			if(var13 < 0.0D) {
 				var13 = 0.0D;
@@ -1172,17 +1176,17 @@
 				}
 			} else {
 				var4 = this.farPlaneDistance;
-				double var10 = (double)((var3.func_35115_a(var2) & 15728640) >> 20) / 16.0D + (var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * (double)var2 + 4.0D) / 32.0D;
+				double var10 = (double)((var3.func_35115_a(var2) & 15728640) >> 20) / 16.0D + (var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * (double)var2 + 4.0D) / 64.0D;
 				if(var10 < 1.0D) {
 					if(var10 < 0.0D) {
 						var10 = 0.0D;
 					}
 
 					var10 *= var10;
-					var7 = 100.0F * (float)var10;
-					if(var7 < 5.0F) {
-						var7 = 5.0F;
+					if(var10 < 0.25F) {
+						var10 = 0.25F;
 					}
+					var7 = var4 * (float)var10;
 
 					if(var4 > var7) {
 						var4 = var7;
--- net/minecraft/src/BlockSapling.java
+++ net/minecraft/src/BlockSapling.java
@@ -25,8 +25,7 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		var2 &= 3;
-		return var2 == 1 ? 63 : (var2 == 2 ? 79 : super.getBlockTextureFromSideAndMetadata(var1, var2));
+		return this.blockIndexInTexture + var2 * 256;
 	}
 
 	public void growTree(World var1, int var2, int var3, int var4, Random var5) {
@@ -34,9 +33,13 @@
 		var1.setBlock(var2, var3, var4, 0);
 		Object var7 = null;
 		if(var6 == 1) {
-			var7 = new WorldGenTaiga2();
+			var7 = new WorldGenPalmtree();
 		} else if(var6 == 2) {
 			var7 = new WorldGenForest();
+		} else if(var6 == 3) {
+			var7 = new WorldGenTaiga2();
+		} else if (var1.getWorldChunkManager().getBiomeGenAt(var2, var4) == BiomeGenBase.swampland) {
+			var7 = new WorldGenSwamp();
 		} else {
 			var7 = new WorldGenTrees();
 			if(var5.nextInt(10) == 0) {
--- net/minecraft/src/ItemSapling.java
+++ net/minecraft/src/ItemSapling.java
@@ -14,4 +14,8 @@
 	public int getIconFromDamage(int var1) {
 		return Block.sapling.getBlockTextureFromSideAndMetadata(0, var1);
 	}
+
+	public String getItemNameIS(ItemStack var1) {
+		return super.getItemNameIS(var1) + "." + var1.getItemDamage();
+	}
 }
--- /dev/null
+++ net/minecraft/src/BiomeGenVolcanicIsland.java
@@ -1,0 +1,118 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+// TODO: Make caves cool
+
+public class BiomeGenVolcanicIsland extends BiomeGenBase {
+    private static long lastSeed = 0L;
+    private static NoiseGeneratorOctaves noiseGen1;
+    private static NoiseGeneratorOctaves noiseGen2;
+    private static NoiseGeneratorOctaves noiseGen3;
+    private static NoiseGeneratorOctaves noiseGen4;
+    private static NoiseGeneratorOctaves noiseGen5;
+    private static NoiseGeneratorOctaves noiseGen6;
+	private static NoiseGeneratorOctaves noiseGenLava;
+	private static NoiseGeneratorOctaves noiseGenAsh;
+
+    static {
+        updateGenSeed("hot stuff!".hashCode());
+    }
+
+    protected BiomeGenVolcanicIsland(int var1) {
+        super(var1);
+        this.spawnableCreatureList.clear();
+        this.spawnableWaterCreatureList.clear();
+    }
+
+    private static void updateGenSeed(long seed) {
+        if (lastSeed != seed) {
+            lastSeed = seed;
+            Random random = new Random(seed);
+            noiseGen1 = new NoiseGeneratorOctaves(random, 16);
+            noiseGen2 = new NoiseGeneratorOctaves(random, 16);
+            noiseGen3 = new NoiseGeneratorOctaves(random, 8);
+            noiseGen4 = new NoiseGeneratorOctaves(random, 4);
+            noiseGen5 = new NoiseGeneratorOctaves(random, 4);
+            noiseGen6 = new NoiseGeneratorOctaves(random, 5);
+            noiseGenLava = new NoiseGeneratorOctaves(random, 4);
+            noiseGenAsh = new NoiseGeneratorOctaves(random, 2);
+        }
+    }
+
+    public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+        updateGenSeed(world.getRandomSeed());
+        double f9 = (noiseGen1.generateNoise(x / 0.03125F, 0.0D, z / 0.03125F) - noiseGen2.generateNoise((double)x / 0.015625F, 0.0D, (double) z / 0.015625F)) / 512.0F / 2.0F;
+        double f10 = noiseGen5.func_806_a(x / 4.0F, z / 4.0F);
+        double f11 = noiseGen6.func_806_a(x / 8.0F, z / 8.0F) / 4.0F;
+        double f10a = Math.min(Math.max(f10 / 4.0D, -0.5D), 0.5D) + 0.5D;
+        f10 = (noiseGen3.func_806_a(((double)x * 0.25714284F * 2.0F), (double)z * 0.25714284F * 2.0F) * f11 / 2.0D) * f10a
+                + (noiseGen4.func_806_a(x * 0.25714284F, (double)z * 0.25714284F) * f11) * (1.0D - f10a);
+        long i15a = (int)(f9 + f10);
+        long i15 = -1;
+
+        WorldChunkManager wcm = world.getWorldChunkManager();
+        for (int i = 0; i < 5; i++) {
+            if (wcm.getBiomeGenAt(x + random.nextInt(11) - 5, z + random.nextInt(11) - 5) != this) {
+                i15a /= 2;
+                break;
+            }
+        }
+
+        double ash = noiseGenAsh.func_806_a(x / 10.0D, z / 10.0D) + Math.abs(noiseGenAsh.func_806_a(-x / 100.0D, -z / 100.0D) / 2.0D) - 0.5D;
+        int lavaHeight = 4 + random.nextInt(3);
+        int ashHeight = (int)Math.ceil((4 + random.nextInt(3)) * Math.min(ash, 1.0D));
+        int ashHeightWorld = 90 + random.nextInt(10);
+
+        int chunkX = x & 15;
+        int chunkZ = z & 15;
+
+        for(int y = 0, index = chunkX << 12 | chunkZ << 8; y < 256; ++y, ++index) {
+            if (i15 == -1 && (blocks[index] == Block.waterStill.blockID
+                    || blocks[index] == Block.waterMoving.blockID
+                    || (y > 61 && blocks[index] == 0))) {
+                i15 = i15a;
+            }
+
+            if (i15 > 0) {
+                int block = Block.stone.blockID;
+
+                if (y > 61 && i15 <= lavaHeight && Math.abs(noiseGenLava.func_806_a(x / 15.0D, z / 15.0D)) < y / 24.0D * 0.1D) {
+                    block = Block.lavaMoving.blockID;
+                }
+
+                if (ash > 0.0D && y < ashHeightWorld && i15 <= ashHeight) {
+                    block = Block.ash.blockID;
+                }
+
+                blocks[index] = (byte)block;
+                i15--;
+            }
+
+            if (blocks[index] == Block.stone.blockID) {
+                metadata[index] = 3;
+            }
+        }
+    }
+
+    public void func_35477_a(World var1, Random var2, int var3, int var4) {
+        if(var2.nextInt(4) == 0) {
+			int x = var3 + var2.nextInt(16) + 8;
+			int y = var1.getHeightValue(var3, var4);
+			int z = var4 + var2.nextInt(16) + 8;
+            (new WorldGenLakes(Block.lavaStill.blockID)).generate(var1, var2, x, y, z);
+		}
+
+        new WorldGenUndergroundLava().generate(var1, var2, var3 + 8, 60, var4 + 8);
+
+        super.func_35477_a(var1, var2, var3, var4);
+
+        WorldGenerator gen = new WorldGenMinable(Block.oreDiamond.blockID, 8).inheritStoneType();
+        for(int var5 = 0; var5 < 1; ++var5) {
+			int var6 = var3 + var2.nextInt(16);
+			int var7 = var2.nextInt(32);
+			int var8 = var4 + var2.nextInt(16);
+			gen.generate(var1, var2, var6, var7, var8);
+		}
+    }
+}
--- net/minecraft/src/StructureMineshaftStart.java
+++ net/minecraft/src/StructureMineshaftStart.java
@@ -8,6 +8,15 @@
 		this.field_35717_a.add(var5);
 		var5.func_35004_a(var5, this.field_35717_a, var2);
 		this.func_35714_b();
-		this.func_35713_a(var1, var2, 10);
+		BiomeGenBase biome = var1.getWorldChunkManager().getBiomeGenAt(var3 << 4, var4 << 4);
+		if (biome instanceof BiomeGenBadlands && var2.nextInt(2) == 0) {
+			int offset = var2.nextInt(16);
+			this.field_35716_b.func_35745_a(0, offset, 0);
+			for (Object component : this.field_35717_a) {
+				((StructureComponent)component).func_35021_b().func_35745_a(0, offset, 0);
+			}
+		} else {
+			this.func_35713_a(var1, var2, 10);
+		}
 	}
 }
--- net/minecraft/src/BlockRedstoneOre.java
+++ net/minecraft/src/BlockRedstoneOre.java
@@ -2,7 +2,7 @@
 
 import java.util.Random;
 
-public class BlockRedstoneOre extends Block {
+public class BlockRedstoneOre extends BlockMultitype {
 	private boolean glowing;
 
 	public BlockRedstoneOre(int var1, int var2, boolean var3) {
@@ -36,14 +36,14 @@
 	private void func_320_h(World var1, int var2, int var3, int var4) {
 		this.func_319_i(var1, var2, var3, var4);
 		if(this.blockID == Block.oreRedstone.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.oreRedstoneGlowing.blockID);
+			var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.oreRedstoneGlowing.blockID, var1.getBlockMetadata(var2, var3, var4));
 		}
 
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
 		if(this.blockID == Block.oreRedstoneGlowing.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.oreRedstone.blockID);
+			var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.oreRedstone.blockID, var1.getBlockMetadata(var2, var3, var4));
 		}
 
 	}
@@ -54,6 +54,10 @@
 
 	public int quantityDropped(Random var1) {
 		return 4 + var1.nextInt(2);
+	}
+
+	protected int damageDropped(int var1) {
+		return 0;
 	}
 
 	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
--- net/minecraft/src/RecipesDyes.java
+++ net/minecraft/src/RecipesDyes.java
@@ -3,7 +3,9 @@
 public class RecipesDyes {
 	public void addRecipes(CraftingManager var1) {
 		for(int var2 = 0; var2 < 16; ++var2) {
-			var1.addShapelessRecipe(new ItemStack(Block.cloth, 1, BlockCloth.getDyeFromBlock(var2)), new Object[]{new ItemStack(Item.dyePowder, 1, var2), new ItemStack(Item.itemsList[Block.cloth.blockID], 1, 0)});
+			var1.addShapelessRecipe(new ItemStack(Block.cloth, 1, BlockCloth.getDyeFromBlock(var2)), new Object[]{new ItemStack(Item.dyePowder, 1, var2), Block.cloth});
+			var1.addShapelessRecipe(new ItemStack(Block.hardenedClay, 1, BlockCloth.getDyeFromBlock(var2)), new Object[]{new ItemStack(Item.dyePowder, 1, var2), Block.hardenedClay});
+			var1.addShapelessRecipe(new ItemStack(Block.coral, 1, BlockCloth.getDyeFromBlock(var2)), new Object[]{new ItemStack(Item.dyePowder, 1, var2), Block.coral});
 		}
 
 		var1.addShapelessRecipe(new ItemStack(Item.dyePowder, 2, 11), new Object[]{Block.plantYellow});
--- net/minecraft/src/BlockDeadBush.java
+++ net/minecraft/src/BlockDeadBush.java
@@ -10,7 +10,7 @@
 	}
 
 	protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-		return var1 == Block.sand.blockID;
+		return var1 == Block.sand.blockID || var1 == Block.hardenedClay.blockID;
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
--- net/minecraft/src/GuiIngame.java
+++ net/minecraft/src/GuiIngame.java
@@ -20,9 +20,13 @@
 	private boolean recordIsPlaying = false;
 	public float damageGuiPartialTime;
 	float prevVignetteBrightness = 1.0F;
+	private float sunBrightness;
+	private float sunBrightnessPrev;
+	private final GuiDebug debugMenu;
 
 	public GuiIngame(Minecraft var1) {
 		this.mc = var1;
+		this.debugMenu = new GuiDebug(this.mc);
 	}
 
 	public void renderGameOverlay(float var1, boolean var2, int var3, int var4) {
@@ -33,7 +37,7 @@
 		this.mc.entityRenderer.func_905_b();
 		GL11.glEnable(GL11.GL_BLEND);
 		if(Minecraft.isFancyGraphicsEnabled()) {
-			this.renderVignette(this.mc.thePlayer.getEntityBrightness(var1), var6, var7);
+			this.renderVignette(this.mc.thePlayer.getEntityBrightness(var1), var6, var7, var1);
 		}
 
 		ItemStack var9 = this.mc.thePlayer.inventory.armorItemInSlot(3);
@@ -175,7 +179,11 @@
 					}
 
 					if(this.mc.thePlayer.func_35191_at().func_35760_d() <= 0.0F && this.updateCounter % (var16 * 3 + 1) == 0) {
-						var26 = var47 + (this.rand.nextInt(3) - 1);
+						var26 += (this.rand.nextInt(3) - 1);
+					}
+
+					if(this.mc.thePlayer.isThirstDraining() && this.updateCounter % 2 == 0) {
+						var26 -= this.rand.nextInt(2);
 					}
 
 					if(var14) {
@@ -254,32 +262,9 @@
 
 		String var45;
 		if(this.mc.gameSettings.showDebugInfo) {
-			GL11.glPushMatrix();
-			if(Minecraft.hasPaidCheckTime > 0L) {
-				GL11.glTranslatef(0.0F, 32.0F, 0.0F);
-			}
-
-			var8.drawStringWithShadow("Minecraft Beta 1.8.1 (" + this.mc.debug + ")", 2, 2, 16777215);
-			var8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 12, 16777215);
-			var8.drawStringWithShadow(this.mc.func_6262_n(), 2, 22, 16777215);
-			var8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 32, 16777215);
-			var8.drawStringWithShadow(this.mc.func_21002_o(), 2, 42, 16777215);
-			long var32 = Runtime.getRuntime().maxMemory();
-			long var35 = Runtime.getRuntime().totalMemory();
-			long var38 = Runtime.getRuntime().freeMemory();
-			long var43 = var35 - var38;
-			var45 = "Used memory: " + var43 * 100L / var32 + "% (" + var43 / 1024L / 1024L + "MB) of " + var32 / 1024L / 1024L + "MB";
-			this.drawString(var8, var45, var6 - var8.getStringWidth(var45) - 2, 2, 14737632);
-			var45 = "Allocated memory: " + var35 * 100L / var32 + "% (" + var35 / 1024L / 1024L + "MB)";
-			this.drawString(var8, var45, var6 - var8.getStringWidth(var45) - 2, 12, 14737632);
-			this.drawString(var8, "x: " + this.mc.thePlayer.posX, 2, 64, 14737632);
-			this.drawString(var8, "y: " + this.mc.thePlayer.posY, 2, 72, 14737632);
-			this.drawString(var8, "z: " + this.mc.thePlayer.posZ, 2, 80, 14737632);
-			this.drawString(var8, "f: " + (MathHelper.floor_double((double)(this.mc.thePlayer.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3), 2, 88, 14737632);
-			this.drawString(var8, "Seed: " + this.mc.theWorld.getRandomSeed(), 2, 104, 14737632);
-			GL11.glPopMatrix();
+			this.debugMenu.drawDebugScreen(var6, var7);
 		} else {
-			var8.drawStringWithShadow("Minecraft Beta 1.8.1", 2, 2, 16777215);
+			var8.drawStringWithShadow("Tropical Adventure 1.0.1", 2, 2, 16777215);
 		}
 
 		if(this.recordPlayingUpFor > 0) {
@@ -430,7 +415,7 @@
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 	}
 
-	private void renderVignette(float var1, int var2, int var3) {
+	private void renderVignette(float var1, int var2, int var3, float var1a) {
 		var1 = 1.0F - var1;
 		if(var1 < 0.0F) {
 			var1 = 0.0F;
@@ -443,10 +428,10 @@
 		this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(var1 - this.prevVignetteBrightness) * 0.01D);
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
 		GL11.glDepthMask(false);
+		Tessellator var4 = Tessellator.instance;
 		GL11.glBlendFunc(GL11.GL_ZERO, GL11.GL_ONE_MINUS_SRC_COLOR);
-		GL11.glColor4f(this.prevVignetteBrightness, this.prevVignetteBrightness, this.prevVignetteBrightness, 1.0F);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("%blur%/misc/vignette.png"));
-		Tessellator var4 = Tessellator.instance;
+		GL11.glColor4f(this.prevVignetteBrightness, this.prevVignetteBrightness, this.prevVignetteBrightness, 1.0F);
 		var4.startDrawingQuads();
 		var4.addVertexWithUV(0.0D, (double)var3, -90.0D, 0.0D, 1.0D);
 		var4.addVertexWithUV((double)var2, (double)var3, -90.0D, 1.0D, 1.0D);
@@ -472,10 +457,10 @@
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, var1);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
-		float var4 = (float)(Block.portal.blockIndexInTexture % 16) / 16.0F;
-		float var5 = (float)(Block.portal.blockIndexInTexture / 16) / 16.0F;
-		float var6 = (float)(Block.portal.blockIndexInTexture % 16 + 1) / 16.0F;
-		float var7 = (float)(Block.portal.blockIndexInTexture / 16 + 1) / 16.0F;
+		float var4 = (float)(Block.portal.blockIndexInTexture % 16) / 32.0F;
+		float var5 = (float)(Block.portal.blockIndexInTexture / 16) / 32.0F;
+		float var6 = (float)(Block.portal.blockIndexInTexture % 16 + 1) / 32.0F;
+		float var7 = (float)(Block.portal.blockIndexInTexture / 16 + 1) / 32.0F;
 		Tessellator var8 = Tessellator.instance;
 		var8.startDrawingQuads();
 		var8.addVertexWithUV(0.0D, (double)var3, -90.0D, (double)var4, (double)var7);
@@ -521,6 +506,8 @@
 			++((ChatLine)this.chatMessageList.get(var1)).updateCounter;
 		}
 
+		this.updateSunBrightness();
+
 	}
 
 	public void clearChatMessages() {
@@ -555,5 +542,64 @@
 		StringTranslate var2 = StringTranslate.getInstance();
 		String var3 = var2.translateKey(var1);
 		this.addChatMessage(var3);
+	}
+
+	private void updateSunBrightness() {
+		if (this.mc.theWorld == null) return;
+
+		EntityPlayerSP var1 = (EntityPlayerSP)this.mc.renderViewEntity;
+		int l = 15;
+		if (var1.posY < 128 && var1.posY > 0) {
+			l = this.mc.theWorld.getSavedLightValue(EnumSkyBlock.Sky, MathHelper.floor_double(var1.posX), MathHelper.floor_double(var1.posY), MathHelper.floor_double(var1.posZ));
+		}
+		l -= this.mc.theWorld.skylightSubtracted;
+		if (l < 0) l = 0;
+		if (l > 15) l = 15;
+
+		assert this.mc.theWorld.worldProvider != null;
+		float lf = this.mc.theWorld.worldProvider.lightBrightnessTable[l];
+		float b = Math.min(Math.max((1.0F - (1.0F - lf * 3.0F)), 0.0F), 1.0F);
+
+		if (this.mc.thePlayer.dimension == -1) {
+			b = 1.5F;
+		}
+
+		this.sunBrightnessPrev = this.sunBrightness;
+		this.sunBrightness += (b - this.sunBrightness) * 0.1F;
+	}
+
+	public void drawHeat(float var1) {
+		this.mc.entityRenderer.func_905_b();
+		ScaledResolution var2 = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
+		int var3 = var2.getScaledWidth();
+		int var4 = var2.getScaledHeight();
+		Tessellator var5 = Tessellator.instance;
+
+		GL11.glDisable(GL11.GL_DEPTH_TEST);
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glDepthMask(false);
+		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE);
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
+		float b = this.sunBrightnessPrev + (this.sunBrightness - this.sunBrightnessPrev) * var1;
+		GL11.glColor4f(0.25F * b, 0.18F * b, 0.1F * b, 1.0F);
+		var5.startDrawingQuads();
+		var5.addVertexWithUV(0.0D, (double)var4, -90.0D, 0.0D, 1.0D);
+		var5.addVertexWithUV((double)var3, (double)var4, -90.0D, 1.0D, 1.0D);
+		var5.addVertexWithUV((double)var3, 0.0D, -90.0D, 1.0D, 0.0D);
+		var5.addVertexWithUV(0.0D, 0.0D, -90.0D, 0.0D, 0.0D);
+		var5.draw();
+		GL11.glBlendFunc(GL11.GL_DST_COLOR, GL11.GL_ONE_MINUS_SRC_ALPHA);
+		GL11.glColor4f(1.0F, 1.0F, 1.0F - b * 0.1F, 1.0F);
+		var5.startDrawingQuads();
+		var5.addVertexWithUV(0.0D, (double)var4, -90.0D, 0.0D, 1.0D);
+		var5.addVertexWithUV((double)var3, (double)var4, -90.0D, 1.0D, 1.0D);
+		var5.addVertexWithUV((double)var3, 0.0D, -90.0D, 1.0D, 0.0D);
+		var5.addVertexWithUV(0.0D, 0.0D, -90.0D, 0.0D, 0.0D);
+		var5.draw();
+		GL11.glDepthMask(true);
+		GL11.glEnable(GL11.GL_DEPTH_TEST);
+		GL11.glDisable(GL11.GL_BLEND);
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 	}
 }
--- net/minecraft/src/ItemHoe.java
+++ net/minecraft/src/ItemHoe.java
@@ -1,10 +1,8 @@
 package net.minecraft.src;
 
-public class ItemHoe extends Item {
+public class ItemHoe extends ItemTool {
 	public ItemHoe(int var1, EnumToolMaterial var2) {
-		super(var1);
-		this.maxStackSize = 1;
-		this.setMaxDamage(var2.getMaxUses());
+		super(var1, 0, var2, EnumTool.HOE);
 	}
 
 	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
--- net/minecraft/src/ComponentMineshaftRoom.java
+++ net/minecraft/src/ComponentMineshaftRoom.java
@@ -81,6 +81,11 @@
 		if(this.func_35013_a(var1, var3)) {
 			return false;
 		} else {
+			if (!this.isNotFloatingOrHasBlockAbove(var1, var3) ||
+					var1.getWorldChunkManager().getBiomeGenAt(var3.field_35753_a, var3.field_35752_c).field_35494_y == BiomeGenBase.volcanicIsland.field_35494_y) {
+				return false;
+			}
+
 			this.func_35011_a(var1, var3, this.field_35024_g.field_35753_a, this.field_35024_g.field_35751_b, this.field_35024_g.field_35752_c, this.field_35024_g.field_35749_d, this.field_35024_g.field_35751_b, this.field_35024_g.field_35748_f, Block.dirt.blockID, 0, true);
 			this.func_35011_a(var1, var3, this.field_35024_g.field_35753_a, this.field_35024_g.field_35751_b + 1, this.field_35024_g.field_35752_c, this.field_35024_g.field_35749_d, Math.min(this.field_35024_g.field_35751_b + 3, this.field_35024_g.field_35750_e), this.field_35024_g.field_35748_f, 0, 0, false);
 			Iterator var4 = this.field_35065_a.iterator();
--- net/minecraft/src/EntityFallingSand.java
+++ net/minecraft/src/EntityFallingSand.java
@@ -2,6 +2,7 @@
 
 public class EntityFallingSand extends Entity {
 	public int blockID;
+	public int blockMetadata;
 	public int fallTime = 0;
 
 	public EntityFallingSand(World var1) {
@@ -9,8 +10,13 @@
 	}
 
 	public EntityFallingSand(World var1, double var2, double var4, double var6, int var8) {
+		this(var1, var2, var4, var6, var8, 0);
+	}
+
+	public EntityFallingSand(World var1, double var2, double var4, double var6, int var8, int var9) {
 		super(var1);
 		this.blockID = var8;
+		this.blockMetadata = var9;
 		this.preventEntitySpawning = true;
 		this.setSize(0.98F, 0.98F);
 		this.yOffset = this.height / 2.0F;
@@ -59,11 +65,11 @@
 				this.motionZ *= (double)0.7F;
 				this.motionY *= -0.5D;
 				this.setEntityDead();
-				if((!this.worldObj.canBlockBePlacedAt(this.blockID, var1, var2, var3, true, 1) || BlockSand.canFallBelow(this.worldObj, var1, var2 - 1, var3) || !this.worldObj.setBlockWithNotify(var1, var2, var3, this.blockID)) && !this.worldObj.multiplayerWorld) {
-					this.dropItem(this.blockID, 1);
+				if((!this.worldObj.canBlockBePlacedAt(this.blockID, var1, var2, var3, true, 1) || BlockSand.canFallBelow(this.worldObj, var1, var2 - 1, var3) || !this.worldObj.setBlockAndMetadataWithNotify(var1, var2, var3, this.blockID, this.blockMetadata)) && !this.worldObj.multiplayerWorld) {
+					this.entityDropItem(new ItemStack(this.blockID, 1, this.blockMetadata), 0.0F);
 				}
 			} else if(this.fallTime > 100 && !this.worldObj.multiplayerWorld) {
-				this.dropItem(this.blockID, 1);
+				this.entityDropItem(new ItemStack(this.blockID, 1, this.blockMetadata), 0.0F);
 				this.setEntityDead();
 			}
 
--- net/minecraft/src/WorldGenSwamp.java
+++ net/minecraft/src/WorldGenSwamp.java
@@ -10,9 +10,7 @@
 
 		boolean var7 = true;
 		if(var4 >= 1) {
-			int var10000 = var4 + var6 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
+			if(var4 + var6 + 1 <= 256) {
 				int var8;
 				int var10;
 				int var11;
@@ -30,8 +28,7 @@
 					for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
 						for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
 							if(var8 >= 0) {
-								var1.getClass();
-								if(var8 < 128) {
+								if(var8 < 256) {
 									var12 = var1.getBlockId(var10, var8, var11);
 									if(var12 == 0 || var12 == Block.leaves.blockID) {
 										continue;
@@ -60,8 +57,7 @@
 
 				var8 = var1.getBlockId(var3, var4 - 1, var5);
 				if(var8 == Block.grass.blockID || var8 == Block.dirt.blockID) {
-					var1.getClass();
-					if(var4 < 128 - var6 - 1) {
+					if(var4 < 256 - var6 - 1) {
 						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
 
 						int var13;
--- net/minecraft/src/CraftingManager.java
+++ net/minecraft/src/CraftingManager.java
@@ -23,8 +23,14 @@
 		(new RecipesDyes()).addRecipes(this);
 		this.addRecipe(new ItemStack(Item.paper, 3), new Object[]{"###", Character.valueOf('#'), Item.reed});
 		this.addRecipe(new ItemStack(Item.book, 1), new Object[]{"#", "#", "#", Character.valueOf('#'), Item.paper});
-		this.addRecipe(new ItemStack(Block.fence, 2), new Object[]{"###", "###", Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Block.field_35277_bw, 1), new Object[]{"#W#", "#W#", Character.valueOf('#'), Item.stick, Character.valueOf('W'), Block.planks});
+		this.addRecipe(new ItemStack(Block.fence, 3, 0), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 0)});
+		this.addRecipe(new ItemStack(Block.fence, 3, 1), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 1)});
+		this.addRecipe(new ItemStack(Block.fence, 3, 2), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 2)});
+		this.addRecipe(new ItemStack(Block.fence, 3, 3), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 3)});
+		this.addRecipe(new ItemStack(Block.field_35277_bw, 1), new Object[]{"#W#", "#W#", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 0)});
+		this.addRecipe(new ItemStack(Block.palmFenceGate, 1), new Object[]{"#W#", "#W#", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 1)});
+		this.addRecipe(new ItemStack(Block.acaciaFenceGate, 1), new Object[]{"#W#", "#W#", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 2)});
+		this.addRecipe(new ItemStack(Block.wengeFenceGate, 1), new Object[]{"#W#", "#W#", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 3)});
 		this.addRecipe(new ItemStack(Block.jukebox, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.diamond});
 		this.addRecipe(new ItemStack(Block.music, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.redstone});
 		this.addRecipe(new ItemStack(Block.bookShelf, 1), new Object[]{"###", "XXX", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.book});
@@ -34,12 +40,24 @@
 		this.addRecipe(new ItemStack(Block.glowStone, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.lightStoneDust});
 		this.addRecipe(new ItemStack(Block.cloth, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.silk});
 		this.addRecipe(new ItemStack(Block.tnt, 1), new Object[]{"X#X", "#X#", "X#X", Character.valueOf('X'), Item.gunpowder, Character.valueOf('#'), Block.sand});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 3), new Object[]{"###", Character.valueOf('#'), Block.cobblestone});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 0), new Object[]{"###", Character.valueOf('#'), Block.stone});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 1), new Object[]{"###", Character.valueOf('#'), Block.sandStone});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 2), new Object[]{"###", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 4), new Object[]{"###", Character.valueOf('#'), Block.brick});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 5), new Object[]{"###", Character.valueOf('#'), Block.field_35285_bn});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 1), new Object[]{"###", Character.valueOf('#'), Block.sandStone});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 4), new Object[]{"###", Character.valueOf('#'), Block.brick});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 0), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.stone, 1, 0)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 5), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.field_35285_bn, 1, 0)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 3), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 0)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 6), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.stone, 1, 1)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 9), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.field_35285_bn, 1, 4)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 12), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 1)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 7), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.stone, 1, 2)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 10), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.field_35285_bn, 1, 8)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 13), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 2)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 8), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.stone, 1, 3)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 11), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.field_35285_bn, 1, 12)});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 14), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 3)});
+		this.addRecipe(new ItemStack(Block.stairSingleWood, 6, 0), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 0)});
+		this.addRecipe(new ItemStack(Block.stairSingleWood, 6, 1), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 1)});
+		this.addRecipe(new ItemStack(Block.stairSingleWood, 6, 2), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 2)});
+		this.addRecipe(new ItemStack(Block.stairSingleWood, 6, 3), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 3)});
 		this.addRecipe(new ItemStack(Block.ladder, 2), new Object[]{"# #", "###", "# #", Character.valueOf('#'), Item.stick});
 		this.addRecipe(new ItemStack(Item.doorWood, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Block.trapdoor, 2), new Object[]{"###", "###", Character.valueOf('#'), Block.planks});
@@ -47,7 +65,10 @@
 		this.addRecipe(new ItemStack(Item.sign, 1), new Object[]{"###", "###", " X ", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.stick});
 		this.addRecipe(new ItemStack(Item.cake, 1), new Object[]{"AAA", "BEB", "CCC", Character.valueOf('A'), Item.bucketMilk, Character.valueOf('B'), Item.sugar, Character.valueOf('C'), Item.wheat, Character.valueOf('E'), Item.egg});
 		this.addRecipe(new ItemStack(Item.sugar, 1), new Object[]{"#", Character.valueOf('#'), Item.reed});
-		this.addRecipe(new ItemStack(Block.planks, 4), new Object[]{"#", Character.valueOf('#'), Block.wood});
+		this.addRecipe(new ItemStack(Block.planks, 4, 0), new Object[]{"#", Character.valueOf('#'), new ItemStack(Block.wood, 1, 0)});
+		this.addRecipe(new ItemStack(Block.planks, 4, 1), new Object[]{"#", Character.valueOf('#'), new ItemStack(Block.wood, 1, 1)});
+		this.addRecipe(new ItemStack(Block.planks, 4, 2), new Object[]{"#", Character.valueOf('#'), new ItemStack(Block.wood, 1, 2)});
+		this.addRecipe(new ItemStack(Block.planks, 4, 3), new Object[]{"#", Character.valueOf('#'), new ItemStack(Block.wood, 1, 3)});
 		this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Block.torchWood, 4), new Object[]{"X", "#", Character.valueOf('X'), Item.coal, Character.valueOf('#'), Item.stick});
 		this.addRecipe(new ItemStack(Block.torchWood, 4), new Object[]{"X", "#", Character.valueOf('X'), new ItemStack(Item.coal, 1, 1), Character.valueOf('#'), Item.stick});
@@ -63,11 +84,20 @@
 		this.addRecipe(new ItemStack(Item.bucketEmpty, 1), new Object[]{"# #", " # ", Character.valueOf('#'), Item.ingotIron});
 		this.addRecipe(new ItemStack(Item.flintAndSteel, 1), new Object[]{"A ", " B", Character.valueOf('A'), Item.ingotIron, Character.valueOf('B'), Item.flint});
 		this.addRecipe(new ItemStack(Item.bread, 1), new Object[]{"###", Character.valueOf('#'), Item.wheat});
-		this.addRecipe(new ItemStack(Block.stairCompactPlanks, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planks});
+		this.addRecipe(new ItemStack(Block.stairCompactPlanks, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 0)});
+		this.addRecipe(new ItemStack(Block.stairCompactPlanks1, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 1)});
+		this.addRecipe(new ItemStack(Block.stairCompactPlanks2, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 2)});
+		this.addRecipe(new ItemStack(Block.stairCompactPlanks3, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 3)});
 		this.addRecipe(new ItemStack(Item.fishingRod, 1), new Object[]{"  #", " #X", "# X", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.silk});
-		this.addRecipe(new ItemStack(Block.stairCompactCobblestone, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.cobblestone});
+		this.addRecipe(new ItemStack(Block.stairCompactCobblestone, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 0)});
+		this.addRecipe(new ItemStack(Block.stairCompactCobblestone1, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 1)});
+		this.addRecipe(new ItemStack(Block.stairCompactCobblestone2, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 2)});
+		this.addRecipe(new ItemStack(Block.stairCompactCobblestone3, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.cobblestone, 1, 3)});
 		this.addRecipe(new ItemStack(Block.field_35280_bx, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.brick});
-		this.addRecipe(new ItemStack(Block.field_35279_by, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.field_35285_bn});
+		this.addRecipe(new ItemStack(Block.field_35279_by, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.field_35285_bn, 1, 0)});
+		this.addRecipe(new ItemStack(Block.field_35279_by1, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.field_35285_bn, 1, 4)});
+		this.addRecipe(new ItemStack(Block.field_35279_by2, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.field_35285_bn, 1, 8)});
+		this.addRecipe(new ItemStack(Block.field_35279_by3, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.field_35285_bn, 1, 12)});
 		this.addRecipe(new ItemStack(Item.painting, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Block.cloth});
 		this.addRecipe(new ItemStack(Item.appleGold, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.blockGold, Character.valueOf('X'), Item.appleRed});
 		this.addRecipe(new ItemStack(Block.lever, 1), new Object[]{"X", "#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.stick});
@@ -83,6 +113,7 @@
 		this.addRecipe(new ItemStack(Block.pistonBase, 1), new Object[]{"TTT", "#X#", "#R#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.ingotIron, Character.valueOf('R'), Item.redstone, Character.valueOf('T'), Block.planks});
 		this.addRecipe(new ItemStack(Block.pistonStickyBase, 1), new Object[]{"S", "P", Character.valueOf('S'), Item.slimeBall, Character.valueOf('P'), Block.pistonBase});
 		this.addRecipe(new ItemStack(Item.bed, 1), new Object[]{"###", "XXX", Character.valueOf('#'), Block.cloth, Character.valueOf('X'), Block.planks});
+		this.addRecipe(new ItemStack(Item.glassBottle, 1), new Object[]{"# #", " # ", Character.valueOf('#'), Block.glass});
 		Collections.sort(this.recipes, new RecipeSorter(this));
 		System.out.println(this.recipes.size() + " recipes");
 	}
--- /dev/null
+++ net/minecraft/src/BlockHardenedClay.java
@@ -1,0 +1,40 @@
+package net.minecraft.src;
+
+public class BlockHardenedClay extends Block {
+	public static final int[] clayColors = {
+			0xffc9ab, // White
+			0xae5f2c, // Orange
+			0xb55499, // Magenta
+			0x63b0cc, // Light Blue
+			0xc09e39, // Yellow
+			0x5aad31, // Lime
+			0xd988bb, // Pink
+			0x614738, // Gray
+			0xa07d6a, // Light Gray
+			0x24616d, // Cyan
+			0x7744af, // Purple
+			0x324577, // Blue
+			0x683019, // Brown
+			0x406721, // Green
+			0xce593f, // Red
+			0x382b25, // Black
+	};
+
+	protected BlockHardenedClay(int var1, int var2, Material var3) {
+		super(var1, var2, var3);
+	}
+
+	public int getRenderColor(int var1) {
+		if (var1 < 0 || var1 > 15) var1 = 0;
+		return clayColors[var1];
+	}
+
+	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
+		int meta = var1.getBlockMetadata(var2, var3, var4);
+		return clayColors[meta];
+	}
+
+	protected int damageDropped(int var1) {
+		return var1;
+	}
+}
--- net/minecraft/src/StructureComponent.java
+++ net/minecraft/src/StructureComponent.java
@@ -321,6 +321,40 @@
 
 	}
 
+	protected void func_35011_ametadata(World var1, StructureBoundingBox var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9, int var10, boolean var11, int metadata) {
+		for(int var12 = var4; var12 <= var7; ++var12) {
+			for(int var13 = var3; var13 <= var6; ++var13) {
+				for(int var14 = var5; var14 <= var8; ++var14) {
+					if(!var11 || this.func_35007_a(var1, var13, var12, var14, var2) != 0) {
+						if(var12 != var4 && var12 != var7 && var13 != var3 && var13 != var6 && var14 != var5 && var14 != var8) {
+							this.func_35018_a(var1, var10, metadata, var13, var12, var14, var2);
+						} else {
+							this.func_35018_a(var1, var9, metadata, var13, var12, var14, var2);
+						}
+					}
+				}
+			}
+		}
+
+	}
+
+	protected void func_35011_air(World var1, StructureBoundingBox var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9, int var10, int metadata) {
+		for(int var12 = var4; var12 <= var7; ++var12) {
+			for(int var13 = var3; var13 <= var6; ++var13) {
+				for(int var14 = var5; var14 <= var8; ++var14) {
+					if(this.func_35007_a(var1, var13, var12, var14, var2) == 0) {
+						if(var12 != var4 && var12 != var7 && var13 != var3 && var13 != var6 && var14 != var5 && var14 != var8) {
+							this.func_35018_a(var1, var10, metadata, var13, var12, var14, var2);
+						} else {
+							this.func_35018_a(var1, var9, metadata, var13, var12, var14, var2);
+						}
+					}
+				}
+			}
+		}
+
+	}
+
 	protected void func_35022_a(World var1, StructureBoundingBox var2, int var3, int var4, int var5, int var6, int var7, int var8, boolean var9, Random var10, StructurePieceBlockSelector var11) {
 		for(int var12 = var4; var12 <= var7; ++var12) {
 			for(int var13 = var3; var13 <= var6; ++var13) {
@@ -454,5 +488,50 @@
 			ItemDoor.func_35434_a(var1, var8, var9, var10, var7, Block.doorWood);
 		}
 
+	}
+
+	protected boolean isNotFloatingOrHasBlockAbove(World world, StructureBoundingBox boundingBox) {
+		int worldY = this.func_35008_a(boundingBox.field_35751_b);
+		worldY = worldY == 0 ? this.field_35024_g.field_35751_b : worldY;
+
+		if (world.getBlockId(boundingBox.field_35753_a, worldY, boundingBox.field_35752_c) == 0 || //minX, minZ
+				world.getBlockId(boundingBox.field_35749_d, worldY, boundingBox.field_35752_c) == 0 || //maxX, minZ
+				world.getBlockId(boundingBox.field_35753_a, worldY, boundingBox.field_35748_f) == 0 || //minX, maxZ
+				world.getBlockId(boundingBox.field_35749_d, worldY, boundingBox.field_35748_f) == 0) { //maxX, maxZ
+
+			boolean hasBlockAbove = false;
+
+			for (int i = worldY; i < 256; i++) {
+				if (world.getBlockId(boundingBox.field_35753_a, i, boundingBox.field_35752_c) != 0 && //minX, minZ
+						world.getBlockId(boundingBox.field_35749_d, i, boundingBox.field_35752_c) != 0 && //maxX, minZ
+						world.getBlockId(boundingBox.field_35753_a, i, boundingBox.field_35748_f) != 0 && //minX, maxZ
+						world.getBlockId(boundingBox.field_35749_d, i, boundingBox.field_35748_f) != 0) { //maxX, maxZ
+
+					hasBlockAbove = true;
+					break;
+				}
+			}
+
+			return hasBlockAbove;
+		}
+
+		return true;
+	}
+
+	protected boolean beamNoBurn(World world, int x, int y, int z, StructureBoundingBox box) {
+		int offX = this.func_35017_a(x, z);
+		int offY = this.func_35008_a(y);
+		int offZ = this.func_35006_b(x, z);
+
+		if (!box.func_35742_b(offX, offY, offZ)) {
+			return false;
+		}
+
+		while (offY > 0 && world.isAirBlock(offX, offY, offZ)) {
+			offY--;
+		}
+
+		Material material = world.getBlockMaterial(offX, offY, offZ);
+		return material != Material.lava;
 	}
 }
--- net/minecraft/src/ChunkProviderSky.java
+++ net/minecraft/src/ChunkProviderSky.java
@@ -75,14 +75,8 @@
 						double var39 = (var20 - var16) * var31;
 
 						for(int var41 = 0; var41 < 8; ++var41) {
-							int var10000 = var41 + var9 * 8;
-							this.worldObj.getClass();
-							var10000 <<= 11;
-							int var10001 = 0 + var10 * 8;
-							this.worldObj.getClass();
-							int var42 = var10000 | var10001 << 7 | var11 * 4 + var30;
-							this.worldObj.getClass();
-							int var43 = 1 << 7;
+							int var42 = (var41 + var9 * 8) << 12 | (0 + var10 * 8) << 8 | var11 * 4 + var30;
+							int var43 = 1 << 8;
 							double var44 = 0.125D;
 							double var46 = var33;
 							double var48 = (var35 - var33) * var44;
@@ -130,10 +124,10 @@
 				byte var13 = var9.fillerBlock;
 				this.worldObj.getClass();
 
-				for(int var14 = 127; var14 >= 0; --var14) {
+				for(int var14 = 255; var14 >= 0; --var14) {
 					int var10000 = var8 * 16 + var7;
 					this.worldObj.getClass();
-					int var15 = var10000 * 128 + var14;
+					int var15 = var10000 * 256 + var14;
 					byte var16 = var3[var15];
 					if(var16 == 0) {
 						var11 = -1;
@@ -172,12 +166,12 @@
 	public Chunk provideChunk(int var1, int var2) {
 		this.random.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
 		this.worldObj.getClass();
-		byte[] var3 = new byte[16 * 128 * 16];
+		byte[] var3 = new byte[16 * 256 * 16];
 		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
 		this.field_28075_v = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.field_28075_v, var1 * 16, var2 * 16, 16, 16);
 		this.generateTerrain(var1, var2, var3, this.field_28075_v);
 		this.replaceBlocksForBiome(var1, var2, var3, this.field_28075_v);
-		this.caveGen.generate(this, this.worldObj, var1, var2, var3);
+		this.caveGen.generate(this, this.worldObj, var1, var2, var3, var3);
 		var4.generateSkylightMap();
 		return var4;
 	}
--- net/minecraft/src/PanelCrashReport.java
+++ net/minecraft/src/PanelCrashReport.java
@@ -25,7 +25,7 @@
 		try {
 			var5 = var5 + "Generated " + (new SimpleDateFormat()).format(new Date()) + "\n";
 			var5 = var5 + "\n";
-			var5 = var5 + "Minecraft: Minecraft Beta 1.8.1\n";
+			var5 = var5 + "Minecraft: Tropical Adventure 1.0.1\n";
 			var5 = var5 + "OS: " + System.getProperty("os.name") + " (" + System.getProperty("os.arch") + ") version " + System.getProperty("os.version") + "\n";
 			var5 = var5 + "Java: " + System.getProperty("java.version") + ", " + System.getProperty("java.vendor") + "\n";
 			var5 = var5 + "VM: " + System.getProperty("java.vm.name") + " (" + System.getProperty("java.vm.info") + "), " + System.getProperty("java.vm.vendor") + "\n";
--- net/minecraft/src/BlockChest.java
+++ net/minecraft/src/BlockChest.java
@@ -20,282 +20,124 @@
 
 	public void onBlockAdded(World var1, int var2, int var3, int var4) {
 		super.onBlockAdded(var1, var2, var3, var4);
-		this.func_35306_h(var1, var2, var3, var4);
-		int var5 = var1.getBlockId(var2, var3, var4 - 1);
-		int var6 = var1.getBlockId(var2, var3, var4 + 1);
-		int var7 = var1.getBlockId(var2 - 1, var3, var4);
-		int var8 = var1.getBlockId(var2 + 1, var3, var4);
-		if(var5 == this.blockID) {
-			this.func_35306_h(var1, var2, var3, var4 - 1);
-		}
-
-		if(var6 == this.blockID) {
-			this.func_35306_h(var1, var2, var3, var4 + 1);
-		}
-
-		if(var7 == this.blockID) {
-			this.func_35306_h(var1, var2 - 1, var3, var4);
-		}
-
-		if(var8 == this.blockID) {
-			this.func_35306_h(var1, var2 + 1, var3, var4);
-		}
-
-	}
-
-	public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLiving var5) {
-		int var6 = var1.getBlockId(var2, var3, var4 - 1);
-		int var7 = var1.getBlockId(var2, var3, var4 + 1);
-		int var8 = var1.getBlockId(var2 - 1, var3, var4);
-		int var9 = var1.getBlockId(var2 + 1, var3, var4);
-		byte var10 = 0;
-		int var11 = MathHelper.floor_double((double)(var5.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
-		if(var11 == 0) {
-			var10 = 2;
-		}
-
-		if(var11 == 1) {
-			var10 = 5;
-		}
-
-		if(var11 == 2) {
-			var10 = 3;
-		}
-
-		if(var11 == 3) {
-			var10 = 4;
-		}
-
-		if(var6 != this.blockID && var7 != this.blockID && var8 != this.blockID && var9 != this.blockID) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var10);
-		} else {
-			if((var6 == this.blockID || var7 == this.blockID) && (var10 == 4 || var10 == 5)) {
-				if(var6 == this.blockID) {
-					var1.setBlockMetadataWithNotify(var2, var3, var4 - 1, var10);
-				} else {
-					var1.setBlockMetadataWithNotify(var2, var3, var4 + 1, var10);
-				}
-
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var10);
-			}
-
-			if((var8 == this.blockID || var9 == this.blockID) && (var10 == 2 || var10 == 3)) {
-				if(var8 == this.blockID) {
-					var1.setBlockMetadataWithNotify(var2 - 1, var3, var4, var10);
-				} else {
-					var1.setBlockMetadataWithNotify(var2 + 1, var3, var4, var10);
-				}
-
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var10);
-			}
-		}
-
-	}
-
-	public void func_35306_h(World var1, int var2, int var3, int var4) {
-		if(!var1.multiplayerWorld) {
-			int var5 = var1.getBlockId(var2, var3, var4 - 1);
-			int var6 = var1.getBlockId(var2, var3, var4 + 1);
-			int var7 = var1.getBlockId(var2 - 1, var3, var4);
-			int var8 = var1.getBlockId(var2 + 1, var3, var4);
-			boolean var9 = true;
-			int var10;
-			int var11;
-			boolean var12;
-			byte var13;
-			int var14;
-			if(var5 != this.blockID && var6 != this.blockID) {
-				if(var7 != this.blockID && var8 != this.blockID) {
-					var13 = 3;
-					if(Block.opaqueCubeLookup[var5] && !Block.opaqueCubeLookup[var6]) {
-						var13 = 3;
-					}
-
-					if(Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var5]) {
-						var13 = 2;
-					}
-
-					if(Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var8]) {
-						var13 = 5;
-					}
-
-					if(Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var7]) {
-						var13 = 4;
-					}
-				} else {
-					var10 = var1.getBlockId(var7 == this.blockID ? var2 - 1 : var2 + 1, var3, var4 - 1);
-					var11 = var1.getBlockId(var7 == this.blockID ? var2 - 1 : var2 + 1, var3, var4 + 1);
-					var13 = 3;
-					var12 = true;
-					if(var7 == this.blockID) {
-						var14 = var1.getBlockMetadata(var2 - 1, var3, var4);
-					} else {
-						var14 = var1.getBlockMetadata(var2 + 1, var3, var4);
-					}
-
-					if(var14 == 2) {
-						var13 = 2;
-					}
-
-					if((Block.opaqueCubeLookup[var5] || Block.opaqueCubeLookup[var10]) && !Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var11]) {
-						var13 = 3;
-					}
-
-					if((Block.opaqueCubeLookup[var6] || Block.opaqueCubeLookup[var11]) && !Block.opaqueCubeLookup[var5] && !Block.opaqueCubeLookup[var10]) {
-						var13 = 2;
-					}
-				}
-			} else {
-				var10 = var1.getBlockId(var2 - 1, var3, var5 == this.blockID ? var4 - 1 : var4 + 1);
-				var11 = var1.getBlockId(var2 + 1, var3, var5 == this.blockID ? var4 - 1 : var4 + 1);
-				var13 = 5;
-				var12 = true;
-				if(var5 == this.blockID) {
-					var14 = var1.getBlockMetadata(var2, var3, var4 - 1);
-				} else {
-					var14 = var1.getBlockMetadata(var2, var3, var4 + 1);
-				}
-
-				if(var14 == 4) {
-					var13 = 4;
-				}
-
-				if((Block.opaqueCubeLookup[var7] || Block.opaqueCubeLookup[var10]) && !Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var11]) {
-					var13 = 5;
-				}
-
-				if((Block.opaqueCubeLookup[var8] || Block.opaqueCubeLookup[var11]) && !Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var10]) {
-					var13 = 4;
-				}
-			}
-
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var13);
-		}
-	}
-
-	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		if(var5 == 1) {
-			return this.blockIndexInTexture - 1;
-		} else if(var5 == 0) {
-			return this.blockIndexInTexture - 1;
-		} else {
-			int var6 = var1.getBlockId(var2, var3, var4 - 1);
-			int var7 = var1.getBlockId(var2, var3, var4 + 1);
-			int var8 = var1.getBlockId(var2 - 1, var3, var4);
-			int var9 = var1.getBlockId(var2 + 1, var3, var4);
-			int var10;
-			int var11;
-			int var12;
-			byte var13;
-			if(var6 != this.blockID && var7 != this.blockID) {
-				if(var8 != this.blockID && var9 != this.blockID) {
-					byte var14 = 3;
-					if(Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var7]) {
-						var14 = 3;
-					}
-
-					if(Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var6]) {
-						var14 = 2;
-					}
-
-					if(Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var9]) {
-						var14 = 5;
-					}
-
-					if(Block.opaqueCubeLookup[var9] && !Block.opaqueCubeLookup[var8]) {
-						var14 = 4;
-					}
-
-					return var5 == var14 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
-				} else if(var5 != 4 && var5 != 5) {
-					var10 = 0;
-					if(var8 == this.blockID) {
-						var10 = -1;
-					}
-
-					var11 = var1.getBlockId(var8 == this.blockID ? var2 - 1 : var2 + 1, var3, var4 - 1);
-					var12 = var1.getBlockId(var8 == this.blockID ? var2 - 1 : var2 + 1, var3, var4 + 1);
-					if(var5 == 3) {
-						var10 = -1 - var10;
-					}
-
-					var13 = 3;
-					if((Block.opaqueCubeLookup[var6] || Block.opaqueCubeLookup[var11]) && !Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var12]) {
-						var13 = 3;
-					}
-
-					if((Block.opaqueCubeLookup[var7] || Block.opaqueCubeLookup[var12]) && !Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var11]) {
-						var13 = 2;
-					}
-
-					return (var5 == var13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + var10;
-				} else {
-					return this.blockIndexInTexture;
-				}
-			} else if(var5 != 2 && var5 != 3) {
-				var10 = 0;
-				if(var6 == this.blockID) {
-					var10 = -1;
-				}
-
-				var11 = var1.getBlockId(var2 - 1, var3, var6 == this.blockID ? var4 - 1 : var4 + 1);
-				var12 = var1.getBlockId(var2 + 1, var3, var6 == this.blockID ? var4 - 1 : var4 + 1);
-				if(var5 == 4) {
-					var10 = -1 - var10;
-				}
-
-				var13 = 5;
-				if((Block.opaqueCubeLookup[var8] || Block.opaqueCubeLookup[var11]) && !Block.opaqueCubeLookup[var9] && !Block.opaqueCubeLookup[var12]) {
-					var13 = 5;
-				}
-
-				if((Block.opaqueCubeLookup[var9] || Block.opaqueCubeLookup[var12]) && !Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var11]) {
-					var13 = 4;
-				}
-
-				return (var5 == var13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + var10;
-			} else {
-				return this.blockIndexInTexture;
-			}
-		}
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture - 1 : (var1 == 0 ? this.blockIndexInTexture - 1 : (var1 == 3 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture));
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		int var5 = 0;
-		if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
-			++var5;
-		}
-
-		if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
-			++var5;
-		}
-
-		if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
-			++var5;
-		}
-
-		if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
-			++var5;
-		}
-
-		return var5 > 1 ? false : (this.isThereANeighborChest(var1, var2 - 1, var3, var4) ? false : (this.isThereANeighborChest(var1, var2 + 1, var3, var4) ? false : (this.isThereANeighborChest(var1, var2, var3, var4 - 1) ? false : !this.isThereANeighborChest(var1, var2, var3, var4 + 1))));
-	}
-
-	private boolean isThereANeighborChest(World var1, int var2, int var3, int var4) {
-		return var1.getBlockId(var2, var3, var4) != this.blockID ? false : (var1.getBlockId(var2 - 1, var3, var4) == this.blockID ? true : (var1.getBlockId(var2 + 1, var3, var4) == this.blockID ? true : (var1.getBlockId(var2, var3, var4 - 1) == this.blockID ? true : var1.getBlockId(var2, var3, var4 + 1) == this.blockID)));
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		TileEntityChest var6 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
-		if(var6 != null) {
-			var6.func_35144_b();
-		}
-
+		this.validateChest(var1, var2, var3, var4);
+	}
+
+	public void onBlockPlacedBy(World world, int x, int y, int z, EntityLiving entityliving) {
+		int l1 = MathHelper.floor_double((double)((entityliving.rotationYaw * 4F) / 360F) + 0.5D) & 3;
+		float var4 = 1.0F;
+		float var5 = entityliving.prevRotationPitch + (entityliving.rotationPitch - entityliving.prevRotationPitch) * var4;
+		float var6 = entityliving.prevRotationYaw + (entityliving.rotationYaw - entityliving.prevRotationYaw) * var4;
+		double var7 = entityliving.prevPosX + (entityliving.posX - entityliving.prevPosX) * (double)var4;
+		double var9 = entityliving.prevPosY + (entityliving.posY - entityliving.prevPosY) * (double)var4 + 1.62D - (double)entityliving.yOffset;
+		double var11 = entityliving.prevPosZ + (entityliving.posZ - entityliving.prevPosZ) * (double)var4;
+		Vec3D var13 = Vec3D.createVector(var7, var9, var11);
+		float var14 = MathHelper.cos(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
+		float var15 = MathHelper.sin(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
+		float var16 = -MathHelper.cos(-var5 * ((float)Math.PI / 180.0F));
+		float var17 = MathHelper.sin(-var5 * ((float)Math.PI / 180.0F));
+		float var18 = var15 * var16;
+		float var20 = var14 * var16;
+		double var21 = 5.0D;
+		Vec3D var23 = var13.addVector((double)var18 * var21, (double)var17 * var21, (double)var20 * var21);
+		MovingObjectPosition var24 = world.rayTraceBlocks_do(var13, var23, false);
+
+		int side = var24.sideHit;
+		int type = l1 | 8;
+
+		if (entityliving.isSneaking() && side != 0 && side != 1) {
+			int x2 = x;
+			int z2 = z;
+
+			if (side == 2) x2++;
+			if (side == 3) x2--;
+			if (side == 4) z2--;
+			if (side == 5) z2++;
+
+			int metadata = world.getBlockMetadata(x2, y, z2);
+
+			if ((metadata >> 3 & 1) == 1) {
+				int direction = metadata & 3;
+				if (direction == 0 || direction == 2) {
+					if (side == 2) {
+						world.setBlockMetadata(x2, y, z2, direction);
+						type = direction | 4;
+					}
+
+					if (side == 3) {
+						world.setBlockMetadata(x2, y, z2, direction | 4);
+						type = direction;
+					}
+				}
+
+				if (direction == 1 || direction == 3) {
+					if (side == 5) {
+						world.setBlockMetadata(x2, y, z2, direction);
+						type = direction | 4;
+					}
+
+					if (side == 4) {
+						world.setBlockMetadata(x2, y, z2, direction | 4);
+						type = direction;
+					}
+				}
+			}
+		} else if (!entityliving.isSneaking()) {
+			if (l1 == 0) {
+				if (hasSingleChestInDirection(world, x - 1, y, z, l1) && !hasSingleChestInDirection(world, x + 1, y, z, l1)) {
+					type = l1;
+					world.setBlockMetadata(x - 1, y, z, l1 | 4);
+				}
+
+				if (hasSingleChestInDirection(world, x + 1, y, z, l1) && !hasSingleChestInDirection(world, x - 1, y, z, l1)) {
+					type = l1 | 4;
+					world.setBlockMetadata(x + 1, y, z, l1);
+				}
+			}
+
+			if (l1 == 1) {
+				if (hasSingleChestInDirection(world, x, y, z - 1, l1) && !hasSingleChestInDirection(world, x, y, z + 1, l1)) {
+					type = l1;
+					world.setBlockMetadata(x, y, z - 1, l1 | 4);
+				}
+
+				if (hasSingleChestInDirection(world, x, y, z + 1, l1) && !hasSingleChestInDirection(world, x, y, z - 1, l1)) {
+					type = l1 | 4;
+					world.setBlockMetadata(x, y, z + 1, l1);
+				}
+			}
+
+			if (l1 == 2) {
+				if (hasSingleChestInDirection(world, x + 1, y, z, l1) && !hasSingleChestInDirection(world, x - 1, y, z, l1)) {
+					type = l1 | 4;
+					world.setBlockMetadata(x + 1, y, z, l1);
+				}
+
+				if (hasSingleChestInDirection(world, x - 1, y, z, l1) && !hasSingleChestInDirection(world, x + 1, y, z, l1)) {
+					type = l1;
+					world.setBlockMetadata(x - 1, y, z, l1 | 4);
+				}
+			}
+
+			if (l1 == 3) {
+				if (hasSingleChestInDirection(world, x, y, z + 1, l1) && !hasSingleChestInDirection(world, x, y, z - 1, l1)) {
+					type = l1 | 4;
+					world.setBlockMetadata(x, y, z + 1, l1);
+				}
+
+				if (hasSingleChestInDirection(world, x, y, z - 1, l1) && !hasSingleChestInDirection(world, x, y, z + 1, l1)) {
+					type = l1;
+					world.setBlockMetadata(x, y, z - 1, l1 | 4);
+				}
+			}
+		}
+
+		world.setBlockMetadata(x, y, z, type);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int blockId) {
+		super.onNeighborBlockChange(world, x, y, z, blockId);
+		validateChest(world, x, y, z);
 	}
 
 	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
@@ -330,41 +172,106 @@
 	}
 
 	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		Object var6 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
-		if(var6 == null) {
-			return true;
-		} else if(var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-			return true;
-		} else if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID && var1.isBlockNormalCube(var2 - 1, var3 + 1, var4)) {
-			return true;
-		} else if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID && var1.isBlockNormalCube(var2 + 1, var3 + 1, var4)) {
-			return true;
-		} else if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID && var1.isBlockNormalCube(var2, var3 + 1, var4 - 1)) {
-			return true;
-		} else if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID && var1.isBlockNormalCube(var2, var3 + 1, var4 + 1)) {
-			return true;
-		} else {
-			if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2 - 1, var3, var4), (IInventory)var6);
-			}
-
-			if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2 + 1, var3, var4));
-			}
-
-			if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 - 1), (IInventory)var6);
-			}
-
-			if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 + 1));
-			}
-
-			if(var1.multiplayerWorld) {
-				return true;
-			} else {
-				var5.displayGUIChest((IInventory)var6);
-				return true;
+		if(var1.multiplayerWorld) {
+			return true;
+		} else {
+			validateChest(var1, var2, var3, var4);
+			var5.displayGUIChest(getInventory(var1, var2, var3, var4));
+			return true;
+		}
+	}
+
+	public IInventory getInventory(World world, int x, int y, int z) {
+		IInventory inventory = (IInventory) world.getBlockTileEntity(x, y, z);
+
+		int metadata = world.getBlockMetadata(x, y, z);
+		int type = metadata >> 2;
+
+		if (type < 2) {
+			IInventory inventory1 = null;
+
+			int direction = metadata & 3;
+
+			int x2 = x;
+			int z2 = z;
+
+			if (direction == 0 || direction == 2) {
+				if (type > 0) x2++;
+				if (type == 0) x2--;
+			}
+			if (direction == 1 || direction == 3) {
+				if (type > 0) z2++;
+				if (type == 0) z2--;
+			}
+
+			if (Block.blocksList[world.getBlockId(x2, y, z2)] instanceof BlockChest) {
+				int metadata2 = world.getBlockMetadata(x2, y, z2);
+				if ((metadata2 & 3) == direction) {
+					int type2 = metadata2 >> 2;
+					if (type > 0 && type2 == 0) {
+						inventory1 = (IInventory) world.getBlockTileEntity(x2, y, z2);
+					}
+
+					if (type == 0 && type2 > 0) {
+						inventory1 = inventory;
+						inventory = (IInventory) world.getBlockTileEntity(x2, y, z2);
+					}
+				}
+			}
+
+			if (inventory1 != null) {
+				inventory = new InventoryLargeChest("Large chest", inventory, inventory1);
+			}
+		}
+
+		return inventory;
+	}
+
+	public boolean hasSingleChestInDirection(World world, int x, int y, int z, int direction) {
+		if (world.getBlockId(x, y, z) == blockID) {
+			int metadata = world.getBlockMetadata(x, y, z);
+			int direction_ = metadata & 3;
+			return direction_ == direction && (metadata >> 3 & 1) == 1;
+		} else {
+			return false;
+		}
+	}
+
+	public void validateChest(World world, int x, int y, int z) {
+		int metadata = world.getBlockMetadata(x, y, z);
+		if ((metadata >> 3 & 1) == 0) {
+			int direction = metadata & 3;
+			int type = metadata >> 2 & 1;
+
+			int x2 = x;
+			int z2 = z;
+
+			if (direction == 0 || direction == 2) {
+				if (type > 0) x2++;
+				if (type == 0) x2--;
+			}
+			if (direction == 1 || direction == 3) {
+				if (type > 0) z2++;
+				if (type == 0) z2--;
+			}
+
+			boolean valid = false;
+
+			if (Block.blocksList[world.getBlockId(x2, y, z2)] instanceof BlockChest) {
+				int metadata2 = world.getBlockMetadata(x2, y, z2);
+				int direction2 = metadata2 & 3;
+
+				if (direction2 == direction) {
+					int type2 = metadata2 >> 2 & 1;
+					if ((type == 0 && type2 > 0) || (type > 0 && type2 == 0)) {
+						valid = true;
+					}
+				}
+			}
+
+			if (!valid) {
+				world.setBlockMetadataWithNotify(x, y, z, direction | 8);
+				world.markBlocksDirty(x, y, z, x, y, z);
 			}
 		}
 	}
--- net/minecraft/src/BiomeGenTaiga.java
+++ net/minecraft/src/BiomeGenTaiga.java
@@ -7,10 +7,52 @@
 		super(var1);
 		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 8, 4, 4));
 		this.field_35488_u.field_35911_r = 10;
-		this.field_35488_u.field_35909_t = 1;
+		this.field_35488_u.field_35909_t = 2;
+		this.field_35488_u.field_35910_s = 4;
+		this.stoneBlockMetadata = 1;
 	}
 
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
-		return (WorldGenerator)(var1.nextInt(3) == 0 ? new WorldGenTaiga1() : new WorldGenTaiga2());
+		return var1.nextInt(3) == 0 ? this.field_35480_A : new WorldGenTrees(4 + var1.nextInt(7), 0, 0, true);
+	}
+
+	public WorldGenerator getRandomWorldGenForGrass(Random var1) {
+		return var1.nextInt(4) == 0 ? new WorldGenTallGrass(Block.tallGrass.blockID, 2) : new WorldGenTallGrass(Block.tallGrass.blockID, 1);
+	}
+
+	public void func_35477_a(World par1World, Random par2Random, int par3, int par4) {
+		super.func_35477_a(par1World, par2Random, par3, par4);
+		WorldGenerator worldGen = new WorldGenVines();
+
+		for (int i = 0; i < 50; i++) {
+			int j = par3 + par2Random.nextInt(16) + 8;
+			int byte0 = par2Random.nextInt(64);
+			int k = par4 + par2Random.nextInt(16) + 8;
+			worldGen.generate(par1World, par2Random, j, byte0, k);
+		}
+
+		worldGen = new WorldGenMinable(Block.cobblestoneMossy.blockID, 32);
+		for (int i = 0; i < 10; i++) {
+			int j = par3 + par2Random.nextInt(16);
+			int byte0 = par2Random.nextInt(64);
+			int k = par4 + par2Random.nextInt(16);
+			worldGen.generate(par1World, par2Random, j, byte0, k);
+		}
+
+		for(int i = 0; i < 9; ++i) {
+			int j = par3 + par2Random.nextInt(16) + 8;
+			int k = par2Random.nextInt(64);
+			int l = par4 + par2Random.nextInt(16) + 8;
+			WorldGenerator var5 = new WorldGenShrub(0, 0);
+			var5.generate(par1World, par2Random, j, k, l);
+		}
+
+		for(int i = 0; i < 6; ++i) {
+			int j = par3 + par2Random.nextInt(16) + 8;
+			int k = par2Random.nextInt(64);
+			int l = par4 + par2Random.nextInt(16) + 8;
+			WorldGenerator var5 = new WorldGenUndergroundTree();
+			var5.generate(par1World, par2Random, j, k, l);
+		}
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockAsh.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class BlockAsh extends BlockSand {
+	public BlockAsh(int var1, int var2) {
+		super(var1, var2);
+	}
+
+	protected int damageDropped(int var1) {
+		return 0;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.blockIndexInTexture;
+	}
+}
--- net/minecraft/src/EntityDiggingFX.java
+++ net/minecraft/src/EntityDiggingFX.java
@@ -29,10 +29,20 @@
 	}
 
 	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		float var8 = ((float)(this.particleTextureIndex % 16) + this.particleTextureJitterX / 4.0F) / 16.0F;
-		float var9 = var8 + 0.999F / 64.0F;
-		float var10 = ((float)(this.particleTextureIndex / 16) + this.particleTextureJitterY / 4.0F) / 16.0F;
-		float var11 = var10 + 0.999F / 64.0F;
+		int i1 = this.particleTextureIndex & 255;
+		float var8 = ((float)(i1 % 16) + this.particleTextureJitterX / 4.0F) / 32.0F;
+		float var9 = var8 + 0.999F / 128.0F;
+		float var10 = ((float)(i1 / 16) + this.particleTextureJitterY / 4.0F) / 32.0F;
+		float var11 = var10 + 0.999F / 128.0F;
+		int i2 = (this.particleTextureIndex >> 8) & 3;
+		if (i2 % 2 == 1) {
+			var8 += 0.5F;
+			var9 += 0.5F;
+		}
+		if (i2 / 2 == 1) {
+			var10 += 0.5F;
+			var11 += 0.5F;
+		}
 		float var12 = 0.1F * this.particleScale;
 		float var13 = (float)(this.prevPosX + (this.posX - this.prevPosX) * (double)var2 - interpPosX);
 		float var14 = (float)(this.prevPosY + (this.posY - this.prevPosY) * (double)var2 - interpPosY);
--- net/minecraft/src/Chunk.java
+++ net/minecraft/src/Chunk.java
@@ -18,7 +18,7 @@
 	public NibbleArray data;
 	public NibbleArray skylightMap;
 	public NibbleArray blocklightMap;
-	public byte[] heightMap;
+	public int[] heightMap;
 	public int lowestBlockHeight;
 	public final int xPosition;
 	public final int zPosition;
@@ -40,12 +40,11 @@
 		this.hasEntities = false;
 		this.lastSaveTime = 0L;
 		this.field_35846_u = false;
-		var1.getClass();
-		this.entities = new List[128 / 16];
+		this.entities = new List[256 / 16];
 		this.worldObj = var1;
 		this.xPosition = var2;
 		this.zPosition = var3;
-		this.heightMap = new byte[256];
+		this.heightMap = new int[256];
 
 		for(int var4 = 0; var4 < this.entities.length; ++var4) {
 			this.entities[var4] = new ArrayList();
@@ -57,15 +56,9 @@
 	public Chunk(World var1, byte[] var2, int var3, int var4) {
 		this(var1, var3, var4);
 		this.blocks = var2;
-		int var10003 = var2.length;
-		var1.getClass();
-		this.data = new NibbleArray(var10003, 7);
-		var10003 = var2.length;
-		var1.getClass();
-		this.skylightMap = new NibbleArray(var10003, 7);
-		var10003 = var2.length;
-		var1.getClass();
-		this.blocklightMap = new NibbleArray(var10003, 7);
+		this.data = new NibbleArray(var2.length, 8);
+        this.skylightMap = new NibbleArray(var2.length, 8);
+        this.blocklightMap = new NibbleArray(var2.length, 8);
 	}
 
 	public boolean isAtLocation(int var1, int var2) {
@@ -73,28 +66,23 @@
 	}
 
 	public int getHeightValue(int var1, int var2) {
-		return this.heightMap[var2 << 4 | var1] & 255;
+		return this.heightMap[var2 << 4 | var1];
 	}
 
 	public void func_1014_a() {
 	}
 
 	public void generateHeightMap() {
-		this.worldObj.getClass();
-		int var1 = 128 - 1;
+		int var1 = 256 - 1;
 
 		for(int var2 = 0; var2 < 16; ++var2) {
 			for(int var3 = 0; var3 < 16; ++var3) {
-				this.worldObj.getClass();
-				int var4 = 128 - 1;
-				this.worldObj.getClass();
-				int var10000 = var2 << 11;
-				this.worldObj.getClass();
+				int var4 = 256 - 1;
 
-				for(int var5 = var10000 | var3 << 7; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1] & 255] == 0; --var4) {
+				for(int var5 = var2 << 12 | var3 << 8; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1] & 255] == 0; --var4) {
 				}
 
-				this.heightMap[var3 << 4 | var2] = (byte)var4;
+				this.heightMap[var3 << 4 | var2] = var4;
 				if(var4 < var1) {
 					var1 = var4;
 				}
@@ -106,32 +94,26 @@
 	}
 
 	public void generateSkylightMap() {
-		this.worldObj.getClass();
-		int var1 = 128 - 1;
+		int var1 = 256 - 1;
 
 		int var2;
 		int var3;
 		for(var2 = 0; var2 < 16; ++var2) {
 			for(var3 = 0; var3 < 16; ++var3) {
-				this.worldObj.getClass();
-				int var4 = 128 - 1;
-				this.worldObj.getClass();
-				int var10000 = var2 << 11;
-				this.worldObj.getClass();
+				int var4 = 256 - 1;
 
 				int var5;
-				for(var5 = var10000 | var3 << 7; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1] & 255] == 0; --var4) {
+				for(var5 = var2 << 12 | var3 << 8; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1] & 255] == 0; --var4) {
 				}
 
-				this.heightMap[var3 << 4 | var2] = (byte)var4;
+				this.heightMap[var3 << 4 | var2] = var4;
 				if(var4 < var1) {
 					var1 = var4;
 				}
 
 				if(!this.worldObj.worldProvider.hasNoSky) {
 					int var6 = 15;
-					this.worldObj.getClass();
-					int var7 = 128 - 1;
+					int var7 = 256 - 1;
 
 					do {
 						var6 -= Block.lightOpacity[this.blocks[var5 + var7] & 255];
@@ -231,35 +213,30 @@
 	}
 
 	private void relightBlock(int var1, int var2, int var3) {
-		int var4 = this.heightMap[var3 << 4 | var1] & 255;
+		int var4 = this.heightMap[var3 << 4 | var1];
 		int var5 = var4;
 		if(var2 > var4) {
 			var5 = var2;
 		}
 
-		this.worldObj.getClass();
-		int var10000 = var1 << 11;
-		this.worldObj.getClass();
-
-		for(int var6 = var10000 | var3 << 7; var5 > 0 && Block.lightOpacity[this.blocks[var6 + var5 - 1] & 255] == 0; --var5) {
+		for(int var6 = var1 << 12 | var3 << 8; var5 > 0 && Block.lightOpacity[this.blocks[var6 + var5 - 1] & 255] == 0; --var5) {
 		}
 
 		if(var5 != var4) {
 			this.worldObj.markBlocksDirtyVertical(var1, var3, var5, var4);
-			this.heightMap[var3 << 4 | var1] = (byte)var5;
+			this.heightMap[var3 << 4 | var1] = var5;
 			int var7;
 			int var8;
 			int var9;
 			if(var5 < this.lowestBlockHeight) {
 				this.lowestBlockHeight = var5;
 			} else {
-				this.worldObj.getClass();
-				var7 = 128 - 1;
+				var7 = 256 - 1;
 
 				for(var8 = 0; var8 < 16; ++var8) {
 					for(var9 = 0; var9 < 16; ++var9) {
-						if((this.heightMap[var9 << 4 | var8] & 255) < var7) {
-							var7 = this.heightMap[var9 << 4 | var8] & 255;
+						if((this.heightMap[var9 << 4 | var8]) < var7) {
+							var7 = this.heightMap[var9 << 4 | var8];
 						}
 					}
 				}
@@ -292,7 +269,7 @@
 				}
 			}
 
-			byte var15 = this.heightMap[var3 << 4 | var1];
+			int var15 = this.heightMap[var3 << 4 | var1];
 			int var12 = var4;
 			int var13 = var15;
 			if(var15 < var4) {
@@ -310,11 +287,7 @@
 	}
 
 	public int getBlockID(int var1, int var2, int var3) {
-		byte[] var10000 = this.blocks;
-		this.worldObj.getClass();
-		int var10001 = var1 << 11;
-		this.worldObj.getClass();
-		return var10000[var10001 | var3 << 7 | var2] & 255;
+		return this.blocks[var1 << 12 | var3 << 8 | var2] & 255;
 	}
 
 	public boolean setBlockIDWithMetadata(int var1, int var2, int var3, int var4, int var5) {
@@ -324,22 +297,14 @@
 			this.field_35845_c[var7] = -999;
 		}
 
-		int var8 = this.heightMap[var3 << 4 | var1] & 255;
-		byte[] var10000 = this.blocks;
-		this.worldObj.getClass();
-		int var10001 = var1 << 11;
-		this.worldObj.getClass();
-		int var9 = var10000[var10001 | var3 << 7 | var2] & 255;
+		int var8 = this.heightMap[var3 << 4 | var1];
+		int var9 = this.blocks[var1 << 12 | var3 << 8 | var2] & 255;
 		if(var9 == var4 && this.data.getNibble(var1, var2, var3) == var5) {
 			return false;
 		} else {
 			int var10 = this.xPosition * 16 + var1;
 			int var11 = this.zPosition * 16 + var3;
-			var10000 = this.blocks;
-			this.worldObj.getClass();
-			var10001 = var1 << 11;
-			this.worldObj.getClass();
-			var10000[var10001 | var3 << 7 | var2] = (byte)(var6 & 255);
+			this.blocks[var1 << 12 | var3 << 8 | var2] = (byte)(var6 & 255);
 			if(var9 != 0 && !this.worldObj.multiplayerWorld) {
 				Block.blocksList[var9].onBlockRemoval(this.worldObj, var10, var2, var11);
 			}
@@ -396,22 +361,14 @@
 			this.field_35845_c[var6] = -999;
 		}
 
-		int var7 = this.heightMap[var6] & 255;
-		byte[] var10000 = this.blocks;
-		this.worldObj.getClass();
-		int var10001 = var1 << 11;
-		this.worldObj.getClass();
-		int var8 = var10000[var10001 | var3 << 7 | var2] & 255;
+		int var7 = this.heightMap[var6];
+		int var8 = this.blocks[var1 << 12 | var3 << 8 | var2] & 255;
 		if(var8 == var4) {
 			return false;
 		} else {
 			int var9 = this.xPosition * 16 + var1;
 			int var10 = this.zPosition * 16 + var3;
-			var10000 = this.blocks;
-			this.worldObj.getClass();
-			var10001 = var1 << 11;
-			this.worldObj.getClass();
-			var10000[var10001 | var3 << 7 | var2] = (byte)(var5 & 255);
+			this.blocks[var1 << 12 | var3 << 8 | var2] = (byte)(var5 & 255);
 			if(var8 != 0) {
 				Block.blocksList[var8].onBlockRemoval(this.worldObj, var9, var2, var10);
 			}
@@ -550,7 +507,7 @@
 	}
 
 	public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
-		return var2 >= (this.heightMap[var3 << 4 | var1] & 255);
+		return var2 >= (this.heightMap[var3 << 4 | var1]);
 	}
 
 	public TileEntity getChunkBlockTileEntity(int var1, int var2, int var3) {
@@ -712,13 +669,9 @@
 		int var10;
 		int var11;
 		int var12;
-		int var10000;
 		for(var9 = var2; var9 < var5; ++var9) {
 			for(var10 = var4; var10 < var7; ++var10) {
-				this.worldObj.getClass();
-				var10000 = var9 << 11;
-				this.worldObj.getClass();
-				var11 = var10000 | var10 << 7 | var3;
+				var11 = var9 << 12 | var10 << 8 | var3;
 				var12 = var6 - var3;
 				System.arraycopy(var1, var8, this.blocks, var11, var12);
 				var8 += var12;
@@ -729,10 +682,7 @@
 
 		for(var9 = var2; var9 < var5; ++var9) {
 			for(var10 = var4; var10 < var7; ++var10) {
-				this.worldObj.getClass();
-				var10000 = var9 << 11;
-				this.worldObj.getClass();
-				var11 = (var10000 | var10 << 7 | var3) >> 1;
+				var11 = (var9 << 12 | var10 << 8 | var3) >> 1;
 				var12 = (var6 - var3) / 2;
 				System.arraycopy(var1, var8, this.data.data, var11, var12);
 				var8 += var12;
@@ -741,10 +691,7 @@
 
 		for(var9 = var2; var9 < var5; ++var9) {
 			for(var10 = var4; var10 < var7; ++var10) {
-				this.worldObj.getClass();
-				var10000 = var9 << 11;
-				this.worldObj.getClass();
-				var11 = (var10000 | var10 << 7 | var3) >> 1;
+				var11 = (var9 << 12 | var10 << 8 | var3) >> 1;
 				var12 = (var6 - var3) / 2;
 				System.arraycopy(var1, var8, this.blocklightMap.data, var11, var12);
 				var8 += var12;
@@ -753,22 +700,17 @@
 
 		for(var9 = var2; var9 < var5; ++var9) {
 			for(var10 = var4; var10 < var7; ++var10) {
-				this.worldObj.getClass();
-				var10000 = var9 << 11;
-				this.worldObj.getClass();
-				var11 = (var10000 | var10 << 7 | var3) >> 1;
+				var11 = (var9 << 12 | var10 << 8 | var3) >> 1;
 				var12 = (var6 - var3) / 2;
 				System.arraycopy(var1, var8, this.skylightMap.data, var11, var12);
 				var8 += var12;
 			}
 		}
 
-		Iterator var13 = this.chunkTileEntityMap.values().iterator();
-
-		while(var13.hasNext()) {
-			TileEntity var14 = (TileEntity)var13.next();
-			var14.func_35144_b();
-		}
+        for (Object o : this.chunkTileEntityMap.values()) {
+            TileEntity var14 = (TileEntity) o;
+            var14.func_35144_b();
+        }
 
 		return var8;
 	}
@@ -808,8 +750,7 @@
 		int var3 = var1 | var2 << 4;
 		int var4 = this.field_35845_c[var3];
 		if(var4 == -999) {
-			this.worldObj.getClass();
-			int var5 = 128 - 1;
+			int var5 = 256 - 1;
 			var4 = -1;
 
 			while(true) {
--- net/minecraft/client/Minecraft.java
+++ net/minecraft/client/Minecraft.java
@@ -8,93 +8,8 @@
 import java.awt.Frame;
 import java.awt.Graphics;
 import java.io.File;
-import net.minecraft.src.AchievementList;
-import net.minecraft.src.AxisAlignedBB;
-import net.minecraft.src.Block;
-import net.minecraft.src.ChunkCoordinates;
-import net.minecraft.src.ChunkProviderLoadOrGenerate;
-import net.minecraft.src.ColorizerFoliage;
-import net.minecraft.src.ColorizerGrass;
-import net.minecraft.src.ColorizerWater;
-import net.minecraft.src.EffectRenderer;
-import net.minecraft.src.EntityClientPlayerMP;
-import net.minecraft.src.EntityLiving;
-import net.minecraft.src.EntityPlayer;
-import net.minecraft.src.EntityPlayerSP;
-import net.minecraft.src.EntityRenderer;
-import net.minecraft.src.EnumMovingObjectType;
-import net.minecraft.src.EnumOS2;
-import net.minecraft.src.EnumOSMappingHelper;
-import net.minecraft.src.EnumOptions;
-import net.minecraft.src.FontRenderer;
-import net.minecraft.src.GLAllocation;
-import net.minecraft.src.GameSettings;
-import net.minecraft.src.GameWindowListener;
-import net.minecraft.src.GuiAchievement;
-import net.minecraft.src.GuiChat;
-import net.minecraft.src.GuiConflictWarning;
-import net.minecraft.src.GuiConnecting;
-import net.minecraft.src.GuiErrorScreen;
-import net.minecraft.src.GuiGameOver;
-import net.minecraft.src.GuiIngame;
-import net.minecraft.src.GuiIngameMenu;
-import net.minecraft.src.GuiInventory;
-import net.minecraft.src.GuiMainMenu;
-import net.minecraft.src.GuiScreen;
-import net.minecraft.src.GuiSleepMP;
-import net.minecraft.src.GuiUnused;
-import net.minecraft.src.IChunkProvider;
-import net.minecraft.src.ISaveFormat;
-import net.minecraft.src.ISaveHandler;
-import net.minecraft.src.ItemRenderer;
-import net.minecraft.src.ItemStack;
-import net.minecraft.src.KeyBinding;
-import net.minecraft.src.LoadingScreenRenderer;
-import net.minecraft.src.MathHelper;
-import net.minecraft.src.MinecraftError;
-import net.minecraft.src.MinecraftException;
-import net.minecraft.src.MinecraftImpl;
-import net.minecraft.src.ModelBiped;
-import net.minecraft.src.MouseHelper;
-import net.minecraft.src.MovementInputFromOptions;
-import net.minecraft.src.MovingObjectPosition;
-import net.minecraft.src.NetClientHandler;
-import net.minecraft.src.OpenGlCapsChecker;
-import net.minecraft.src.PlayerController;
-import net.minecraft.src.PlayerControllerTest;
-import net.minecraft.src.RenderBlocks;
-import net.minecraft.src.RenderEngine;
-import net.minecraft.src.RenderGlobal;
-import net.minecraft.src.RenderManager;
-import net.minecraft.src.SaveConverterMcRegion;
-import net.minecraft.src.ScaledResolution;
-import net.minecraft.src.ScreenShotHelper;
-import net.minecraft.src.Session;
-import net.minecraft.src.SoundManager;
-import net.minecraft.src.StatFileWriter;
-import net.minecraft.src.StatList;
-import net.minecraft.src.StatStringFormatKeyInv;
-import net.minecraft.src.Teleporter;
-import net.minecraft.src.Tessellator;
-import net.minecraft.src.TextureCompassFX;
-import net.minecraft.src.TextureFlamesFX;
-import net.minecraft.src.TextureLavaFX;
-import net.minecraft.src.TextureLavaFlowFX;
-import net.minecraft.src.TexturePackList;
-import net.minecraft.src.TexturePortalFX;
-import net.minecraft.src.TextureWatchFX;
-import net.minecraft.src.TextureWaterFX;
-import net.minecraft.src.TextureWaterFlowFX;
-import net.minecraft.src.ThreadCheckHasPaid;
-import net.minecraft.src.ThreadDownloadResources;
-import net.minecraft.src.ThreadSleepForever;
-import net.minecraft.src.Timer;
-import net.minecraft.src.UnexpectedThrowable;
-import net.minecraft.src.Vec3D;
-import net.minecraft.src.World;
-import net.minecraft.src.WorldProvider;
-import net.minecraft.src.WorldRenderer;
-import net.minecraft.src.WorldSettings;
+
+import net.minecraft.src.*;
 import org.lwjgl.LWJGLException;
 import org.lwjgl.input.Controllers;
 import org.lwjgl.input.Keyboard;
@@ -221,7 +136,7 @@
 			Display.setDisplayMode(new DisplayMode(this.displayWidth, this.displayHeight));
 		}
 
-		Display.setTitle("Minecraft Minecraft Beta 1.8.1");
+		Display.setTitle("Minecraft Tropical Adventure 1.0.1");
 
 		try {
 			PixelFormat var7 = new PixelFormat();
@@ -284,6 +199,7 @@
 		this.renderEngine.registerTextureFX(new TextureCompassFX(this));
 		this.renderEngine.registerTextureFX(new TextureWatchFX(this));
 		this.renderEngine.registerTextureFX(new TextureWaterFlowFX());
+		this.renderEngine.registerTextureFX(new TextureWaterCausticsFX());
 		this.renderEngine.registerTextureFX(new TextureLavaFlowFX());
 		this.renderEngine.registerTextureFX(new TextureFlamesFX(0));
 		this.renderEngine.registerTextureFX(new TextureFlamesFX(1));
@@ -1564,5 +1480,42 @@
 			this.thePlayer.inventory.setCurrentItem(var1, this.playerController instanceof PlayerControllerTest);
 		}
 
+	}
+
+	public String getMousedOverBlock() {
+		Block block = null;
+		int meta = 0;
+		if (this.objectMouseOver != null) {
+			if (this.objectMouseOver.typeOfHit == EnumMovingObjectType.TILE) {
+				block = Block.blocksList[this.theWorld.getBlockId(this.objectMouseOver.blockX, this.objectMouseOver.blockY, this.objectMouseOver.blockZ)];
+				meta = this.theWorld.getBlockMetadata(this.objectMouseOver.blockX, this.objectMouseOver.blockY, this.objectMouseOver.blockZ);
+			}
+		}
+		return (block == null ? "" : "Hovered block: " + (block.blockID + ":" + meta));
+
+	}
+
+	public String getMousedOverEntity() {
+		Entity entityHit = null;
+		if (this.objectMouseOver != null) {
+			if (this.objectMouseOver.typeOfHit == EnumMovingObjectType.ENTITY) {
+				entityHit = this.objectMouseOver.entityHit;
+			}
+		}
+		return (entityHit == null ? "" : "Hovered entity: " + this.objectMouseOver.entityHit.getEntityString());
+	}
+
+	public String getMousedOverBlockName() {
+		Block block = null;
+		int meta = 0;
+		if (this.objectMouseOver != null) {
+			if (this.objectMouseOver.typeOfHit == EnumMovingObjectType.TILE) {
+				block = Block.blocksList[this.theWorld.getBlockId(this.objectMouseOver.blockX, this.objectMouseOver.blockY, this.objectMouseOver.blockZ)];
+				meta = this.theWorld.getBlockMetadata(this.objectMouseOver.blockX, this.objectMouseOver.blockY, this.objectMouseOver.blockZ);
+			}
+		}
+
+
+		return (block == null ? "" : "Hovered block name: " + StringTranslate.getInstance().translateNamedKey(new ItemStack(block, 1, meta).getItemName()));
 	}
 }
--- net/minecraft/src/BlockStoneBrick.java
+++ net/minecraft/src/BlockStoneBrick.java
@@ -6,14 +6,7 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		switch(var2) {
-		case 1:
-			return 100;
-		case 2:
-			return 101;
-		default:
-			return 54;
-		}
+		return ((var2 & 3) == 1 ? 100 : (var2 & 3) == 2 ? 101 : 54) + (var2 >> 2) * 256;
 	}
 
 	protected int damageDropped(int var1) {
--- /dev/null
+++ net/minecraft/src/BlockMultitype.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class BlockMultitype extends Block {
+	protected BlockMultitype(int var1, int var2, Material var3) {
+		super(var1, var2, var3);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.blockIndexInTexture + var2 * 256;
+	}
+
+	protected int damageDropped(int var1) {
+		return var1;
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenCoral.java
@@ -1,0 +1,49 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenCoral extends WorldGenerator {
+	private static final int[] coralTypes = {
+			1,
+			2,
+			3,
+			4,
+			5,
+			6,
+			9,
+			10,
+			11,
+			13,
+			14
+	};
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int coralType = coralTypes[var2.nextInt(coralTypes.length)];
+
+		if (var1.getBlockMaterial(var3, var4, var5) != Material.water
+				|| var1.getBlockMaterial(var3, var4 - 1, var5) == Material.water
+				|| var1.isAirBlock(var3, var4 - 1, var5)) {
+			return false;
+		}
+
+		int radius = var2.nextInt(4) + 2;
+		for (int x = -radius; x <= radius; x++) {
+			for (int y = -radius; y <= radius; y++) {
+				for (int z = -radius; z <= radius; z++) {
+					int b = var1.getBlockId(var3 + x, var4 + y, var5 + z);
+					if (b != 0 && b != Block.waterStill.blockID && b != Block.waterMoving.blockID) {
+						continue;
+					}
+
+					if ((x * x + y * y + z * z) < var2.nextDouble() * radius * radius
+							&& !var1.isAirBlock(var3 + x, var4 + y + 1, var5 + z)
+							&& (!var1.isAirBlock(var3 + x, var4 + y + 2, var5 + z) || var2.nextInt(2) == 0)) {
+						var1.setBlockAndMetadata(var3 + x, var4 + y, var5 + z, Block.coral.blockID, coralType);
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/EntityPlayer.java
+++ net/minecraft/src/EntityPlayer.java
@@ -47,6 +47,7 @@
 	protected float field_35213_bb = 0.02F;
 	private int damageRemainder = 0;
 	public EntityFish fishEntity = null;
+	private boolean drainThirst;
 
 	public EntityPlayer(World var1) {
 		super(var1);
@@ -300,6 +301,14 @@
 	}
 
 	public void onLivingUpdate() {
+		this.drainThirst = false;
+		if(this.worldObj.difficultySetting > 0 && this.worldObj.isDaytime() && !this.isWet() && !this.worldObj.multiplayerWorld) {
+			float var1 = this.getEntityBrightness(1.0F);
+			if(var1 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ))) {
+				this.drainThirst = true;
+			}
+		}
+
 		if(this.field_35216_aw > 0) {
 			--this.field_35216_aw;
 		}
@@ -723,7 +732,7 @@
 	}
 
 	public boolean isEntityInsideOpaqueBlock() {
-		return !this.sleeping && super.isEntityInsideOpaqueBlock();
+		return !this.sleeping && !this.noClip && super.isEntityInsideOpaqueBlock();
 	}
 
 	public EnumStatus sleepInBedAt(int var1, int var2, int var3) {
@@ -1064,6 +1073,10 @@
 	public void func_35198_d(float var1) {
 		if(!this.field_35212_aW.field_35759_a) {
 			if(!this.worldObj.multiplayerWorld) {
+				if (this.drainThirst) {
+					var1 *= 1.5F;
+				}
+
 				this.field_35217_av.func_35762_a(var1);
 			}
 
@@ -1103,5 +1116,14 @@
 
 	protected boolean func_35163_av() {
 		return true;
+	}
+
+	public boolean isThirstDraining() {
+		return this.drainThirst;
+	}
+
+	public boolean fastSwim() {
+		ItemStack feet = this.inventory.armorItemInSlot(3);
+		return feet != null && feet.itemID == Item.flippers.shiftedIndex;
 	}
 }
--- net/minecraft/src/RenderGlobal.java
+++ net/minecraft/src/RenderGlobal.java
@@ -200,7 +200,7 @@
 
 			this.renderChunksWide = var1 / 16 + 1;
 			this.worldObj.getClass();
-			this.renderChunksTall = 128 / 16;
+			this.renderChunksTall = 256 / 16;
 			this.renderChunksDeep = var1 / 16 + 1;
 			this.worldRenderers = new WorldRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
 			this.sortedWorldRenderers = new WorldRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
@@ -755,7 +755,7 @@
 			}
 
 			if(this.worldObj.worldProvider.func_28112_c()) {
-				GL11.glColor3f(var3 * 0.2F + 0.04F, var4 * 0.2F + 0.04F, var5 * 0.6F + 0.1F);
+				GL11.glColor3f(var3 * 0.2F + 0.04F, var5 * 0.4F + 0.07F, var5 * 0.6F + 0.1F);
 			} else {
 				GL11.glColor3f(var3, var4, var5);
 			}
--- net/minecraft/src/ChunkProviderClient.java
+++ net/minecraft/src/ChunkProviderClient.java
@@ -11,8 +11,7 @@
 	private World worldObj;
 
 	public ChunkProviderClient(World var1) {
-		var1.getClass();
-		this.blankChunk = new EmptyChunk(var1, new byte[256 * 128], 0, 0);
+		this.blankChunk = new EmptyChunk(var1, new byte[256 * 256], 0, 0);
 		this.worldObj = var1;
 	}
 
@@ -31,8 +30,7 @@
 	}
 
 	public Chunk loadChunk(int var1, int var2) {
-		this.worldObj.getClass();
-		byte[] var3 = new byte[256 * 128];
+		byte[] var3 = new byte[256 * 256];
 		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
 		Arrays.fill(var4.skylightMap.data, (byte)-1);
 		this.chunkMapping.func_35577_a(ChunkCoordIntPair.chunkXZ2Int(var1, var2), var4);
--- net/minecraft/src/FurnaceRecipes.java
+++ net/minecraft/src/FurnaceRecipes.java
@@ -24,6 +24,10 @@
 		this.addSmelting(Item.clay.shiftedIndex, new ItemStack(Item.brick));
 		this.addSmelting(Block.cactus.blockID, new ItemStack(Item.dyePowder, 1, 2));
 		this.addSmelting(Block.wood.blockID, new ItemStack(Item.coal, 1, 1));
+		this.addSmelting(Item.impureWaterBottle.shiftedIndex, new ItemStack(Item.waterBottle));
+		this.addSmelting(Item.impureWaterBowl.shiftedIndex, new ItemStack(Item.waterBowl));
+		this.addSmelting(Item.rawIron.shiftedIndex, new ItemStack(Item.ingotIron));
+		this.addSmelting(Item.rawGold.shiftedIndex, new ItemStack(Item.ingotGold));
 	}
 
 	public void addSmelting(int var1, ItemStack var2) {
--- /dev/null
+++ net/minecraft/src/WorldGenPalmtree.java
@@ -1,0 +1,52 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenPalmtree extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int ground = var1.getBlockId(var3, var4 - 1, var5);
+		if (ground != Block.grass.blockID && ground != Block.sand.blockID) {
+			return false;
+		}
+
+		int height = var2.nextInt(5) + 3;
+		int height2 = var2.nextInt(2) + 1;
+		int height3 = var2.nextInt(2);
+		int heightTotal = height + height2 + height3;
+
+		{
+			int dir = var2.nextInt(4);
+			int dirX = dir == 0 ? 1 : dir == 2 ? -1 : 0;
+			int dirZ = dir == 1 ? 1 : dir == 3 ? -1 : 0;
+
+			for (int y = 0; y < heightTotal; y++) {
+				if (y == height || y == height + height2) {
+					var3 += dirX;
+					var5 += dirZ;
+				}
+				var1.setBlockAndMetadata(var3, var4 + y, var5, Block.wood.blockID, 1);
+			}
+		}
+
+		var4 += heightTotal;
+		if (var1.isAirBlock(var3, var4, var5)) {
+			var1.setBlockAndMetadata(var3, var4, var5, Block.leaves.blockID, 1);
+		}
+
+		for (int dir = 0; dir < 4; dir++) {
+			int dirX = dir == 0 ? 1 : dir == 2 ? -1 : 0;
+			int dirZ = dir == 1 ? 1 : dir == 3 ? -1 : 0;
+
+			for (int i = 1; i < 4; i++) {
+				if (i <= 2 && var1.isAirBlock(var3 + dirX * i, var4, var5 + dirZ * i)) {
+					var1.setBlockAndMetadata(var3 + dirX * i, var4, var5 + dirZ * i, Block.leaves.blockID, 1);
+				}
+				if (i >= 2 && var1.isAirBlock(var3 + dirX * i, var4 - 1, var5 + dirZ * i)) {
+					var1.setBlockAndMetadata(var3 + dirX * i, var4 - 1, var5 + dirZ * i, Block.leaves.blockID, 1);
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/BlockStep.java
+++ net/minecraft/src/BlockStep.java
@@ -3,11 +3,11 @@
 import java.util.Random;
 
 public class BlockStep extends Block {
-	public static final String[] field_22037_a = new String[]{"stone", "sand", "wood", "cobble", "brick", "smoothStoneBrick"};
+	public static final String[] field_22037_a = new String[]{"stone", "sand", "wood", "cobble", "brick", "smoothStoneBrick", "limestone", "granite", "basalt", "smoothLimestoneBrick", "smoothGraniteBrick", "smoothBasaltBrick", "cobbledLimestone", "cobbledGranite", "cobbledBasalt"};
 	private boolean blockType;
 
-	public BlockStep(int var1, boolean var2) {
-		super(var1, 6, Material.rock);
+	public BlockStep(int var1, boolean var2, Material var3) {
+		super(var1, 6, var3);
 		this.blockType = var2;
 		if(!var2) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
@@ -16,8 +16,27 @@
 		this.setLightOpacity(255);
 	}
 
+	public BlockStep getSingleForm() {
+		return (BlockStep)Block.stairSingle;
+	}
+
+	public BlockStep getDoubleForm() {
+		return (BlockStep)Block.stairDouble;
+	}
+
+	public String[] getTypeNames() {
+		return field_22037_a;
+	}
+
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var2 == 0 ? (var1 <= 1 ? 6 : 5) : (var2 == 1 ? (var1 == 0 ? 208 : (var1 == 1 ? 176 : 192)) : (var2 == 2 ? 4 : (var2 == 3 ? 16 : (var2 == 4 ? Block.brick.blockIndexInTexture : (var2 == 5 ? Block.field_35285_bn.blockIndexInTexture : 6)))));
+		return ((var2 == 0 || var2 == 6 || var2 == 7 || var2 == 8) ? (var1 <= 1 ? 6 : 5)
+						: (var2 == 1 ? (var1 == 0 ? 208 : (var1 == 1 ? 176 : 192))
+						: (var2 == 2 ? 4
+						: (var2 == 3 || var2 == 12 || var2 == 13 || var2 == 14 ? 16
+						: (var2 == 4 ? Block.brick.blockIndexInTexture
+						: (var2 == 5 || var2 == 9 || var2 == 10 || var2 == 11 ? Block.field_35285_bn.blockIndexInTexture
+						: 6))))))
+				+ (var2 == 6 || var2 == 9 || var2 == 12 ? 1 : var2 == 7 || var2 == 10 || var2 == 13 ? 2 : var2 == 8 || var2 == 11 || var2 == 14 ? 3 : 0) * 256;
 	}
 
 	public int getBlockTextureFromSide(int var1) {
@@ -29,7 +48,7 @@
 	}
 
 	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(this != Block.stairSingle) {
+		if(!this.blockType) {
 			super.onBlockAdded(var1, var2, var3, var4);
 		}
 
@@ -37,9 +56,9 @@
 		int var6 = var1.getBlockMetadata(var2, var3, var4);
 		int var7 = var1.getBlockMetadata(var2, var3 - 1, var4);
 		if(var6 == var7) {
-			if(var5 == stairSingle.blockID) {
+			if(var5 == this.getSingleForm().blockID) {
 				var1.setBlockWithNotify(var2, var3, var4, 0);
-				var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, Block.stairDouble.blockID, var6);
+				var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, this.getDoubleForm().blockID, var6);
 			}
 
 		}
@@ -62,7 +81,7 @@
 	}
 
 	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		if(this != Block.stairSingle) {
+		if(!this.blockType) {
 			super.shouldSideBeRendered(var1, var2, var3, var4, var5);
 		}
 
--- net/minecraft/src/GuiAchievements.java
+++ net/minecraft/src/GuiAchievements.java
@@ -193,7 +193,7 @@
 					var26 = Block.bedrock.blockIndexInTexture;
 				}
 
-				this.drawTexturedModalRect(var10 + var24 * 16 - var14, var11 + var22 * 16 - var15, var26 % 16 << 4, var26 >> 4 << 4, 16, 16);
+				this.drawTexturedModalRect(var10 + var24 * 16 - var14, var11 + var22 * 16 - var15, var26 % 16 << 4, var26 >> 4 << 4, 16, 16, 512);
 			}
 		}
 
--- net/minecraft/src/WorldGenPumpkin.java
+++ net/minecraft/src/WorldGenPumpkin.java
@@ -8,8 +8,8 @@
 			int var7 = var3 + var2.nextInt(8) - var2.nextInt(8);
 			int var8 = var4 + var2.nextInt(4) - var2.nextInt(4);
 			int var9 = var5 + var2.nextInt(8) - var2.nextInt(8);
-			if(var1.isAirBlock(var7, var8, var9) && var1.getBlockId(var7, var8 - 1, var9) == Block.grass.blockID && Block.pumpkin.canPlaceBlockAt(var1, var7, var8, var9)) {
-				var1.setBlockAndMetadata(var7, var8, var9, Block.pumpkin.blockID, var2.nextInt(4));
+			if(var1.isAirBlock(var7, var8, var9) && var1.getBlockId(var7, var8 - 1, var9) == Block.grass.blockID && Block.field_35281_bs.canPlaceBlockAt(var1, var7, var8, var9)) {
+				var1.setBlockAndMetadata(var7, var8, var9, Block.field_35281_bs.blockID, var2.nextInt(4));
 			}
 		}
 
--- net/minecraft/src/MapGenMineshaft.java
+++ net/minecraft/src/MapGenMineshaft.java
@@ -2,7 +2,10 @@
 
 public class MapGenMineshaft extends MapGenStructure {
 	protected boolean func_35628_a(int var1, int var2) {
-		return this.rand.nextInt(80) == 0 && this.rand.nextInt(80) < Math.max(Math.abs(var1), Math.abs(var2));
+		BiomeGenBase biome = this.field_35625_d.getWorldChunkManager().getBiomeGenAt(var1, var2);
+		if (biome == BiomeGenBase.volcanicIsland) return false;
+		int chance = biome instanceof BiomeGenBadlands ? 40 : 80;
+		return this.rand.nextInt(chance) == 0 && this.rand.nextInt(chance) < Math.max(Math.abs(var1), Math.abs(var2));
 	}
 
 	protected StructureStart func_35630_b(int var1, int var2) {
--- net/minecraft/src/BiomeGenBase.java
+++ net/minecraft/src/BiomeGenBase.java
@@ -6,26 +6,39 @@
 import java.util.Random;
 
 public abstract class BiomeGenBase {
+	public static final boolean[] oceans = new boolean[256];
 	public static final BiomeGenBase[] field_35486_a = new BiomeGenBase[256];
-	public static final BiomeGenBase field_35484_b = (new BiomeGenOcean(0)).setColor(112).setBiomeName("Ocean").func_35479_b(-1.0F, 0.5F);
-	public static final BiomeGenBase field_35485_c = (new BiomeGenPlains(1)).setColor(9286496).setBiomeName("Plains").func_35478_a(0.8F, 0.4F);
-	public static final BiomeGenBase desert = (new BiomeGenDesert(2)).setColor(16421912).setBiomeName("Desert").setDisableRain().func_35478_a(2.0F, 0.0F).func_35479_b(0.1F, 0.2F);
-	public static final BiomeGenBase field_35483_e = (new BiomeGenHills(3)).setColor(6316128).setBiomeName("Extreme Hills").func_35479_b(0.2F, 1.8F).func_35478_a(0.2F, 0.3F);
-	public static final BiomeGenBase forest = (new BiomeGenForest(4)).setColor(353825).setBiomeName("Forest").func_4124_a(5159473).func_35478_a(0.7F, 0.8F);
-	public static final BiomeGenBase taiga = (new BiomeGenTaiga(5)).setColor(747097).setBiomeName("Taiga").func_4124_a(5159473).func_35478_a(0.3F, 0.8F).func_35479_b(0.1F, 0.4F);
-	public static final BiomeGenBase swampland = (new BiomeGenSwamp(6)).setColor(522674).setBiomeName("Swampland").func_4124_a(9154376).func_35479_b(-0.2F, 0.1F).func_35478_a(0.8F, 0.9F);
-	public static final BiomeGenBase field_35487_i = (new BiomeGenRiver(7)).setColor(255).setBiomeName("River").func_35479_b(-0.5F, 0.0F);
+	public static final BiomeGenBase field_35484_b = (new BiomeGenOcean(0)).setColor(112).setBiomeName("Ocean").func_35479_b(-1.0F, 1.0F).setOcean();
+	public static final BiomeGenBase field_35485_c = (new BiomeGenPlains(1)).setColor(9286496).setBiomeName("Savanna").func_35478_a(1.2F, 0.0F);
+	public static final BiomeGenBase desert = (new BiomeGenDesert(2)).setColor(16421912).setBiomeName("Desert").setDisableRain().func_35478_a(2.0F, 0.0F).func_35479_b(0.3F, 0.2F);
+	public static final BiomeGenBase field_35483_e = (new BiomeGenHills(3)).setColor(6316128).setBiomeName("Extreme Hills").func_35479_b(0.5F, 1.8F).func_35478_a(1.0F, 0.5F);
+	public static final BiomeGenBase forest = (new BiomeGenForest(4)).setColor(353825).setBiomeName("Forest").func_4124_a(5159473).func_35478_a(0.8F, 0.9F);
+	public static final BiomeGenBase taiga = (new BiomeGenTaiga(5)).setColor(747097).setBiomeName("Rainforest").func_4124_a(5159473).func_35478_a(1.0F, 1.0F).func_35479_b(0.0F, 1.0F);
+	public static final BiomeGenBase swampland = (new BiomeGenSwamp(6)).setColor(522674).setBiomeName("Swampland").func_4124_a(9154376).func_35479_b(-0.2F, 0.2F).func_35478_a(0.7F, 1.0F);
+	public static final BiomeGenBase field_35487_i = (new BiomeGenRiver(7)).setColor(255).setBiomeName("River").func_35479_b(-0.8F, 0.0F);
 	public static final BiomeGenBase hell = (new BiomeGenHell(8)).setColor(16711680).setBiomeName("Hell").setDisableRain();
 	public static final BiomeGenBase sky = (new BiomeGenSky(9)).setColor(8421631).setBiomeName("Sky").setDisableRain();
+	public static final BiomeGenBase oasis = (new BiomeGenOasis(10)).setColor(747097).setBiomeName("Oasis").func_4124_a(5159473).func_35478_a(1.0F, 1.0F).func_35479_b(0.0F, 0.1F);
+	public static final BiomeGenBase badlands = (new BiomeGenBadlands(11)).setColor(747097).setBiomeName("Badlands").func_4124_a(5159473).func_35478_a(2.0F, 0.0F).func_35479_b(1.0F, 2.5F);
+	public static final BiomeGenBase woodedBadlands = (new BiomeGenBadlands(12)).wooded().setColor(747097).setBiomeName("Wooded Badlands").func_4124_a(5159473).func_35478_a(2.0F, 0.0F).func_35479_b(2.0F, 4.0F);
+	public static final BiomeGenBase coralReef = (new BiomeGenCoralReef(13)).setColor(112).setBiomeName("Coral Reef").func_35479_b(-0.8F, 0.2F).func_35478_a(1.0F, 1.0F).setOcean();
+	public static final BiomeGenBase volcanicIsland = (new BiomeGenVolcanicIsland(14)).setColor(112).setBiomeName("Volcanic Island").func_35479_b(-0.8F, 0.2F).func_35478_a(1.0F, 0.0F).setOcean();
+	public static final BiomeGenBase beach = (new BiomeGenBeach(15)).setColor(112).setBiomeName("Beach").func_35479_b(0.0F, 0.0F);
+	public static final BiomeGenBase hillyBeach = (new BiomeGenBeach(16)).setColor(112).setBiomeName("Hilly Beach").func_35479_b(0.0F, 0.3F);
+	public static final BiomeGenBase rainbowBeach = (new BiomeGenBeach(17)).sandType(2).setColor(112).setBiomeName("Pearlsand Beach").func_35479_b(0.0F, 0.0F);
+	public static final BiomeGenBase rockyBeach = (new BiomeGenRockyBeach(18)).setColor(112).setBiomeName("Rocky Beach").func_35479_b(0.0F, 0.0F);
 	public String biomeName;
 	public int color;
 	public byte topBlock = (byte)Block.grass.blockID;
+	public byte topBlockMetadata = 0;
 	public byte fillerBlock = (byte)Block.dirt.blockID;
+	public byte fillerBlockMetadata = 0;
+	public byte stoneBlockMetadata = 0;
 	public int field_6502_q = 5169201;
 	public float field_35492_q = 0.1F;
 	public float field_35491_r = 0.3F;
-	public float field_35490_s = 0.5F;
-	public float field_35489_t = 0.5F;
+	public float field_35490_s = 0.8F;
+	public float field_35489_t = 0.8F;
 	public BiomeDecorator field_35488_u;
 	protected List spawnableMonsterList = new ArrayList();
 	protected List spawnableCreatureList = new ArrayList();
@@ -33,10 +46,12 @@
 	private boolean enableSnow;
 	private boolean enableRain = true;
 	public final int field_35494_y;
+	public int heightCutoff = 0;
 	protected WorldGenTrees field_35493_z = new WorldGenTrees();
 	protected WorldGenBigTree field_35480_A = new WorldGenBigTree();
 	protected WorldGenForest field_35481_B = new WorldGenForest();
 	protected WorldGenSwamp field_35482_C = new WorldGenSwamp();
+	protected WorldGenPalmtree field_35483_D = new WorldGenPalmtree();
 
 	protected BiomeGenBase(int var1) {
 		this.field_35494_y = var1;
@@ -55,6 +70,11 @@
 		this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
 	}
 
+	public BiomeGenBase setOcean() {
+		oceans[this.field_35494_y] = true;
+		return this;
+	}
+
 	protected BiomeDecorator func_35475_a() {
 		return new BiomeDecorator(this);
 	}
@@ -77,7 +97,11 @@
 	}
 
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
-		return (WorldGenerator)(var1.nextInt(10) == 0 ? this.field_35480_A : this.field_35493_z);
+		return (WorldGenerator)(var1.nextInt(10) == 0 ? this.field_35480_A : new WorldGenTrees(4 + var1.nextInt(7), 0, 0, true));
+	}
+
+	public WorldGenerator getRandomWorldGenForGrass(Random random) {
+		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
 	}
 
 	protected BiomeGenBase setBiomeName(String var1) {
@@ -97,6 +121,7 @@
 
 	public int getSkyColorByTemp(float var1) {
 		var1 /= 3.0F;
+		var1 += 1.5F;
 		if(var1 < -1.0F) {
 			var1 = -1.0F;
 		}
@@ -134,5 +159,103 @@
 
 	public void func_35477_a(World var1, Random var2, int var3, int var4) {
 		this.field_35488_u.func_35881_a(var1, var2, var3, var4);
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+		this.buildDefaultSurface(world, random, blocks, metadata, x, z, heightValue, desertValue);
+	}
+
+	public int getStoneMetadata(int y, Random random) {
+		return y < 24 - random.nextInt(4) ? 2 : this.stoneBlockMetadata;
+	}
+
+	public final void buildDefaultSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, double heightValue, double desertValue) {
+		int top = this.topBlock;
+		byte topMetadata = (byte)(this.topBlockMetadata & 15);
+		byte fillerMetadata = (byte)(this.fillerBlockMetadata & 15);
+		int filler = this.fillerBlock;
+		int sandStoneHeight = -1;
+		double topSand = desertValue + random.nextDouble() * 0.2D;
+		int height = (int)(heightValue / 3.0D + 3.0D + random.nextDouble() * 0.25D);
+		int chunkX = x & 15;
+		int chunkZ = z & 15;
+
+		for (int y = 255; y >= 0; --y) {
+			int index = chunkX << 12 | chunkZ << 8 | y;
+
+			if (y <= random.nextInt(5)) {
+				blocks[index] = (byte) Block.bedrock.blockID;
+			} else {
+				byte block = blocks[index];
+
+				if (block > 0) {
+					if (block == Block.stone.blockID) {
+						if (sandStoneHeight == -1) {
+							if (height <= 0) {
+								top = 0;
+								topMetadata = 0;
+								filler = Block.stone.blockID;
+								fillerMetadata = (byte) this.getStoneMetadata(y, random);
+							} else if (y >= 63 - 4 && y <= 63 + 11 + random.nextInt(4)) {
+								top = this.topBlock;
+								topMetadata = (byte)(this.topBlockMetadata & 255);
+								filler = this.fillerBlock;
+								fillerMetadata = (byte)(this.fillerBlockMetadata & 255);
+
+								if (topSand > (y <= 64 ? 0.0D : 2.5D)) {
+									top = (byte)Block.sand.blockID;
+									topMetadata = 0;
+									filler = (byte)Block.sand.blockID;
+									fillerMetadata = 0;
+								}
+							}
+
+							if (y < 63 && top == 0) {
+								top = Block.waterStill.blockID;
+								topMetadata = 0;
+							}
+
+							sandStoneHeight = height;
+
+							if (y >= 63 - 1) {
+								blocks[index] = (byte) top;
+								metadata[index] = topMetadata;
+							} else if (y < 63 - 7 - height) {
+								top = 0;
+								filler = (byte) Block.stone.blockID;
+								fillerMetadata = (byte) this.getStoneMetadata(y, random);
+								if (blocks[index + 1] == Block.waterStill.blockID) {
+									blocks[index] = (byte) Block.gravel.blockID;
+								} else {
+									blocks[index] = (byte) filler;
+									metadata[index] = fillerMetadata;
+								}
+							} else {
+								blocks[index] = (byte) filler;
+								metadata[index] = fillerMetadata;
+							}
+						} else if (sandStoneHeight > 0) {
+							--sandStoneHeight;
+							blocks[index] = (byte) filler;
+							metadata[index] = (byte) fillerMetadata;
+
+							if (sandStoneHeight == 0 && filler == Block.sand.blockID) {
+								sandStoneHeight = random.nextInt(4) + Math.max(0, y - 63);
+								filler = Block.sandStone.blockID;
+								if (this.fillerBlock == Block.sand.blockID) {
+									fillerMetadata = (byte)(this.fillerBlockMetadata & 255);
+								}
+							}
+						}
+
+						if (blocks[index] == Block.stone.blockID) {
+							metadata[index] = (byte) this.getStoneMetadata(y, random);
+						}
+					}
+				} else {
+					sandStoneHeight = -1;
+				}
+			}
+		}
 	}
 }
--- net/minecraft/src/EnumOptions.java
+++ net/minecraft/src/EnumOptions.java
@@ -15,7 +15,8 @@
 	DIFFICULTY("options.difficulty", false, false),
 	GRAPHICS("options.graphics", false, false),
 	AMBIENT_OCCLUSION("options.ao", false, true),
-	GUI_SCALE("options.guiScale", false, false);
+	GUI_SCALE("options.guiScale", false, false),
+	COLOR_CORRECTION("options.colorCorrection", false, true);
 
 	private final boolean enumFloat;
 	private final boolean enumBoolean;
--- /dev/null
+++ net/minecraft/src/WorldGenShrub.java
@@ -1,0 +1,44 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenShrub extends WorldGenerator {
+    private int field_48197_a;
+    private int field_48196_b;
+
+    public WorldGenShrub(int par1, int par2) {
+        field_48196_b = par1;
+        field_48197_a = par2;
+    }
+
+    public boolean generate(World par1World, Random par2Random, int par3, int par4, int par5) {
+        for (int i = 0; ((i = par1World.getBlockId(par3, par4, par5)) == 0 || i == Block.leaves.blockID) && par4 > 0; par4--) {
+        }
+
+        int j = par1World.getBlockId(par3, par4, par5);
+
+        if (j == Block.dirt.blockID || j == Block.grass.blockID || j == Block.stone.blockID) {
+            par4++;
+            par1World.setBlockAndMetadata(par3, par4, par5, Block.wood.blockID, field_48196_b);
+
+            for (int k = par4; k <= par4 + 2; k++) {
+                int l = k - par4;
+                int i1 = 2 - l;
+
+                for (int j1 = par3 - i1; j1 <= par3 + i1; j1++) {
+                    int k1 = j1 - par3;
+
+                    for (int l1 = par5 - i1; l1 <= par5 + i1; l1++) {
+                        int i2 = l1 - par5;
+
+                        if ((Math.abs(k1) != i1 || Math.abs(i2) != i1 || par2Random.nextInt(2) != 0) && !Block.opaqueCubeLookup[par1World.getBlockId(j1, k, l1)]) {
+                            par1World.setBlockAndMetadata(j1, k, l1, Block.leaves.blockID, field_48197_a);
+                        }
+                    }
+                }
+            }
+        }
+
+        return true;
+    }
+}
--- net/minecraft/src/WorldGenBigTree.java
+++ net/minecraft/src/WorldGenBigTree.java
@@ -117,6 +117,17 @@
 							++var13;
 						} else {
 							this.worldObj.setBlock(var11[0], var11[1], var11[2], var6);
+
+							int x = var11[0];
+							int z = var11[2];
+
+							if (var15 > var4 - 1) {
+								if (this.rand.nextInt(4) == 0) this.placeVines(x - 1, var11[1], z, 8);
+								if (this.rand.nextInt(4) == 0) this.placeVines(x + 1, var11[1], z, 2);
+								if (this.rand.nextInt(4) == 0) this.placeVines(x, var11[1], z - 1, 1);
+								if (this.rand.nextInt(4) == 0) this.placeVines(x, var11[1], z + 1, 4);
+							}
+
 							++var13;
 						}
 					}
@@ -192,8 +203,26 @@
 				var14[var7] = MathHelper.floor_double((double)var1[var7] + (double)var15 * var10 + 0.5D);
 				var14[var8] = MathHelper.floor_double((double)var1[var8] + (double)var15 * var12 + 0.5D);
 				this.worldObj.setBlock(var14[0], var14[1], var14[2], var3);
+
+				int x = var14[0];
+				int z = var14[2];
+
+				if (this.rand.nextInt(4) == 0) this.placeVines(x - 1, var14[1], z, 8);
+				if (this.rand.nextInt(4) == 0) this.placeVines(x + 1, var14[1], z, 2);
+				if (this.rand.nextInt(4) == 0) this.placeVines(x, var14[1], z - 1, 1);
+				if (this.rand.nextInt(4) == 0) this.placeVines(x, var14[1], z + 1, 4);
 			}
 
+		}
+	}
+
+	void placeVines(int x, int y, int z, int d) {
+		if (!this.worldObj.checkChunksExist(x, y, z, x, y, z) || !this.worldObj.isAirBlock(x, y, z)) return;
+
+		int length = 2 + rand.nextInt(4);
+
+		for (int i = 0; i < length && this.worldObj.isAirBlock(x, y - i, z); i++) {
+			this.worldObj.setBlockAndMetadata(x, y - i, z, Block.field_35278_bv.blockID, d);
 		}
 	}
 
@@ -331,9 +360,9 @@
 		this.basePos[0] = var3;
 		this.basePos[1] = var4;
 		this.basePos[2] = var5;
-		if(this.heightLimit == 0) {
-			this.heightLimit = 5 + this.rand.nextInt(this.heightLimitLimit);
-		}
+		// Nasty height limit bug removed
+		this.heightLimit = 8 + this.rand.nextInt(this.heightLimitLimit);
+		this.trunkSize = this.heightLimit < 15 ? 1 : 2;
 
 		if(!this.validTreeLocation()) {
 			return false;
--- /dev/null
+++ net/minecraft/src/GenLayerBiomeVariants.java
@@ -1,0 +1,28 @@
+package net.minecraft.src;
+
+public class GenLayerBiomeVariants extends GenLayer {
+	public GenLayerBiomeVariants(long var1, GenLayer var2) {
+		super(var1);
+		this.field_35504_a = var2;
+	}
+
+	public int[] func_35500_a(int var1, int var2, int var3, int var4) {
+		int[] input = this.field_35504_a.func_35500_a(var1, var2, var3, var4);
+		int[] output = IntCache.func_35267_a(var3 * var4);
+
+		for (int z = 0; z < var4; z++) {
+			for (int x = 0; x < var3; x++) {
+				this.func_35499_a(z + var1, x + var2);
+				int biome = input[z + x * var3];
+
+				if (biome == BiomeGenBase.badlands.field_35494_y && this.func_35498_a(3) == 0) {
+					biome = BiomeGenBase.woodedBadlands.field_35494_y;
+				}
+
+				output[z + x * var3] = biome;
+			}
+		}
+
+		return output;
+	}
+}
--- net/minecraft/src/Gui.java
+++ net/minecraft/src/Gui.java
@@ -106,4 +106,16 @@
 		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), (double)this.zLevel, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + 0) * var8));
 		var9.draw();
 	}
+
+	public void drawTexturedModalRect(int var1, int var2, int var3, int var4, int var5, int var6, int var6a) {
+		float var7 = 1.0F / var6a;
+		float var8 = 1.0F / var6a;
+		Tessellator var9 = Tessellator.instance;
+		var9.startDrawingQuads();
+		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), (double)this.zLevel, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + var6) * var8));
+		var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), (double)this.zLevel, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + var6) * var8));
+		var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), (double)this.zLevel, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + 0) * var8));
+		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), (double)this.zLevel, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + 0) * var8));
+		var9.draw();
+	}
 }
--- /dev/null
+++ net/minecraft/src/GenLayerRemoveTooMuchOcean.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+public class GenLayerRemoveTooMuchOcean extends GenLayer {
+	public GenLayerRemoveTooMuchOcean(long var1, GenLayer var3) {
+		super(var1);
+		this.field_35504_a = var3;
+	}
+
+	public int[] func_35500_a(int var1, int var2, int var3, int var4) {
+		int var5 = var1 - 1;
+        int var6 = var2 - 1;
+        int var7 = var3 + 2;
+        int var8 = var4 + 2;
+        int[] var9 = this.field_35504_a.func_35500_a(var5, var6, var7, var8);
+        int[] var10 = IntCache.func_35267_a(var3 * var4);
+
+        for (int var11 = 0; var11 < var4; ++var11) {
+            for (int var12 = 0; var12 < var3; ++var12) {
+                int var13 = var9[var12 + 1 + (var11 + 1 - 1) * (var3 + 2)];
+                int var14 = var9[var12 + 1 + 1 + (var11 + 1) * (var3 + 2)];
+                int var15 = var9[var12 + 1 - 1 + (var11 + 1) * (var3 + 2)];
+                int var16 = var9[var12 + 1 + (var11 + 1 + 1) * (var3 + 2)];
+                int var17 = var9[var12 + 1 + (var11 + 1) * var7];
+                var10[var12 + var11 * var3] = var17;
+                this.func_35499_a((long) (var12 + var1), (long) (var11 + var2));
+
+                if (var17 == 0 && var13 == 0 && var14 == 0 && var15 == 0 && var16 == 0
+                        && this.func_35498_a(2) == 0) {
+                    var10[var12 + var11 * var3] = 1;
+                }
+            }
+        }
+
+        return var10;
+	}
+}
--- net/minecraft/src/WorldGenForest.java
+++ net/minecraft/src/WorldGenForest.java
@@ -3,87 +3,156 @@
 import java.util.Random;
 
 public class WorldGenForest extends WorldGenerator {
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		int var6 = var2.nextInt(3) + 5;
+	public boolean generate(World world, Random random, int x, int y, int z) {
+		int var6 = random.nextInt(3) + random.nextInt(3) + 5;
 		boolean var7 = true;
-		if(var4 >= 1) {
-			int var10000 = var4 + var6 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
-				int var8;
-				int var10;
-				int var11;
-				int var12;
-				for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
-					byte var9 = 1;
-					if(var8 == var4) {
-						var9 = 0;
-					}
-
-					if(var8 >= var4 + 1 + var6 - 2) {
-						var9 = 2;
-					}
-
-					for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
-						for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-							if(var8 >= 0) {
-								var1.getClass();
-								if(var8 < 128) {
-									var12 = var1.getBlockId(var10, var8, var11);
-									if(var12 != 0 && var12 != Block.leaves.blockID) {
-										var7 = false;
-									}
-									continue;
-								}
+
+		if (y >= 1 && y + var6 + 1 <= 256) {
+			int var10;
+			int var11;
+
+			for (int var8 = y; var8 <= y + 1 + var6; ++var8) {
+				byte var9 = 1;
+
+				if (var8 == y) {
+					var9 = 0;
+				}
+
+				if (var8 >= y + 1 + var6 - 2) {
+					var9 = 2;
+				}
+
+				for (var10 = x - var9; var10 <= x + var9 && var7; ++var10) {
+					for (var11 = z - var9; var11 <= z + var9 && var7; ++var11) {
+						if (var8 >= 0 && var8 < 256) {
+							int var12 = world.getBlockId(var10, var8, var11);
+
+							if (!this.func_150523_a(var12)) {
+								var7 = false;
 							}
-
+						} else {
 							var7 = false;
 						}
 					}
 				}
-
-				if(!var7) {
-					return false;
-				}
-
-				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if(var8 == Block.grass.blockID || var8 == Block.dirt.blockID) {
-					var1.getClass();
-					if(var4 < 128 - var6 - 1) {
-						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
-
-						int var16;
-						for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
-							var10 = var16 - (var4 + var6);
-							var11 = 1 - var10 / 2;
-
-							for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
-								int var13 = var12 - var3;
-
-								for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
-									int var15 = var14 - var5;
-									if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
-										var1.setBlockAndMetadata(var12, var16, var14, Block.leaves.blockID, 2);
-									}
-								}
-							}
-						}
-
-						for(var16 = 0; var16 < var6; ++var16) {
-							var10 = var1.getBlockId(var3, var4 + var16, var5);
-							if(var10 == 0 || var10 == Block.leaves.blockID) {
-								var1.setBlockAndMetadata(var3, var4 + var16, var5, Block.wood.blockID, 2);
-							}
-						}
-
-						return true;
-					}
-				}
-
+			}
+
+			if (!var7) {
 				return false;
+			} else {
+				int var21 = world.getBlockId(x, y - 1, z);
+
+				if ((var21 == Block.grass.blockID || var21 == Block.dirt.blockID) && y < 256 - var6 - 1) {
+					world.setBlock(x, y - 1, z, Block.dirt.blockID);
+					int var22 = random.nextInt(4);
+					var10 = var6 - random.nextInt(4) - 1;
+					var11 = 3 - random.nextInt(3);
+					int var23 = x;
+					int var13 = z;
+					int var14 = 0;
+					int var15;
+					int var16;
+
+					for (var15 = 0; var15 < var6; ++var15) {
+						var16 = y + var15;
+
+						if (var15 >= var10 && var11 > 0) {
+							var23 += ModelBed.field_35871_a[var22];
+							var13 += ModelBed.field_35870_b[var22];
+							--var11;
+						}
+
+						int var17 = world.getBlockId(var23, var16, var13);
+
+						if (var17 == 0 || Block.blocksList[var17].blockMaterial == Material.leaves) {
+							world.setBlockAndMetadata(var23, var16, var13, Block.wood.blockID, 2);
+							var14 = var16;
+						}
+					}
+
+					for (var15 = -1; var15 <= 1; ++var15) {
+						for (var16 = -1; var16 <= 1; ++var16) {
+							this.func_150525_a(world, var23 + var15, var14 + 1, var13 + var16);
+						}
+					}
+
+					this.func_150525_a(world, var23 + 2, var14 + 1, var13);
+					this.func_150525_a(world, var23 - 2, var14 + 1, var13);
+					this.func_150525_a(world, var23, var14 + 1, var13 + 2);
+					this.func_150525_a(world, var23, var14 + 1, var13 - 2);
+
+					for (var15 = -3; var15 <= 3; ++var15) {
+						for (var16 = -3; var16 <= 3; ++var16) {
+							if (Math.abs(var15) != 3 || Math.abs(var16) != 3) {
+								this.func_150525_a(world, var23 + var15, var14, var13 + var16);
+							}
+						}
+					}
+
+					var23 = x;
+					var13 = z;
+					var15 = random.nextInt(4);
+
+					if (var15 != var22) {
+						var16 = var10 - random.nextInt(2) - 1;
+						int var24 = 1 + random.nextInt(3);
+						var14 = 0;
+						int var18;
+						int var19;
+
+						for (var18 = var16; var18 < var6 && var24 > 0; --var24) {
+							if (var18 >= 1) {
+								var19 = y + var18;
+								var23 += ModelBed.field_35871_a[var15];
+								var13 += ModelBed.field_35870_b[var15];
+								int var20 = world.getBlockId(var23, var19, var13);
+
+								if (var20 == 0 || Block.blocksList[var20].blockMaterial == Material.leaves) {
+									world.setBlockAndMetadata(var23, var19, var13, Block.wood.blockID, 2);
+									var14 = var19;
+								}
+							}
+
+							++var18;
+						}
+
+						if (var14 > 0) {
+							for (var18 = -1; var18 <= 1; ++var18) {
+								for (var19 = -1; var19 <= 1; ++var19) {
+									this.func_150525_a(world, var23 + var18, var14 + 1, var13 + var19);
+								}
+							}
+
+							for (var18 = -2; var18 <= 2; ++var18) {
+								for (var19 = -2; var19 <= 2; ++var19) {
+									if (Math.abs(var18) != 2 || Math.abs(var19) != 2) {
+										this.func_150525_a(world, var23 + var18, var14, var13 + var19);
+									}
+								}
+							}
+						}
+					}
+
+					return true;
+				} else {
+					return false;
+				}
 			}
-		}
-
-		return false;
+		} else {
+			return false;
+		}
+	}
+
+	private void func_150525_a(World p_150525_1_, int p_150525_2_, int p_150525_3_, int p_150525_4_) {
+		int var5 = p_150525_1_.getBlockId(p_150525_2_, p_150525_3_, p_150525_4_);
+
+		if (var5 == 0 || Block.blocksList[var5].blockMaterial == Material.leaves) {
+			p_150525_1_.setBlockAndMetadata(p_150525_2_, p_150525_3_, p_150525_4_, Block.leaves.blockID, 2);
+		}
+	}
+
+	protected boolean func_150523_a(int blockId) {
+		Block p_150523_1_ = Block.blocksList[blockId];
+		return blockId == 0 || p_150523_1_.blockMaterial == Material.leaves || p_150523_1_ == Block.grass || p_150523_1_ == Block.dirt || p_150523_1_ == Block.wood || p_150523_1_ == Block.sapling || p_150523_1_ == Block.field_35278_bv;
 	}
 }
--- net/minecraft/src/ItemPickaxe.java
+++ net/minecraft/src/ItemPickaxe.java
@@ -1,10 +1,8 @@
 package net.minecraft.src;
 
 public class ItemPickaxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.sandStone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.ice, Block.netherrack, Block.oreLapis, Block.blockLapis};
-
 	protected ItemPickaxe(int var1, EnumToolMaterial var2) {
-		super(var1, 2, var2, blocksEffectiveAgainst);
+		super(var1, 2, var2, EnumTool.PICKAXE);
 	}
 
 	public boolean canHarvestBlock(Block var1) {
--- /dev/null
+++ net/minecraft/src/WorldGenVines.java
@@ -1,0 +1,39 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenVines extends WorldGenerator {
+    public WorldGenVines() {
+    }
+
+    public boolean generate(World par1World, Random par2Random, int par3, int par4, int par5) {
+        int i = par3;
+        int j = par5;
+        label0:
+
+        for (; par4 < 256; par4++) {
+            if (par1World.isAirBlock(par3, par4, par5)) {
+                int k = 2;
+
+                do {
+                    if (k > 5) {
+                        continue label0;
+                    }
+
+                    if (Block.field_35278_bv.canPlaceBlockOnSide(par1World, par3, par4, par5, k)) {
+                        par1World.setBlockAndMetadata(par3, par4, par5, Block.field_35278_bv.blockID, 1 << ModelBed.field_35869_d[Facing.faceToSide[k]]);
+                        continue label0;
+                    }
+
+                    k++;
+                }
+                while (true);
+            }
+
+            par3 = (i + par2Random.nextInt(4)) - par2Random.nextInt(4);
+            par5 = (j + par2Random.nextInt(4)) - par2Random.nextInt(4);
+        }
+
+        return true;
+    }
+}
--- net/minecraft/src/Render.java
+++ net/minecraft/src/Render.java
@@ -55,15 +55,15 @@
 
 		while(var20 > 0.0F) {
 			if(var23 % 2 == 0) {
-				var12 = (float)var10 / 256.0F;
-				var13 = ((float)var10 + 15.99F) / 256.0F;
-				var14 = (float)var11 / 256.0F;
-				var15 = ((float)var11 + 15.99F) / 256.0F;
+				var12 = (float)var10 / 512.0F;
+				var13 = ((float)var10 + 15.99F) / 512.0F;
+				var14 = (float)var11 / 512.0F;
+				var15 = ((float)var11 + 15.99F) / 512.0F;
 			} else {
-				var12 = (float)var10 / 256.0F;
-				var13 = ((float)var10 + 15.99F) / 256.0F;
-				var14 = (float)(var11 + 16) / 256.0F;
-				var15 = ((float)(var11 + 16) + 15.99F) / 256.0F;
+				var12 = (float)var10 / 512.0F;
+				var13 = ((float)var10 + 15.99F) / 512.0F;
+				var14 = (float)(var11 + 16) / 512.0F;
+				var15 = ((float)(var11 + 16) + 15.99F) / 512.0F;
 			}
 
 			if(var23 / 2 % 2 == 0) {
--- net/minecraft/src/Item.java
+++ net/minecraft/src/Item.java
@@ -30,7 +30,7 @@
 	public static Item pickaxeDiamond = (new ItemPickaxe(22, EnumToolMaterial.EMERALD)).setIconCoord(3, 6).setItemName("pickaxeDiamond");
 	public static Item axeDiamond = (new ItemAxe(23, EnumToolMaterial.EMERALD)).setIconCoord(3, 7).setItemName("hatchetDiamond");
 	public static Item stick = (new Item(24)).setIconCoord(5, 3).setFull3D().setItemName("stick");
-	public static Item bowlEmpty = (new Item(25)).setIconCoord(7, 4).setItemName("bowl");
+	public static Item bowlEmpty = (new ItemBottle(25)).setIconCoord(7, 4).setItemName("bowl");
 	public static Item bowlSoup = (new ItemSoup(26, 8)).setIconCoord(8, 4).setItemName("mushroomStew");
 	public static Item swordGold = (new ItemSword(27, EnumToolMaterial.GOLD)).setIconCoord(4, 4).setItemName("swordGold");
 	public static Item shovelGold = (new ItemSpade(28, EnumToolMaterial.GOLD)).setIconCoord(4, 5).setItemName("shovelGold");
@@ -118,6 +118,14 @@
 	public static Item field_35420_bm = (new ItemFood(110, 6, 0.6F, true)).setIconCoord(10, 7).setItemName("chickenCooked");
 	public static Item field_35415_bn = (new ItemFood(111, 4, 0.1F, true)).func_35425_a(Potion.field_35691_s.field_35670_H, 30, 0, 0.8F).setIconCoord(11, 5).setItemName("rottenFlesh");
 	public static Item field_35416_bo = (new Item(112)).setIconCoord(11, 6).setItemName("enderPearl");
+	public static Item glassBottle = (new ItemBottle(113)).setIconCoord(12, 8).setItemName("glassBottle");
+	public static Item waterBottle = (new ItemBottle(114, 8, 0.8F)).setIconCoord(13, 8).setItemName("waterBottle");
+	public static Item impureWaterBottle = (new ItemBottle(115, 5, 0.3F, 100)).setIconCoord(13, 8).setItemName("impureWaterBottle");
+	public static Item impureWaterBowl = (new ItemBottle(116, 3, 0.3F, 60)).setIconCoord(6, 6).setItemName("impureWaterBowl");
+	public static Item waterBowl = (new ItemBottle(117, 5, 0.5F)).setIconCoord(6, 6).setItemName("waterBowl");
+	public static Item rawIron = (new Item(118)).setIconCoord(12, 6).setItemName("rawIron");
+	public static Item rawGold = (new Item(119)).setIconCoord(12, 7).setItemName("rawGold");
+	public static Item flippers = (new ItemArmor(120, 0, -1, 3)).setIconCoord(6, 7).setItemName("flippers");
 	public static Item record13 = (new ItemRecord(2000, "13")).setIconCoord(0, 15).setItemName("record");
 	public static Item recordCat = (new ItemRecord(2001, "cat")).setIconCoord(1, 15).setItemName("record");
 	public final int shiftedIndex;
--- net/minecraft/src/PlayerControllerTest.java
+++ net/minecraft/src/PlayerControllerTest.java
@@ -41,7 +41,7 @@
 
 	public boolean sendPlaceBlock(EntityPlayer var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7) {
 		int var8 = var2.getBlockId(var4, var5, var6);
-		if(var8 > 0 && Block.blocksList[var8].blockActivated(var2, var4, var5, var6, var1)) {
+		if(var8 > 0 && !var1.isSneaking() && Block.blocksList[var8].blockActivated(var2, var4, var5, var6, var1)) {
 			return true;
 		} else if(var3 == null) {
 			return false;
--- net/minecraft/src/MapGenStructure.java
+++ net/minecraft/src/MapGenStructure.java
@@ -7,11 +7,11 @@
 public abstract class MapGenStructure extends MapGenBase {
 	protected HashMap field_35631_e = new HashMap();
 
-	public void generate(IChunkProvider var1, World var2, int var3, int var4, byte[] var5) {
-		super.generate(var1, var2, var3, var4, var5);
+	public void generate(IChunkProvider var1, World var2, int var3, int var4, byte[] var5, byte[] var5a) {
+		super.generate(var1, var2, var3, var4, var5, var5a);
 	}
 
-	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
+	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6, byte[] var6a) {
 		if(!this.field_35631_e.containsKey(Long.valueOf(ChunkCoordIntPair.chunkXZ2Int(var2, var3)))) {
 			this.rand.nextInt();
 			if(this.func_35628_a(var2, var3)) {
--- /dev/null
+++ net/minecraft/src/EnumTool.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public enum EnumTool {
+    SWORD(0b00001),
+    AXE(0b00010),
+    PICKAXE(0b00100),
+    SHOVEL(0b01000),
+    HOE(0b10000);
+
+
+    private final int toolBit;
+    EnumTool(int bit) {
+        toolBit = bit;
+    }
+
+    public int getToolBit() {
+        return toolBit;
+    }
+}
--- net/minecraft/src/ItemRenderer.java
+++ net/minecraft/src/ItemRenderer.java
@@ -34,10 +34,20 @@
 
 			Tessellator var3 = Tessellator.instance;
 			int var4 = var1.getItemIcon(var2);
-			float var5 = ((float)(var4 % 16 * 16) + 0.0F) / 256.0F;
-			float var6 = ((float)(var4 % 16 * 16) + 15.99F) / 256.0F;
-			float var7 = ((float)(var4 / 16 * 16) + 0.0F) / 256.0F;
-			float var8 = ((float)(var4 / 16 * 16) + 15.99F) / 256.0F;
+			int var4a = var4 & 255;
+			float var5 = ((float)(var4a % 16 * 16) + 0.0F) / (var2.itemID < 256 ? 512.0F : 256.0F);
+			float var6 = ((float)(var4a % 16 * 16) + 15.99F) / (var2.itemID < 256 ? 512.0F : 256.0F);
+			float var7 = ((float)(var4a / 16 * 16) + 0.0F) / (var2.itemID < 256 ? 512.0F : 256.0F);
+			float var8 = ((float)(var4a / 16 * 16) + 15.99F) / (var2.itemID < 256 ? 512.0F : 256.0F);
+			int var4b = (var4 >> 8) & 3;
+			if (var4b % 2 == 1) {
+				var5 += 0.5F;
+				var6 += 0.5F;
+			}
+			if (var4b / 2 == 1) {
+				var7 += 0.5F;
+				var8 += 0.5F;
+			}
 			float var9 = 1.0F;
 			float var10 = 0.0F;
 			float var11 = 0.3F;
@@ -72,7 +82,7 @@
 			float var17;
 			for(var14 = 0; var14 < 16; ++var14) {
 				var15 = (float)var14 / 16.0F;
-				var16 = var6 + (var5 - var6) * var15 - 0.001953125F;
+				var16 = var6 + (var5 - var6) * var15 - 1 / (var2.itemID < 256 ? 1024.0F : 512.0F);
 				var17 = var9 * var15;
 				var3.addVertexWithUV((double)var17, 0.0D, (double)(0.0F - var13), (double)var16, (double)var8);
 				var3.addVertexWithUV((double)var17, 0.0D, 0.0D, (double)var16, (double)var8);
@@ -86,7 +96,7 @@
 
 			for(var14 = 0; var14 < 16; ++var14) {
 				var15 = (float)var14 / 16.0F;
-				var16 = var6 + (var5 - var6) * var15 - 0.001953125F;
+				var16 = var6 + (var5 - var6) * var15 - 1 / (var2.itemID < 256 ? 1024.0F : 512.0F);
 				var17 = var9 * var15 + 1.0F / 16.0F;
 				var3.addVertexWithUV((double)var17, 1.0D, (double)(0.0F - var13), (double)var16, (double)var7);
 				var3.addVertexWithUV((double)var17, 1.0D, 0.0D, (double)var16, (double)var7);
@@ -100,7 +110,7 @@
 
 			for(var14 = 0; var14 < 16; ++var14) {
 				var15 = (float)var14 / 16.0F;
-				var16 = var8 + (var7 - var8) * var15 - 0.001953125F;
+				var16 = var8 + (var7 - var8) * var15 - 1 / (var2.itemID < 256 ? 1024.0F : 512.0F);
 				var17 = var9 * var15 + 1.0F / 16.0F;
 				var3.addVertexWithUV(0.0D, (double)var17, 0.0D, (double)var6, (double)var16);
 				var3.addVertexWithUV((double)var9, (double)var17, 0.0D, (double)var5, (double)var16);
@@ -114,7 +124,7 @@
 
 			for(var14 = 0; var14 < 16; ++var14) {
 				var15 = (float)var14 / 16.0F;
-				var16 = var8 + (var7 - var8) * var15 - 0.001953125F;
+				var16 = var8 + (var7 - var8) * var15 - 1 / (var2.itemID < 256 ? 1024.0F : 512.0F);
 				var17 = var9 * var15;
 				var3.addVertexWithUV((double)var9, (double)var17, 0.0D, (double)var5, (double)var16);
 				var3.addVertexWithUV(0.0D, (double)var17, 0.0D, (double)var6, (double)var16);
@@ -396,6 +406,7 @@
 	}
 
 	private void renderInsideOfBlock(float var1, int var2) {
+		int var2a = var2 & 255;
 		Tessellator var3 = Tessellator.instance;
 		this.mc.thePlayer.getEntityBrightness(var1);
 		float var4 = 0.1F;
@@ -407,10 +418,19 @@
 		float var8 = 1.0F;
 		float var9 = -0.5F;
 		float var10 = 0.0078125F;
-		float var11 = (float)(var2 % 16) / 256.0F - var10;
-		float var12 = ((float)(var2 % 16) + 15.99F) / 256.0F + var10;
-		float var13 = (float)(var2 / 16) / 256.0F - var10;
-		float var14 = ((float)(var2 / 16) + 15.99F) / 256.0F + var10;
+		float var11 = (float)(var2a % 16) / 512.0F - var10;
+		float var12 = ((float)(var2a % 16) + 15.99F) / 512.0F + var10;
+		float var13 = (float)(var2a / 16) / 512.0F - var10;
+		float var14 = ((float)(var2a / 16) + 15.99F) / 512.0F + var10;
+		int var2b = (var2 >> 8) & 3;
+		if (var2b % 2 == 1) {
+			var11 += 0.5F;
+			var12 += 0.5F;
+		}
+		if (var2b / 2 == 1) {
+			var13 += 0.5F;
+			var14 += 0.5F;
+		}
 		var3.startDrawingQuads();
 		var3.addVertexWithUV((double)var5, (double)var7, (double)var9, (double)var12, (double)var14);
 		var3.addVertexWithUV((double)var6, (double)var7, (double)var9, (double)var11, (double)var14);
@@ -459,10 +479,19 @@
 			int var5 = Block.fire.blockIndexInTexture + var4 * 16;
 			int var6 = (var5 & 15) << 4;
 			int var7 = var5 & 240;
-			float var8 = (float)var6 / 256.0F;
-			float var9 = ((float)var6 + 15.99F) / 256.0F;
-			float var10 = (float)var7 / 256.0F;
-			float var11 = ((float)var7 + 15.99F) / 256.0F;
+			float var8 = (float)var6 / 512.0F;
+			float var9 = ((float)var6 + 15.99F) / 512.0F;
+			float var10 = (float)var7 / 512.0F;
+			float var11 = ((float)var7 + 15.99F) / 512.0F;
+			int var5a = (var5 >> 8) & 3;
+			if (var5a % 2 == 1) {
+				var8 += 0.5F;
+				var9 += 0.5F;
+			}
+			if (var5a / 2 == 1) {
+				var10 += 0.5F;
+				var11 += 0.5F;
+			}
 			float var12 = (0.0F - var3) / 2.0F;
 			float var13 = var12 + var3;
 			float var14 = 0.0F - var3 / 2.0F;
--- net/minecraft/src/ContainerCreative.java
+++ net/minecraft/src/ContainerCreative.java
@@ -7,27 +7,58 @@
 	public List field_35375_a = new ArrayList();
 
 	public ContainerCreative(EntityPlayer var1) {
-		Block[] var2 = new Block[]{Block.cobblestone, Block.stone, Block.oreDiamond, Block.oreGold, Block.oreIron, Block.oreCoal, Block.oreLapis, Block.oreRedstone, Block.field_35285_bn, Block.field_35285_bn, Block.field_35285_bn, Block.blockClay, Block.blockDiamond, Block.blockGold, Block.blockSteel, Block.bedrock, Block.blockLapis, Block.brick, Block.cobblestoneMossy, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.obsidian, Block.netherrack, Block.slowSand, Block.glowStone, Block.wood, Block.wood, Block.wood, Block.leaves, Block.dirt, Block.grass, Block.sand, Block.sandStone, Block.gravel, Block.web, Block.planks, Block.sapling, Block.sapling, Block.sapling, Block.deadBush, Block.sponge, Block.ice, Block.blockSnow, Block.plantYellow, Block.plantRed, Block.mushroomBrown, Block.mushroomRed, Block.reed, Block.cactus, Block.field_35281_bs, Block.pumpkin, Block.pumpkinLantern, Block.field_35278_bv, Block.field_35288_bq, Block.field_35282_br, Block.chest, Block.workbench, Block.glass, Block.tnt, Block.bookShelf, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.dispenser, Block.stoneOvenIdle, Block.music, Block.jukebox, Block.pistonStickyBase, Block.pistonBase, Block.fence, Block.field_35277_bw, Block.ladder, Block.rail, Block.railPowered, Block.railDetector, Block.torchWood, Block.stairCompactPlanks, Block.stairCompactCobblestone, Block.field_35280_bx, Block.field_35279_by, Block.lever, Block.pressurePlateStone, Block.pressurePlatePlanks, Block.torchRedstoneActive, Block.button, Block.cake, Block.trapdoor};
-		int var3 = 0;
-		int var4 = 0;
-		int var5 = 0;
-		int var6 = 0;
-		int var7 = 0;
+		Block[] var2 = new Block[]{Block.cobblestone, Block.cobblestone, Block.cobblestone, Block.cobblestone, Block.stone, Block.stone, Block.stone, Block.stone, Block.oreDiamond, Block.oreGold, Block.oreIron, Block.oreCoal, Block.oreLapis, Block.oreRedstone, Block.field_35285_bn, Block.field_35285_bn, Block.field_35285_bn, Block.field_35285_bn, Block.field_35285_bn, Block.field_35285_bn, Block.field_35285_bn, Block.field_35285_bn, Block.field_35285_bn, Block.field_35285_bn, Block.field_35285_bn, Block.field_35285_bn, Block.blockClay, Block.blockDiamond, Block.blockGold, Block.blockSteel, Block.bedrock, Block.blockLapis, Block.brick, Block.cobblestoneMossy, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingleWood, Block.stairSingleWood, Block.stairSingleWood, Block.stairSingleWood, Block.obsidian, Block.netherrack, Block.slowSand, Block.glowStone, Block.wood, Block.wood, Block.wood, Block.wood, Block.leaves, Block.dirt, Block.grass, Block.sand, Block.sandStone, Block.sand, Block.sandStone, Block.sand, Block.sandStone, Block.gravel, Block.web, Block.planks, Block.planks, Block.planks, Block.planks, Block.sapling, Block.sapling, Block.sapling, Block.sapling, Block.deadBush, Block.sponge, Block.ice, Block.blockSnow, Block.plantYellow, Block.plantRed, Block.mushroomBrown, Block.mushroomRed, Block.reed, Block.cactus, Block.field_35281_bs, Block.pumpkin, Block.pumpkinLantern, Block.field_35278_bv, Block.field_35288_bq, Block.field_35282_br, Block.chest, Block.workbench, Block.glass, Block.tnt, Block.bookShelf, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.hardenedClay, Block.hardenedClay, Block.hardenedClay, Block.hardenedClay, Block.hardenedClay, Block.hardenedClay, Block.hardenedClay, Block.hardenedClay, Block.hardenedClay, Block.hardenedClay, Block.hardenedClay, Block.hardenedClay, Block.hardenedClay, Block.hardenedClay, Block.hardenedClay, Block.hardenedClay, Block.coral, Block.coral, Block.coral, Block.coral, Block.coral, Block.coral, Block.coral, Block.coral, Block.coral, Block.coral, Block.coral, Block.coral, Block.coral, Block.coral, Block.coral, Block.coral, Block.dispenser, Block.stoneOvenIdle, Block.music, Block.jukebox, Block.pistonStickyBase, Block.pistonBase, Block.fence, Block.fence, Block.fence, Block.fence, Block.field_35277_bw, Block.palmFenceGate, Block.acaciaFenceGate, Block.wengeFenceGate, Block.ladder, Block.rail, Block.railPowered, Block.railDetector, Block.torchWood, Block.stairCompactPlanks, Block.stairCompactPlanks1, Block.stairCompactPlanks2, Block.stairCompactPlanks3, Block.stairCompactCobblestone, Block.stairCompactCobblestone1, Block.stairCompactCobblestone2, Block.stairCompactCobblestone3, Block.field_35280_bx, Block.field_35279_by, Block.field_35279_by1, Block.field_35279_by2, Block.field_35279_by3, Block.lever, Block.pressurePlateStone, Block.pressurePlatePlanks, Block.torchRedstoneActive, Block.button, Block.cake, Block.trapdoor};
+		int metaCloth = 0;
+		int metaClay = 0;
+		int metaSlab = 0;
+		int metaWoodSlab = 0;
+		int metaWood = 0;
+		int metaPlanks = 0;
+		int metaSapling = 0;
+		int metaStoneBrick = 0;
+		int metaSand = 0;
+		int metaSandStone = 0;
+		int metaCobble = 0;
+		int metaStone = 0;
+		int metaCoral = 0;
+		int metaFence = 0;
 
 		int var8;
 		int var9;
 		for(var8 = 0; var8 < var2.length; ++var8) {
 			var9 = 0;
 			if(var2[var8] == Block.cloth) {
-				var9 = var3++;
+				var9 = metaCloth++;
+			} else if(var2[var8] == Block.hardenedClay) {
+				var9 = metaClay++;
 			} else if(var2[var8] == Block.stairSingle) {
-				var9 = var4++;
+				var9 = metaSlab++;
+				if (metaSlab == 2) metaSlab++;
+			} else if(var2[var8] == Block.stairSingleWood) {
+				var9 = metaWoodSlab++;
 			} else if(var2[var8] == Block.wood) {
-				var9 = var5++;
+				var9 = metaWood++;
+			} else if(var2[var8] == Block.planks) {
+				var9 = metaPlanks++;
 			} else if(var2[var8] == Block.sapling) {
-				var9 = var6++;
+				var9 = metaSapling++;
 			} else if(var2[var8] == Block.field_35285_bn) {
-				var9 = var7++;
+				var9 = metaStoneBrick++;
+				if (metaStoneBrick % 4 == 3) {
+					metaStoneBrick++;
+				}
+			} else if(var2[var8] == Block.sand) {
+				var9 = metaSand++;
+			} else if(var2[var8] == Block.sandStone) {
+				var9 = metaSandStone++;
+			} else if(var2[var8] == Block.cobblestone) {
+				var9 = metaCobble++;
+			} else if(var2[var8] == Block.stone) {
+				var9 = metaStone++;
+			} else if(var2[var8] == Block.coral) {
+				var9 = metaCoral++;
+			} else if(var2[var8] == Block.fence) {
+				var9 = metaFence++;
 			}
 
 			this.field_35375_a.add(new ItemStack(var2[var8], 1, var9));
--- net/minecraft/src/ModelWolf.java
+++ net/minecraft/src/ModelWolf.java
@@ -43,10 +43,10 @@
 		this.wolfTail.addBox(-1.0F, 0.0F, -1.0F, 2, 8, 2, var1);
 		this.wolfTail.setRotationPoint(-1.0F, 12.0F, 8.0F);
 		this.wolfRightEar = new ModelRenderer(this, 16, 14);
-		this.wolfRightEar.addBox(-3.0F, -5.0F, 0.0F, 2, 2, 1, var1);
+		this.wolfRightEar.addBox(-4.0F, -6.0F, 0.0F, 3, 4, 1, var1);
 		this.wolfRightEar.setRotationPoint(-1.0F, var2, -7.0F);
 		this.wolfLeftEar = new ModelRenderer(this, 16, 14);
-		this.wolfLeftEar.addBox(1.0F, -5.0F, 0.0F, 2, 2, 1, var1);
+		this.wolfLeftEar.addBox(1.0F, -6.0F, 0.0F, 3, 4, 1, var1);
 		this.wolfLeftEar.setRotationPoint(-1.0F, var2, -7.0F);
 		this.wolfSnout = new ModelRenderer(this, 0, 10);
 		this.wolfSnout.addBox(-2.0F, 0.0F, -5.0F, 3, 3, 4, var1);
@@ -56,17 +56,25 @@
 	public void render(Entity var1, float var2, float var3, float var4, float var5, float var6, float var7) {
 		super.render(var1, var2, var3, var4, var5, var6, var7);
 		this.setRotationAngles(var2, var3, var4, var5, var6, var7);
+		float var8 = 1.5F;
+		GL11.glPushMatrix();
+		GL11.glTranslatef(0.0F, 2.5F * var7, 1.0F * var7);
 		this.wolfHeadMain.renderWithRotation(var7);
+		this.wolfRightEar.renderWithRotation(var7);
+		this.wolfLeftEar.renderWithRotation(var7);
+		this.wolfSnout.renderWithRotation(var7);
+		GL11.glPopMatrix();
+		GL11.glPushMatrix();
+		GL11.glScalef(1.0F / var8, 1.0F / var8, 1.0F / var8);
+		GL11.glTranslatef(0.0F, 12.0F * var7, 0.0F);
 		this.wolfBody.render(var7);
 		this.wolfLeg1.render(var7);
 		this.wolfLeg2.render(var7);
 		this.wolfLeg3.render(var7);
 		this.wolfLeg4.render(var7);
-		this.wolfRightEar.renderWithRotation(var7);
-		this.wolfLeftEar.renderWithRotation(var7);
-		this.wolfSnout.renderWithRotation(var7);
 		this.wolfTail.renderWithRotation(var7);
 		this.wolfMane.render(var7);
+		GL11.glPopMatrix();
 	}
 
 	public void setLivingAnimations(EntityLiving var1, float var2, float var3, float var4) {
--- net/minecraft/src/BiomeGenPlains.java
+++ net/minecraft/src/BiomeGenPlains.java
@@ -1,10 +1,18 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class BiomeGenPlains extends BiomeGenBase {
 	protected BiomeGenPlains(int var1) {
 		super(var1);
-		this.field_35488_u.field_35911_r = -999;
+		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 5, 4, 4));
+		this.field_35488_u.field_35911_r = 1;
 		this.field_35488_u.field_35910_s = 4;
 		this.field_35488_u.field_35909_t = 10;
+		this.stoneBlockMetadata = 2;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return this.field_35481_B;
 	}
 }
--- net/minecraft/src/ItemTool.java
+++ net/minecraft/src/ItemTool.java
@@ -1,15 +1,15 @@
 package net.minecraft.src;
 
 public class ItemTool extends Item {
-	private Block[] blocksEffectiveAgainst;
+	private EnumTool tool;
 	private float efficiencyOnProperMaterial = 4.0F;
-	private int damageVsEntity;
+	int damageVsEntity;
 	protected EnumToolMaterial toolMaterial;
 
-	protected ItemTool(int var1, int var2, EnumToolMaterial var3, Block[] var4) {
+	protected ItemTool(int var1, int var2, EnumToolMaterial var3, EnumTool tool) {
 		super(var1);
 		this.toolMaterial = var3;
-		this.blocksEffectiveAgainst = var4;
+		this.tool = tool;
 		this.maxStackSize = 1;
 		this.setMaxDamage(var3.getMaxUses());
 		this.efficiencyOnProperMaterial = var3.getEfficiencyOnProperMaterial();
@@ -17,11 +17,8 @@
 	}
 
 	public float getStrVsBlock(ItemStack var1, Block var2) {
-		for(int var3 = 0; var3 < this.blocksEffectiveAgainst.length; ++var3) {
-			if(this.blocksEffectiveAgainst[var3] == var2) {
-				return this.efficiencyOnProperMaterial;
-			}
-		}
+		if ((var2.getEffectiveAgainst() & tool.getToolBit()) != 0)
+			return this.efficiencyOnProperMaterial;
 
 		return 1.0F;
 	}
--- /dev/null
+++ net/minecraft/src/GenLayerAddOasis.java
@@ -1,0 +1,44 @@
+package net.minecraft.src;
+
+public class GenLayerAddOasis extends GenLayer {
+    private static final boolean[] deserts;
+
+    static {
+        deserts = new boolean[256];
+        deserts[BiomeGenBase.desert.field_35494_y] = true;
+        deserts[BiomeGenBase.oasis.field_35494_y] = true;
+    }
+
+    public GenLayerAddOasis(long par1, GenLayer par3GenLayer) {
+        super(par1);
+        this.field_35504_a = par3GenLayer;
+    }
+
+    public int[] func_35500_a(int par1, int par2, int par3, int par4) {
+        int i = par1 - 1;
+        int j = par2 - 1;
+        int k = par3 + 2;
+        int l = par4 + 2;
+        int[] ai = this.field_35504_a.func_35500_a(i, j, k, l);
+        int[] ai1 = IntCache.func_35267_a(par3 * par4);
+
+        for (int i1 = 0; i1 < par4; i1++) {
+            for (int j1 = 0; j1 < par3; j1++) {
+                int k1 = ai[j1 + 1 + (i1 + 0) * k];
+                int l1 = ai[j1 + 2 + (i1 + 1) * k];
+                int i2 = ai[j1 + 0 + (i1 + 1) * k];
+                int j2 = ai[j1 + 1 + (i1 + 2) * k];
+                int k2 = ai[j1 + 1 + (i1 + 1) * k];
+                this.func_35499_a(j1 + par1, i1 + par2);
+
+                if (deserts[k2] && deserts[k1] && deserts[l1] && deserts[i2] && deserts[j2] && this.func_35498_a(2) == 0) {
+                    ai1[j1 + i1 * par3] = BiomeGenBase.oasis.field_35494_y;
+                } else {
+                    ai1[j1 + i1 * par3] = k2;
+                }
+            }
+        }
+
+        return ai1;
+    }
+}
--- net/minecraft/src/RecipesCrafting.java
+++ net/minecraft/src/RecipesCrafting.java
@@ -5,8 +5,13 @@
 		var1.addRecipe(new ItemStack(Block.chest), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planks});
 		var1.addRecipe(new ItemStack(Block.stoneOvenIdle), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.cobblestone});
 		var1.addRecipe(new ItemStack(Block.workbench), new Object[]{"##", "##", Character.valueOf('#'), Block.planks});
-		var1.addRecipe(new ItemStack(Block.sandStone), new Object[]{"##", "##", Character.valueOf('#'), Block.sand});
-		var1.addRecipe(new ItemStack(Block.field_35285_bn, 4), new Object[]{"##", "##", Character.valueOf('#'), Block.stone});
+		var1.addRecipe(new ItemStack(Block.sandStone, 1, 0), new Object[]{"##", "##", Character.valueOf('#'), new ItemStack(Block.sand, 1, 0)});
+		var1.addRecipe(new ItemStack(Block.sandStone, 1, 1), new Object[]{"##", "##", Character.valueOf('#'), new ItemStack(Block.sand, 1, 1)});
+		var1.addRecipe(new ItemStack(Block.sandStone, 1, 2), new Object[]{"##", "##", Character.valueOf('#'), new ItemStack(Block.sand, 1, 2)});
+		var1.addRecipe(new ItemStack(Block.field_35285_bn, 4, 0), new Object[]{"##", "##", Character.valueOf('#'), new ItemStack(Block.stone, 1, 0)});
+		var1.addRecipe(new ItemStack(Block.field_35285_bn, 4, 4), new Object[]{"##", "##", Character.valueOf('#'), new ItemStack(Block.stone, 1, 1)});
+		var1.addRecipe(new ItemStack(Block.field_35285_bn, 4, 8), new Object[]{"##", "##", Character.valueOf('#'), new ItemStack(Block.stone, 1, 2)});
+		var1.addRecipe(new ItemStack(Block.field_35285_bn, 4, 12), new Object[]{"##", "##", Character.valueOf('#'), new ItemStack(Block.stone, 1, 3)});
 		var1.addRecipe(new ItemStack(Block.field_35288_bq, 16), new Object[]{"###", "###", Character.valueOf('#'), Item.ingotIron});
 		var1.addRecipe(new ItemStack(Block.field_35282_br, 16), new Object[]{"###", "###", Character.valueOf('#'), Block.glass});
 	}
--- net/minecraft/src/BlockMushroom.java
+++ net/minecraft/src/BlockMushroom.java
@@ -60,8 +60,7 @@
 
 	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
 		if(var3 >= 0) {
-			var1.getClass();
-			if(var3 < 128) {
+			if(var3 < 256) {
 				return var1.getFullBlockLightValue(var2, var3, var4) < 13 && this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
 			}
 		}
--- net/minecraft/src/GameSettings.java
+++ net/minecraft/src/GameSettings.java
@@ -24,6 +24,7 @@
 	public int limitFramerate = 1;
 	public boolean fancyGraphics = true;
 	public boolean ambientOcclusion = true;
+	public boolean colorCorrection = true;
 	public String skin = "Default";
 	public KeyBinding keyBindForward = new KeyBinding("key.forward", 17);
 	public KeyBinding keyBindLeft = new KeyBinding("key.left", 30);
@@ -149,6 +150,10 @@
 			this.mc.renderGlobal.loadRenderers();
 		}
 
+		if(var1 == EnumOptions.COLOR_CORRECTION) {
+			this.colorCorrection = !this.colorCorrection;
+		}
+
 		this.saveOptions();
 	}
 
@@ -157,19 +162,14 @@
 	}
 
 	public boolean getOptionOrdinalValue(EnumOptions var1) {
-		switch(EnumOptionsMappingHelper.enumOptionsMappingHelperArray[var1.ordinal()]) {
-		case 1:
-			return this.invertMouse;
-		case 2:
-			return this.viewBobbing;
-		case 3:
-			return this.anaglyph;
-		case 4:
-			return this.advancedOpengl;
-		case 5:
-			return this.ambientOcclusion;
-		default:
-			return false;
+		switch(var1) {
+			case INVERT_MOUSE: return this.invertMouse;
+			case VIEW_BOBBING: return this.viewBobbing;
+			case ANAGLYPH: return this.anaglyph;
+			case ADVANCED_OPENGL: return this.advancedOpengl;
+			case AMBIENT_OCCLUSION: return this.ambientOcclusion;
+			case COLOR_CORRECTION: return this.colorCorrection;
+			default: return false;
 		}
 	}
 
@@ -266,6 +266,10 @@
 						this.ambientOcclusion = var3[1].equals("true");
 					}
 
+					if(var3[0].equals("ta_colorCorrection")) {
+						this.colorCorrection = var3[1].equals("true");
+					}
+
 					if(var3[0].equals("skin")) {
 						this.skin = var3[1];
 					}
@@ -312,6 +316,7 @@
 			var1.println("difficulty:" + this.difficulty);
 			var1.println("fancyGraphics:" + this.fancyGraphics);
 			var1.println("ao:" + this.ambientOcclusion);
+			var1.println("ta_colorCorrection:" + this.colorCorrection);
 			var1.println("skin:" + this.skin);
 			var1.println("lastServer:" + this.lastServer);
 
--- net/minecraft/src/GuiVideoSettings.java
+++ net/minecraft/src/GuiVideoSettings.java
@@ -4,7 +4,7 @@
 	private GuiScreen parentGuiScreen;
 	protected String field_22107_a = "Video Settings";
 	private GameSettings guiGameSettings;
-	private static EnumOptions[] videoOptions = new EnumOptions[]{EnumOptions.GRAPHICS, EnumOptions.RENDER_DISTANCE, EnumOptions.AMBIENT_OCCLUSION, EnumOptions.FRAMERATE_LIMIT, EnumOptions.ANAGLYPH, EnumOptions.VIEW_BOBBING, EnumOptions.GUI_SCALE, EnumOptions.ADVANCED_OPENGL, EnumOptions.GAMMA};
+	private static EnumOptions[] videoOptions = new EnumOptions[]{EnumOptions.GRAPHICS, EnumOptions.RENDER_DISTANCE, EnumOptions.AMBIENT_OCCLUSION, EnumOptions.FRAMERATE_LIMIT, EnumOptions.ANAGLYPH, EnumOptions.VIEW_BOBBING, EnumOptions.GUI_SCALE, EnumOptions.ADVANCED_OPENGL, EnumOptions.GAMMA, EnumOptions.COLOR_CORRECTION};
 
 	public GuiVideoSettings(GuiScreen var1, GameSettings var2) {
 		this.parentGuiScreen = var1;
